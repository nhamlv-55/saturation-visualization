{"version":3,"sources":["resources/icons/singles/eye.svg","helpers/transformers.ts","components/Slider.tsx","model/util.ts","helpers/network.ts","components/Graph.tsx","helpers/navigation.ts","components/Main.tsx","components/ReplaceDialog.tsx","components/TreeEditor.tsx","components/Editor.tsx","components/NodeDetails.tsx","helpers/diff.ts","components/ExprMapSelector.tsx","components/Aside.tsx","components/StarModal.tsx","components/App.tsx","components/AppWrapper.tsx","components/ExpTable.tsx","helpers/spacerOptions.ts","components/MenuOptions.tsx","components/Menu.tsx","components/DashboardComponents/TimeChart.tsx","helpers/naming.ts","components/DashboardComponents/IndividualBenchmark.tsx","components/DashboardComponents/ResultsOverview.tsx","components/DashboardComponents/TimeZoom.tsx","components/DashboardComponents/GeneralGraphOverview.tsx","components/Dashboard.tsx","components/DashboardLanding.tsx","components/Router.tsx","serviceWorker.js","index.tsx","resources/icons/all.svg","helpers/util.ts","helpers/uber-s-exify.ts","resources/icons/singles/angle-arrow-down.svg","helpers/readable.ts"],"names":["module","exports","_","require","NULL_IDX","ASTNode","constructor","nodeID","token","parentID","children","shouldBreak","shouldInBracket","transformers","startLine","endLine","startOffset","endOffset","this","updateRange","node","isOpt","lst","Array","isArray","indexOf","ASTTransformer","Object","run","nodes","ast","t","action","params","condition","runStack","tStack","new_ast","cloneDeep","t_index","length","dirty","nodeList","getCondition","current_token","current_break","node_depth","nodeDepth","current_in_bracket","move","movable","cloned_ast","eval","parent","assert","siblings","nodePosition","buildVis","flipCmp","new_node","toImp","cloned_node","headChildren","tailChildren","newHead","newTail","cID","includes","new_cID","negateNode","push","childID","replace","last","source","RegExp","old_token","changeBreak","changeBracket","AST","formula","visNodes","visEdges","null_node","lstToAST","parse","getNode","child","deleteNode","negateMap","console","log","findNode","line","character","isSExpNode","_i","label","id","shape","size","from","to","toString","selectedID","toHTML","add_highlight","result","join","repeat","icons","Slider","React","slider","render","props","historyLength","currentTime","onCurrentTimeChange","className","disabled","enabled","onClick","viewBox","xlinkHref","ref","type","min","max","value","onChange","getSliderValue","current","parseInt","SatVisAssertionError","Error","message","super","name","styleTemplates","lemmaColours","buildPobLemmasMap","tree","varList","ExprMap","Map","exprID","expr","PobLemmasMap","event_type","lemmaExprID","level","pobID","existPrevLemma","lemma","prev_min","buildExprMap","exprMapItem","raw","readable","lhs","edited","changed","toVisNode","style","nodeSelection","finalInv","color","styleData","isMarked","finalColor","border","markedStyle","defaultStyle","background","highlight","highlightStyle","fixed","Graph","state","metaPressed","network","networkNodes","DataSet","networkEdges","graphContainer","boundKeyupHandler","keyupHandler","bind","componentDidMount","generateNetwork","updateNetwork","layout","fit","window","addEventListener","componentWillUnmount","removeEventListener","componentDidUpdate","prevProps","Network","edges","physics","interaction","multiselect","hierarchical","direction","sortMethod","on","clickEvent","a","clickedNodeId","onNodeSelectionChange","onlyUpdateStyles","visLayout","PobVisTree","treeCloned","JSON","stringify","same_as_sibl","identical_sibl","sibl","to_be_vis","new_children","PobVisLayout","ATree","nodeHasBeenSelected","currentNodeExprID","Number","MIN_SAFE_INTEGER","InvList","map","exprInfo","start","end","edgeId","visNode","filter","x","findIndex","visEdge","parentNodeId","hidden","arrows","smooth","toVisEdge","clear","add","event","closest_node","nodeId","currentNode","body","closestNode","min_distance","MAX_SAFE_INTEGER","idx","distance","y","edge","fromId","toId","closestNodes","findClosestNode","key","ReactModal","setAppElement","Main","runCmd","readOnly","ReplaceDialog","target","regex","defaultValue","e","setState","defaultChecked","checked","onApply","TreeEditor","selectedNodeIDs","stringRep","status","possibleTransformations","transformationSelected","astStack","transformerStack","transformer","localSelectedNodeIDs","isModal","saveExprs","input","redrawAST","redraw","updateConditionInputEvent","evt","updateParamsInputEvent","displayTransformers","index","display","width","applyStack","original_ast","error","applyLocal","currentAST","undo","pop","learnTransformationFromInputOutput","inputAST","outputAST","payload","fetch","method","mode","headers","response","json","responseJson","possiblePrograms","updateTransformationSelected","possibleTs","transformation","xmlAst","humanReadableAst","dangerouslySetInnerHTML","__html","onBlast","onTransformExprs","Editor","isChromeOrFirefox","monacoDiv","monaco","output","Monaco","create","lineNumbers","roundedSelection","scrollBeyondLastLine","scrollBeyondLastColumn","minimap","renderLineHighlight","hideCursorInOverviewRuler","links","overviewRulerBorder","automaticLayout","lineDecorationsWidth","lineNumbersMinChars","wordWrap","setValue","openEditor","getModel","getValueInRange","getSelection","getFormulas","split","blast","all_formulas","getValue","f","rows","NodeDetails","keep","type_map","learningFlag","learningErrorFlag","transformationFlag","transformationErrorFlag","editorIsOpen","editorTextInput","node_to_string","n","is_root","args","nl","arg","getLemmaExprs","lemmaExprs","lemmas","getLemmaList","lemma_list","colorIndex","lemmaStyle","keys","relatedExprMap","i","exprData","exprList","getCleanExprList","implies","forEach","literal","lemmaColour","addLemma","lemmaId","getOp","cleanExprOperators","innerText","trim","getIndexOfLiteral","splice","reorder","forceUpdate","learnTransformation","exp_path","transformExprsFromText","transformExprs","selectedProgram","closeModal","responseData","tExprMap","openModal","afterOpenModal","node1","node2","isOpen","onRequestClose","overlayClassName","contentLabel","expr1","expr2","expr1List","expr2List","Math","lineDiff","diff","added","removed","concat","toDiff","part","additional_info","expr_layout","ast_json","classNameTop","classNameBottom","ExprMapSelector","matchingFiles","exps","selected","fetchExps","getMatchingFiles","getMatchingExprMap","data","exp","getProblemName","fetchedJSON","updateRelatedExprMap","expr_map","exps_list","updateSelected","Aside","createButton","title","svg","getNodeDetails","exprMap","messages_q","mess","onPoke","onOpenStarModal","SatVisLayout","MultiSelectMode","SMTLayout","alignmentBaseline","textAnchor","dominantBaseline","fontWeight","stroke","fill","fontFamily","JSONLayout","StarModal","getFinalInvariant","lemma_list_edited","lemma_list_raw","lemma_set","Set","pob","lemma_id","expr_raw","expr_edited","App","Component","trees","varNames","starModalIsOpen","runSpacer","problem","spacerUserOptions","poke","message_q","nodes_list","rawWithVars","replaceVarNames","var_names","toReadable","run_cmd","spacer_state","saveExprMap","file","exp_name","undefined","errorMess","updateNodeSelection","tempNodeSelection","slice","updateCurrentTime","setPobVisLayout","setSatVisLayout","setMultiSelect","setSMTLayout","setJSONLayout","openStarModal","closeStarModal","main","hL","onUpdateNodeSelection","AppWrapper","hideBracketsAssoc","nonStrictForNegatedStrictInequalities","orientClauses","ExpTable","isFetching","item","pathname","done","options","MenuOptions","optionTypeHTML","optionType","optionValue","optionName","allOptions","showOptions","updateSpacerOptions","fullOptionString","option","changeSpacerUserOptions","storeSpacerOptions","preventDefault","reset","displaySpacerOptions","updateOptionValue","getOptions","placeholder","changeOptionType","tempList","removeOption","rIndex","changeSpacerManualUserOptions","newValue","showHideOptions","selectedOptions","htmlFor","src","eye","alt","kvp","displayValue","onSubmit","list","onChangeVariables","Menu","fileUpload","onDidChangeContent","onChangeProblem","problemName","chooseFile","uploadEncoding","onChangeSpacerUserOptions","click","files","reader","FileReader","onloadend","text","onChangeProblemName","readAsText","TimeChart","totalTime","palette","createSunburst","prevState","snapshot","prepareData","tmp","getData","resultKeys","values","d3","remove","colour","domain","range","myChart","SunburstChart","document","getElementById","height","tooltipTitle","showLabels","potholeToNormal","words","toUpperCase","substring","IndividualBenchmark","filterTimeData","d","reduce","obj","timeData","dataKey","ResultsOverview","createResultsOverview","results","xScale","config","margin","left","right","xMap","xValue","xAxis","tickValues","yValue","SPACER_num_invariants","yScale","graphHeight","top","bottom","yMap","yAxis","append","attr","font","call","axis","g","selectAll","enter","bandwidth","select","selectBenchmark","TimeZoom","instance","GeneralGraphOverview","createGraph","updateZoomView","classText","Dashboard","overviewMetrics","selectedBenchmark","graphMin","graphMax","customMode","customData","depth","memory","time","zoomMode","dashboardConfig","barNum","loadData","handleGraphTranslationKeyboard","rawData","parsedData","SPACER_cluster_out_of_gas","SPACER_expand_pob_undef","SPACER_inductive_level","SPACER_max_cluster_size","SPACER_max_cvx_reduced_dim","SPACER_max_query_lvl","SPACER_need_sage","SPACER_num_abstractions","SPACER_num_abstractions_failed","SPACER_num_abstractions_success","SPACER_num_active_lemmas","SPACER_num_cant_abstract","SPACER_num_ctp_blocked","SPACER_num_dim_reduction_success","SPACER_num_is_invariant","SPACER_num_lemma_jumped","SPACER_num_lemmas","SPACER_num_mbp_failed","SPACER_num_merge_gen","SPACER_num_merge_gen_failed","SPACER_num_merge_gen_success","SPACER_num_no_over_approximate","SPACER_num_non_lin","SPACER_num_pobs","SPACER_num_propagations","SPACER_num_queries","SPACER_num_reach_queries","SPACER_num_refinements","SPACER_num_reuse_reach_facts","SPACER_num_sync_cvx_cls","SPACER_num_under_approximations","SPACER_pob_out_of_gas","SPACER_wide_attmpts","SPACER_wide_success","max_memory","time_iuc_solver_get_iuc","time_iuc_solver_get_iuc_hyp_reduce1","time_iuc_solver_get_iuc_hyp_reduce2","time_iuc_solver_get_iuc_learn_core","time_pool_solver_proof","time_pool_solver_smt_total","time_pool_solver_smt_total_sat","time_pool_solver_smt_total_undef","time_spacer_ctp","time_spacer_init_rules","time_spacer_init_rules_pt_init","time_spacer_mbp","time_spacer_solve","time_spacer_solve_propagate","time_spacer_solve_pt_must_reachable","time_spacer_solve_reach","time_spacer_solve_reach_children","time_spacer_solve_reach_cluster","time_spacer_solve_reach_gen_bool_ind","time_spacer_solve_reach_gen_merge","time_spacer_solve_reach_gen_merge_cvx_cls","time_spacer_solve_reach_gen_wide","time_spacer_solve_reach_is_reach","handleSidebarClick","handleSidebarClickDot","handleHomeClick","handleClearClick","moveGraphLeft","moveGraphRight","moveGraphUp","moveGraphDown","handleGraphTranslationClick","handleCustomClick","filterDictionary","custom","j","addToCustomData","metric","metricDataKeys","totalData","innerHTML","customDataCopy","setZoomView","timeZoomData","benchmarks","timeKeys","arrow","DashboardLanding","fileReader","handleFileRead","content","returnObject","Date","now","updateData","handleFileChosen","updateFile","accept","dataItem","href","AppRouter","path","exact","changeProblem","changeProblemName","onChangeHideBracketsAssoc","changeHideBracketsAssoc","onChangeNonStrictForNegatedStrictInequalities","changeNonStrictForNegatedStrictInequalities","onChangeOrientClauses","changeOrientClauses","changeVariables","match","appComponent","exp_id","changeRawData","displayVisualization","fileId","newList","Boolean","location","hostname","ReactDOM","navigator","serviceWorker","ready","then","registration","unregister","line_number","offset","impl","c","logSym","parseResult","sep","op","lhsFinal","rhsFinal","negate","compOp","getCompOp","resultExprList","fileName"],"mappings":"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","file":"static/js/main.87d343dc.chunk.js","sourcesContent":["module.exports = __webpack_public_path__ + \"static/media/eye.bf3c357b.svg\";","import { Node, Edge } from 'vis';\nimport { assert } from \"./util\";\nimport {parse, isSExpNode, SExp, SExpNode} from './uber-s-exify';\nimport {negateMap} from \"./readable\";\nconst _ = require(\"lodash\");\n\nconst NULL_IDX = -100;\n\nexport interface ProseTransformation{\n    humanReadableAst: string,\n    xmlAst: string\n}\n\n\nexport class ASTNode{\n    nodeID: number;\n    token: string;\n    shouldBreak: number;\n    shouldInBracket: number;\n    parentID: number;\n    children: number[];\n    transformers = [];\n    startLine: number;\n    endLine: number;\n    startOffset: number;\n    endOffset: number;\n\n    constructor(nodeID: number, token: string, parentID: number, children: number[]){ \n        this.nodeID = nodeID;\n        this.token = token;\n        this.shouldBreak = 0;\n        this.shouldInBracket = 1;\n        this.parentID = parentID;\n        this.children = children;\n        this.startLine = -1;\n        this.endLine = -1;\n        this.startOffset = -1;\n        this.endOffset = -1;\n    }\n\n    updateRange(node: SExpNode){\n        this.startLine = node.startLine;\n        this.startOffset = node.startOffset;\n        this.endLine = node.endLine;\n        this.endOffset = node.endOffset;\n    }\n\n}\n\nfunction isOpt(lst: SExp|SExpNode){\n    const optList = [\"+\", \"-\", \"*\", \"/\",\n                     \">\", \"<\", \">=\", \"<=\", \"=\",\n                     \"and\", \"or\", \"not\", \"=>\",\n                     \"assert\",\n                     \"declare-datatypes\",\n                     \"forall\", \"exists\", \"define\",\n                     \"select\", \"store\"];\n\n    if(Array.isArray(lst)){\n        return false;\n    }\n    return optList.indexOf(lst.token)>-1;\n}\n\nexport interface Transformer{\n    action: string;\n    condition: string;\n    params: {};\n}\n\nexport class ASTTransformer extends Object{\n    run(nodes: number[], ast: AST, t: Transformer): [boolean, AST]{\n        if(t.action!==\"runStack\"){\n            return this[t.action](nodes, ast, t.params, t.condition);\n        }\n        return [false, ast];\n    }\n\n    runStack(ast: AST, tStack: Transformer[]): AST{\n        let new_ast = _.cloneDeep(ast);\n        //loop over all transformer\n        let t_index = 0;\n        while(t_index < tStack.length){\n            //apply the transformer to all the node if possible.\n            let dirty = true;\n\n            for(var node of new_ast.nodeList){\n                if(node.nodeID === NULL_IDX){\n                    //null node\n                    continue;\n                }\n                [dirty, new_ast] = this.run([node.nodeID], new_ast, tStack[t_index]);\n                if(dirty){\n                    break;\n                }\n            }\n            //only move to the next transformer if reach fixpoint (dirty = false)\n            if(!dirty){\n                t_index++;\n            }\n        }\n        return new_ast;\n    }\n\n    getCondition(action: string, nodes: number[], ast: AST): string{\n        let node = ast.nodeList[nodes[nodes.length - 1]];\n        let condition = \"true\";\n        switch(action){\n            case \"move\":{\n                const current_token = node.token;\n                condition = `node.token === ${current_token}`;\n                break;\n            }\n            case \"changeBreak\":{\n                const current_break = node.shouldBreak;\n                const node_depth = ast.nodeDepth(node);\n                condition = `ast.nodeDepth(node) === ${node_depth} && node.shouldBreak === ${current_break}`;\n                break;\n            }\n            case \"changeBracket\":{\n                const current_in_bracket = node.shouldInBracket ;\n                const node_depth = ast.nodeDepth(node);\n                condition = `ast.nodeDepth(node) === ${node_depth} && node.shouldInBracket === ${current_in_bracket}`;\n                break;\n            }\n            case \"squashNegation\":{\n                condition = \"true\";\n                break;\n            }\n            case \"replace\":{\n                condition = \"true\";\n                break;\n            }\n            default:{\n                const current_token = node.token;\n                const node_depth = ast.nodeDepth(node);\n                condition = `node.token === \"${current_token}\" && ast.nodeDepth(node) === ${node_depth}`;\n                break;\n            }\n        }\n        return condition;\n    }\n\n    move(nodes: number[], ast: AST, params: {}, condition: string ): [boolean, AST]{\n        /*\n          move an AST node to the left or to the right\n          E.g: moveLeft(\"+ x y z\", \"z\") -> \"+ x z y\"\n         */\n        let node = ast.nodeList[nodes[nodes.length - 1]];\n        const movable = [\"+\", \"*\", \"=\", \"and\", \"or\"];\n        let cloned_ast = _.cloneDeep(ast);\n\n        let dirty = false;\n        if(eval(condition)){\n            let parent = cloned_ast.nodeList[node.parentID];\n            assert('direction' in params);\n            assert(movable.indexOf(parent.token)!==-1, \"The parent node doesnt support reordering.\");//only can move stuff under some opt\n            let siblings = parent.children;\n\n            const nodePosition = siblings.indexOf(node.nodeID);\n\n            switch(params[\"direction\"]){\n                case \"l\":{\n                    if(nodePosition>0){\n                        //ES6 magic\n                        [siblings[nodePosition], siblings[nodePosition-1]] = [siblings[nodePosition-1], siblings[nodePosition]];\n                        dirty = true;\n                    }\n                    break;\n                }\n                case \"r\":{\n                    if(nodePosition<siblings.length-1){\n                        //ES6 magic\n                        [siblings[nodePosition], siblings[nodePosition+1]] = [siblings[nodePosition+1], siblings[nodePosition]];\n                        dirty = true;\n                    }\n                    break;\n                }\n                default:\n                    break;\n            }\n            cloned_ast.buildVis();\n        }\n        return [dirty, cloned_ast];\n    }\n\n    flipCmp(nodes: number[], ast: AST, params: {}, condition: string ): [boolean, AST]{\n        /*\n          flip a comparison node\n          E.g: flipCmp(\"> x y\") -> \"<= y x\"\n         */\n        let node = ast.nodeList[nodes[nodes.length - 1]];\n        let cloned_ast = _.cloneDeep(ast);\n        let dirty = false;\n        if(eval(condition)){\n            let new_node : ASTNode;\n            switch(node.token){\n                case \"=\":{\n                    new_node = new ASTNode(node.nodeID, \"=\", node.parentID, [node.children[1], node.children[0]]);\n                    dirty = true;\n                    break;\n                }\n                case \"<\":{\n                    new_node = new ASTNode(node.nodeID, \">\", node.parentID, [node.children[1], node.children[0]]);\n                    dirty = true;\n                    break;\n                }\n                case \">\":{\n                    new_node = new ASTNode(node.nodeID, \"<\", node.parentID, [node.children[1], node.children[0]]);\n                    dirty = true;\n                    break;\n                }\n                case \">=\":{\n                    new_node = new ASTNode(node.nodeID, \"<=\", node.parentID, [node.children[1], node.children[0]]);\n                    dirty = true;\n                    break;\n                }\n                case \"<=\":{\n                    new_node = new ASTNode(node.nodeID, \">=\", node.parentID, [node.children[1], node.children[0]]);\n                    dirty = true;\n                    break;\n                }\n                default:\n                    new_node = node;\n            }\n            cloned_ast.nodeList[node.nodeID] = new_node;\n            cloned_ast.buildVis();\n        }\n        return [dirty, cloned_ast];\n    }\n\n    toImp(nodes: number[], ast: AST, params: {}, condition: string ): [boolean, AST]{\n        /*\n          Convert (or X Y Z T) to (and(~X ~Y) => (or Z T))\n\n        */\n        if(nodes.length === 0){\n            return [false, _.cloneDeep(ast)];\n        }\n        \n        let node = ast.nodeList[nodes[nodes.length - 1]];\n        let cloned_ast = _.cloneDeep(ast);\n        let cloned_node = cloned_ast.nodeList[node.nodeID];\n        let dirty = false;\n        if(eval(condition)){\n            //get the `or` node\n            let parent = cloned_ast.nodeList[cloned_node.parentID];\n\n            if(!parent || parent.token!==\"or\"){\n                return [false, cloned_ast];\n            }\n            // For an implication X => Y, X is the head, Y is the tail\n            let headChildren = new Array<number>();\n            let tailChildren = new Array<number>();\n            let newHead: ASTNode;\n            let newTail: ASTNode;\n            for(var cID of parent.children){\n                if(nodes.includes(cID)){\n                    // console.log(\"c negate\", cloned_ast.nodeList[cID].negate());\n                    let new_cID = cloned_ast.negateNode(cID);\n                    headChildren.push(new_cID);\n                }else{\n                    tailChildren.push(cID);\n                }\n            }\n\n\n            //build the head (X in X => Y)\n            if(headChildren.length>1){\n                newHead = new ASTNode(cloned_ast.nodeList.length, \"and\", parent.nodeID, headChildren);\n                cloned_ast.nodeList.push(newHead);\n                for(var childID of headChildren){\n                    cloned_ast.nodeList[childID].parentID = newHead.nodeID;\n                }\n            }else{\n                newHead = cloned_ast.nodeList[headChildren[0]];\n            }\n\n\n            //build the tail (Y in X => Y)\n            if(tailChildren.length > 1){\n                newTail = new ASTNode(cloned_ast.nodeList.length, \"or\", parent.nodeID, tailChildren);\n                cloned_ast.nodeList.push(newTail);\n                for(var childID of tailChildren){\n                    cloned_ast.nodeList[childID].parentID = newTail.nodeID;\n                }\n            }else{\n                newTail = cloned_ast.nodeList[tailChildren[0]];\n            }\n            //change the `or` node into the `=>` node\n            parent.token = \"=>\";\n            parent.children = [newHead.nodeID, newTail.nodeID];\n\n            cloned_ast.buildVis();\n            dirty = true;\n        }\n        return [dirty, cloned_ast];\n    } \n\n    replace(nodes: number[], ast: AST, params: {}, condition: string ): [boolean, AST]{\n        let node = ast.nodeList[_.last(nodes)];\n        let cloned_ast = _.cloneDeep(ast);\n        let dirty = false;\n        let source = params[\"source\"]\n        if(eval(condition)){\n            if(params[\"regex\"]){\n                source = new RegExp(params[\"source\"])\n            }\n\n\n            for(var cloned_node of cloned_ast.nodeList){\n                let old_token = cloned_node.token\n                cloned_node.token = old_token.replace(source, params[\"target\"]);\n                if(cloned_node.token !== old_token){\n                    dirty = true;\n                }\n            }\n\n            if(dirty){\n                cloned_ast.buildVis();\n            }\n        }\n\n        return [dirty, cloned_ast];\n    }\n    changeBreak(nodes: number[], ast: AST, params:{}, condition: string ): [boolean,AST]{\n        let node = ast.nodeList[_.last(nodes)];\n        let cloned_ast = _.cloneDeep(ast);\n        if(eval(condition)){\n            cloned_ast.nodeList[node.nodeID].shouldBreak ^= 1;\n            cloned_ast.buildVis();\n            return [true, cloned_ast];\n        }\n        return [false, cloned_ast];\n    }\n    changeBracket(nodes: number[], ast: AST, params:{}, condition: string ): [boolean, AST]{\n        let node = ast.nodeList[_.last(nodes)];\n        let cloned_ast = _.cloneDeep(ast);\n        if(eval(condition)){\n            cloned_ast.nodeList[node.nodeID].shouldInBracket ^= 1;\n            cloned_ast.buildVis();\n            return [true, cloned_ast];\n        }\n        return [false, cloned_ast];\n    }\n}\n\n\nexport class AST {\n    nodeList = new Array<ASTNode>();\n    visNodes = new Array<Node>();\n    visEdges = new Array<Edge>();\n\n    null_node = new ASTNode(NULL_IDX, \"null-node\", NULL_IDX, []);\n    constructor(formula: string){\n        this.lstToAST(-1, parse(formula));\n        this.buildVis();\n    }\n\n    nodeDepth(node: ASTNode): number{\n        if (node.parentID===-1){\n            return 0;\n        }\n\n        return this.nodeDepth(this.nodeList[node.parentID])+1;\n    }\n    negateNode(nodeID: number): number{\n        let node = this.getNode(nodeID);\n        //if node is `not`, squash it\n        if(node.token===\"not\"){\n            /*\n              if a node is not->formula\n              replace it with ``formula``\n             */\n            let child = this.getNode(node.children[0]);\n            this.nodeList[nodeID] = new ASTNode(node.nodeID, child.token, node.parentID, child.children);\n            //point all child to the new parent\n            for(var cID of child.children){\n                this.getNode(cID).parentID = node.nodeID;\n            }\n\n            this.deleteNode(child.nodeID);\n            return node.nodeID;\n        }\n        //negate using negateMap if operator is in negate map\n        if(node.token in negateMap){\n            this.nodeList[nodeID] = new ASTNode(node.nodeID, negateMap[node.token], node.parentID, node.children);\n            return node.nodeID;\n        }\n        //negate a normal node\n        let new_node = new ASTNode(this.nodeList.length, `not`, node.parentID, [nodeID]);\n        console.log(\"new node\", new_node);\n        node.parentID = new_node.nodeID;\n        this.nodeList.push(new_node);\n        return new_node.nodeID;\n    }\n\n    getNode(nodeID: number): ASTNode{\n        return this.nodeList[nodeID];\n    }\n\n    deleteNode(nodeID: number): void{\n        this.nodeList[nodeID] = this.null_node;\n    }\n\n    findNode(line: number, character: number): ASTNode| null{\n        for(var node of this.nodeList){\n            if(node.startLine<=line &&\n                node.endLine>=line &&\n                node.startOffset<=character &&\n                node.endOffset>=character)\n                return node;\n        }\n        return null;\n    }\n\n\n    lstToAST(parentID: number, lst: SExp|SExpNode): number{\n        const nodeID = this.nodeList.length;\n        if(isSExpNode(lst)){\n            const node = new ASTNode(nodeID, lst.token, parentID, []);\n            node.updateRange(lst); \n            this.nodeList.push(node);\n            return nodeID;\n        }\n        //if is an opt\n        if(isOpt(lst[0])){\n            let node = new ASTNode(nodeID, (lst[0] as SExpNode).token, parentID, []);\n            node.updateRange(lst[0] as SExpNode);\n            this.nodeList.push(node);\n\n            for(var _i=1; _i < lst.length; _i++){\n\n                node.children.push(this.lstToAST(nodeID, lst[_i]));\n            }\n\n            return nodeID;\n        }else{\n            //is a list\n            let node = new ASTNode(nodeID, (lst[0] as SExpNode).token, parentID, []); \n            node.updateRange(lst[0] as SExpNode);\n            // let node = new ASTNode(nodeID, \"list\", parentID, []);\n            this.nodeList.push(node);\n\n            for(var _i=0; _i < lst.length; _i++){\n                node.children.push(this.lstToAST(nodeID, lst[_i]));\n            }\n\n            return nodeID;\n        }\n\n        //\n    }\n\n    buildVis(){\n        this.visNodes = [];\n        this.visEdges = [];\n\n        for(const node of this.nodeList){\n            if(node.nodeID!==NULL_IDX){\n                let label = node.token;\n\n                if(node.shouldInBracket){\n                    label = '(' + label + ')';\n                }\n                this.visNodes.push({\n                    id: node.nodeID,\n                    label: label + ((node.shouldBreak)?'\\u21B5':''),\n                    shape: \"box\",\n                    size: 20,\n                })\n                for(const childID of node.children){\n                    this.visEdges.push({\n                        id: this.visEdges.length,\n                        from: node.nodeID,\n                        to: childID\n                    })\n                }\n            }\n        }\n    }\n\n\n\n    toString(selectedID: number, node: ASTNode): string{\n        return this.toHTML(selectedID, node);\n    }\n    toHTML(selectedID: number, node: ASTNode, add_highlight = true): string{\n        let result: string;\n        if(node.children.length === 0){\n            result = node.token\n        }else{\n            let children = new Array<string>();\n            if(node.token !== 'list'){ children.push(node.token);  }\n\n            for(const childID of node.children){\n                children.push(this.toHTML(selectedID, this.nodeList[childID]));\n            }\n            if (children.length === 1 || !node.shouldInBracket){\n                result = children.join(\" \");\n            }else{\n                result = \"(\"+children.join(\" \")+\")\";\n            }\n\n\n        }\n\n        //add highlight\n        if(add_highlight && selectedID === node.nodeID){\n            result = '<span class=\"highlighted\">' + result + '</span>'\n        }\n\n        //add linebreak\n        if(node.shouldBreak){\n            result= '\\n'+ '    '.repeat(this.nodeDepth(node)) +  result ;\n        }\n\n        return result\n    }\n}\n\n\n","import * as React from 'react';\n\nimport '../styles/Slider.css';\n\n\nconst icons = require('../resources/icons/all.svg') as string;\n\ntype Props = {\n  historyLength: number,\n  currentTime: number,\n  onCurrentTimeChange: (newState: number) => void,\n  enabled: boolean\n};\nexport default class Slider extends React.Component<Props, {}> {\n\n  private slider = React.createRef<HTMLInputElement>();\n\n  render() {\n    const {historyLength, currentTime, onCurrentTimeChange} = this.props;\n      console.log(\"historyLength\", historyLength)\n    return (\n      <section className=\"component-slider\">\n\n        <button disabled={!this.props.enabled || currentTime <= 0} onClick={() => onCurrentTimeChange(currentTime - 1)}>\n          <svg viewBox=\"0 0 24 24\" className=\"icon\">\n            <use xlinkHref={`${icons}#history-back`}/>\n          </svg>\n        </button>\n\n        <section className=\"wrapper\">\n          <input\n            ref={this.slider}\n            type=\"range\"\n            min={0}\n            max={historyLength}\n            value={currentTime}\n            disabled={!this.props.enabled}\n            onChange={() => onCurrentTimeChange(this.getSliderValue())}\n          />\n        </section>\n\n        <button disabled={!this.props.enabled || currentTime >= historyLength} onClick={() => onCurrentTimeChange(currentTime + 1)}>\n          <svg viewBox=\"0 0 24 24\" className=\"icon\">\n            <use xlinkHref={`${icons}#history-forward`}/>\n          </svg>\n        </button>\n\n      </section>\n    );\n  }\n\n  // HELPERS ///////////////////////////////////////////////////////////////////////////////////////////////////////////\n\n  getSliderValue(): number {\n    return this.slider.current ? parseInt(this.slider.current.value, 10) : 0;\n  }\n\n}\n","class SatVisAssertionError extends Error {\n    constructor(message) {\n      super(message);\n      this.name = \"SatVisAssertionError\";\n    }\n  }\n\nexport function assert(condition, message=\"\") {\n    if (!condition)\n        throw new SatVisAssertionError('Assertion failed: ' + (message || ''));\n};","const styleTemplates = require('../resources/styleTemplates');\n\nexport const lemmaColours = [\n    \"#e6194B\",\n    \"#f58231\",\n    \"#3cb44b\",\n    \"#42d4f4\",\n    \"#000075\",\n    \"#469990\",\n    \"#911eb4\",\n    \"#f032e6\",\n    \"#fabebe\",\n    \"#800000\",\n];\n\n//BUILD POB LEMMAS MAP////////////////////\nexport function buildPobLemmasMap(tree: any, varList: string[]): any{\n    // construct exprID->expr map\n    let ExprMap = new Map<number, string>();\n    for (const nodeID in tree) {\n        const node = tree[nodeID];\n        ExprMap[node.exprID] = node.expr;\n    }\n\n    // construct PobExprID->a list of lemmas\n    let PobLemmasMap = {};\n    for (const nodeID in tree) {\n        let node = tree[nodeID];\n        if (node.event_type !== \"EType.ADD_LEM\") {\n            continue\n        }\n        const lemmaExprID = node.exprID;\n        const level = node.level;\n        const pobID = node.pobID;\n        if (!(pobID in PobLemmasMap)) {\n            PobLemmasMap[pobID] = new Array<{}>();\n        }\n\n        //traverse the list, if lemmaExprID is already in the list, update its min max\n        let existPrevLemma = false;\n        for (const lemma of PobLemmasMap[pobID]) {\n            if (lemma[0] === lemmaExprID) {\n                existPrevLemma = true;\n                let prev_min = lemma[1];\n                let prev_max = lemma[2];\n\n                if (level > prev_max || level === \"oo\") {\n                    lemma[2] = level\n                }\n                if (level < prev_min) {\n                    lemma[1] = level\n                }\n                break\n            }\n        }\n\n        if (!existPrevLemma) {\n            PobLemmasMap[node.pobID].push([lemmaExprID, level, level])\n        }\n    }\n    return PobLemmasMap\n}\n\n\n//BUILD EXPR MAP////////////////////////\nexport function buildExprMap(tree: any, varList: string[]): any{\n    let ExprMap = new Map<number, Object>();\n    for (const nodeID in tree) {\n        const node = tree[nodeID];\n        const exprMapItem = {\n            raw: node.expr.raw,\n            readable: node.expr.readable,\n            lhs: [], \n            edited: node.expr.readable,\n            changed: false\n        };\n        ExprMap[node.exprID] = exprMapItem;\n    }\n    return ExprMap\n\n}\n\nexport function PobVisLayout(tree): any{\n    let treeCloned = JSON.parse(JSON.stringify(tree));\n\n    for (const nodeID in treeCloned){\n        let node = treeCloned[nodeID];\n        if(node.event_type !== \"EType.EXP_POB\"){\n            node.to_be_vis = false;\n            continue\n        }\n\n        let parent = treeCloned[node.parent];\n        let siblings = parent.children;\n        let same_as_sibl = false;\n        let identical_sibl;\n        for(const siblID of siblings){\n\n            const sibl = treeCloned[siblID];\n            if(sibl.nodeID !== node.nodeID && sibl.exprID === node.exprID){\n                same_as_sibl = true;\n                identical_sibl = sibl;\n                break\n            }\n\n        }\n        if(same_as_sibl){\n            // I will disappear\n            node.to_be_vis = false;\n\n            // point all my children to my sibling\n            for(const childID of node.children){\n                treeCloned[childID].parent = identical_sibl.nodeID;\n                identical_sibl.children.push(childID)\n            }\n            //change my parent's children\n            let new_children = new Array<number>();\n            for (const childID of siblings){\n                if(childID !== node.nodeID){\n                    new_children.push(childID)\n                }\n            }\n            parent.children = new_children\n        }\n    }\n\n    return treeCloned\n}\n\nexport function toVisNode(node: any, style: string, nodeSelection, finalInv: number, color:number = -1): any {\n    const styleData = styleTemplates[style];\n    const isMarked = nodeSelection.includes(node.nodeID);\n\n    let finalColor  = {\n        border : isMarked ? styleData.markedStyle.border : styleData.defaultStyle.border,\n            background : isMarked ? styleData.markedStyle.background : styleData.defaultStyle.background,\n            highlight : {\n            border : styleData.highlightStyle.border,\n                background : styleData.highlightStyle.background\n        }\n    };\n    \n    if (style === \"lemma\" && color !== -1) {\n        finalColor = {\n            border: lemmaColours[color],\n            background: lemmaColours[color],\n            highlight: {\n                border: lemmaColours[color],\n                background: lemmaColours[color]\n            }\n        }\n    }\n    return {\n        id: node.nodeID,\n        shape: finalInv > 0 ? finalInv > 1 ? \"hexagon\" : \"star\" : styleData.shape,\n        fixed: true,\n        color: finalColor\n    };\n}\n\n\nexport function toVisEdge(edgeId: number, parentNodeId: number, nodeID: number, hidden: boolean) {\n    return {\n        id: edgeId,\n        arrows: \"to\",\n        color: {\n            color: \"#dddddd\",\n            highlight: \"#f8cfc1\",\n        },\n        from: parentNodeId,\n        to: nodeID,\n        smooth: false,\n        hidden: hidden\n    }\n}\n\nexport function getSliderValue(slider): number {\n    return slider.current ? parseInt(slider.current.value, 10) : 0;\n}\n\n","import * as React from 'react';\nimport { DataSet, Network, Node, Edge } from 'vis'\n\nimport '../styles/Graph.css'\nimport { assert } from '../model/util';\nimport {PobVisLayout, toVisEdge, toVisNode} from \"../helpers/network\";\nimport {findClosestNode} from \"../helpers/navigation\";\n\n\ntype Props = {\n    tree: any,\n    onNodeSelectionChange: (selection: number[]) => void,\n    nodeSelection: number[],\n    currentTime: number,\n    layout: string,\n    PobLemmasMap: any,\n};\n\ntype State = {\n    metaPressed: boolean,\n};\n\nexport default class Graph extends React.Component<Props, {}> {\n\n    state: State = {\n        metaPressed: false,\n    };\n\n    network: Network | null = null;\n    networkNodes = new DataSet<Node>([]);\n    networkEdges = new DataSet<Edge>([]);\n    graphContainer = React.createRef<HTMLDivElement>();\n    boundKeyupHandler =  this.keyupHandler.bind(this);\n   \n    componentDidMount() {\n        this.generateNetwork();\n        this.updateNetwork(false, this.props.layout);\n        this.network!.fit();\n        window.addEventListener(\"keyup\", this.boundKeyupHandler, false);\n    }\n\n    componentWillUnmount() {\n        window.removeEventListener(\"keyup\", this.boundKeyupHandler, false);\n    }\n\n    componentDidUpdate(prevProps: Props) {\n        this.updateNetwork(false, this.props.layout);\n    }\n\n    render() {\n        return (\n            <section className= \"component-graph\" ref = { this.graphContainer } >\n                <canvas/>\n            </section>\n        );\n    }\n\n    generateNetwork() {\n        console.log(\"I am Graph. I receive:\", this.props)\n        assert(this.graphContainer.current);\n        assert(!this.network); // should only be called once\n\n        this.network = new Network(this.graphContainer.current!, {\n            nodes: this.networkNodes,\n            edges: this.networkEdges\n        }, {\n            physics: false,\n            interaction: {\n                multiselect: false\n            },layout: {\n                hierarchical: {\n                    direction: 'UD',\n                    sortMethod: 'directed',\n                },\n            }\n\n        });\n\n        this.network.on('click', async (clickEvent) => {\n            if (clickEvent.nodes.length > 0) {\n\n                assert(clickEvent.nodes.length === 1);\n                const clickedNodeId = clickEvent.nodes[0];\n                console.log(\"clickEvent.nodes\", clickEvent.nodes);\n                console.log(\"clickedNodeId\", this.props.tree[clickedNodeId]);\n                this.props.onNodeSelectionChange(clickEvent.nodes);\n            } else {\n                this.props.onNodeSelectionChange([]);\n            }\n        });\n\n    }\n\n    // updates the network displayed by Vis.js\n    updateNetwork(onlyUpdateStyles: boolean, layout: string) {\n        if (layout === \"SatVis\"){\n            this.visLayout(this.props.tree);\n        } else if(layout === \"PobVis\"){\n            const PobVisTree =  PobVisLayout(this.props.tree);\n            this.visLayout(PobVisTree);\n        }\n    }\n\n    visLayout(ATree){\n        let nodeHasBeenSelected = this.props.nodeSelection.length > 0;\n        let currentNodeExprID = Number.MIN_SAFE_INTEGER;\n        let InvList:{id: string, start: string, end: string}[] = [];\n        if(nodeHasBeenSelected) {\n            currentNodeExprID = ATree[this.props.nodeSelection[0]].exprID;\n            InvList = currentNodeExprID in this.props.PobLemmasMap ? this.props.PobLemmasMap[currentNodeExprID].map((exprInfo) => {\n                return {\n                    id: exprInfo[0],\n                    start: exprInfo[1],\n                    end: exprInfo[2]\n                }\n            }): [];\n        }\n        const visNodes = new Array<Node>();\n        const visEdges = new Array<Edge>();\n        let edgeId = 0;\n        \n\n\n        for (const nodeID in ATree){\n            let node = ATree[nodeID];\n            if(!node.to_be_vis) continue;\n            let visNode;\n            let FinalInvList = node.exprID in this.props.PobLemmasMap ? this.props.PobLemmasMap[node.exprID].filter(exprInfo => exprInfo[2] === \"oo\") : [];\n            let finalInv = (FinalInvList.filter(x => x[1] === node.level || x[1] === \"oo\").length);\n            //Prioritize related nodes\n            if (node.exprID === currentNodeExprID) {\n                visNode = toVisNode(node, \"sameExprID\", this.props.nodeSelection, finalInv)\n            } else if (InvList.length > 0 && InvList.filter(exprInfo => exprInfo.id === node.exprID).length > 0){\n                visNode = toVisNode(node, \"lemma\", this.props.nodeSelection, finalInv, InvList.findIndex(x => x.id === node.exprID) % 10);\n            } else if (node.nodeID > this.props.currentTime) {\n                visNode = toVisNode(node, \"activated\", this.props.nodeSelection, finalInv);\n            } else {\n                visNode = toVisNode(node, \"passive\", this.props.nodeSelection, finalInv);\n            }\n\n            visNodes.push(visNode);\n            const visEdge = toVisEdge(edgeId, node.parent, node.nodeID, false);\n            visEdges.push(visEdge);\n            edgeId++;\n        }\n        this.networkNodes.clear();\n        this.networkNodes.add(visNodes);\n        this.networkEdges.clear();\n        this.networkEdges.add(visEdges);\n\n    }\n\n    keyupHandler(event) {\n        if(this.props.nodeSelection.length !== 1 ) return;\n        const selected_node = this.props.nodeSelection[0];\n        let closest_node = findClosestNode(selected_node, event.key, this.network);\n        this.props.onNodeSelectionChange([closest_node]);\n    }\n}\n","import {assert} from \"../model/util\";\n\nexport function findClosestNode(nodeId: number, direction, network){\n    assert(network);\n    assert(\"body\" in network!);\n    const currentNode = network!.body.nodes[nodeId];\n    let closestNode = currentNode.id;\n    let min_distance = Number.MAX_SAFE_INTEGER;\n\n    if (direction === \"ArrowLeft\"){\n        for(const idx in network!.body.nodes){\n            const node = network!.body.nodes[idx];\n            let distance = currentNode.x - node.x;\n            if (node.y !== currentNode.y) {continue}\n            if (distance > 0 && distance < min_distance){\n                closestNode = node.id;\n                min_distance = distance;\n            }\n        }\n    }\n    else if (direction === \"ArrowRight\"){\n        for (let idx in network!.body.nodes){\n            const node = network!.body.nodes[idx];\n            let distance = node.x - currentNode.x;\n            if (node.y !== currentNode.y) {continue}\n            if (distance > 0 && distance < min_distance){\n                closestNode = node.id;\n                min_distance = distance;\n            }\n        }\n    }\n    else if (direction === \"ArrowDown\" && currentNode.edges.length >= 2){\n        closestNode = currentNode.edges.filter(edge => edge.fromId === currentNode.id)[0].toId;\n    }\n    else if (direction === \"ArrowUp\" && currentNode.edges.length >= 1){\n        let closestNodes = currentNode.edges.filter(edge => edge.toId === currentNode.id);\n        if (closestNodes.length > 0){\n            closestNode = closestNodes[0].fromId;\n        }\n    }\n    return closestNode;\n\n}\n","import * as React from 'react';\n\nimport Slider from './Slider';\nimport Graph from './Graph';\nimport ReactModal from 'react-modal';\nReactModal.setAppElement('#root');\n\ntype Props = {\n    mode: \"proof\" | \"replay\" | \"iterative\",\n    tree: any,\n    runCmd: string,\n    onNodeSelectionChange: (selection: number[]) => void,\n    nodeSelection: number[],\n    historyLength: number,\n    currentTime: number,\n    onCurrentTimeChange: (newState: number) => void,\n    layout: string,\n    PobLemmasMap: any,\n};\nexport default class Main extends React.Component<Props, {}> {\n\n    // TODO: remove this, after supporting button clicks in Aside while the modal is active\n    componentDidMount() {\n    }\n\n    render() {\n        return (\n            <main>\n                    <input type=\"text\" value = {this.props.runCmd} readOnly></input>\n                    <Graph\n                        tree= { this.props.tree }\n                        onNodeSelectionChange={this.props.onNodeSelectionChange}\n                        nodeSelection={this.props.nodeSelection}\n                        currentTime = {this.props.currentTime}\n                        layout = {this.props.layout}\n                        PobLemmasMap = {this.props.PobLemmasMap}\n                    />\n                    <Slider\n                        historyLength={this.props.historyLength}\n                        currentTime={this.props.currentTime}\n                        onCurrentTimeChange={this.props.onCurrentTimeChange}\n                        enabled={true}\n                    />\n                </main>\n        );\n    }\n\n}\n","import * as React from 'react';\n\ntype Props = {\n    onApply: (action: string, params: {})=>void,\n}\n\ntype State = {\n    source: string,\n    target: string,\n    regex: boolean\n}\n\n\nclass ReplaceDialog extends React.Component<Props, State> {\n    state = {\n        source: \"\",\n        target: \"\",\n        regex: false,\n    };\n\n\n\n    render() {\n        console.log(this.props, this.state)\n        return (\n            <div>\n                {`Replace: `}<input type=\"text\" defaultValue=\"\"onChange={(e)=> {this.setState({source: e.target.value})}} />\n                {` with: `}<input type=\"text\" defaultValue=\"\"onChange={(e)=> {this.setState({target: e.target.value})}}/>\n                {`\\tRegex?`}\n                <input type=\"checkbox\"\n                       defaultChecked={false}\n                       onChange={(e)=> {this.setState({regex: e.target.checked})} }\n                />\n                <button onClick={this.props.onApply.bind(this, \"replace\",\n                                                         {\"source\": this.state.source,\n                                                          \"target\": this.state.target,\n                                                          \"regex\": this.state.regex\n                })}>Replace</button>\n                </div>\n        );\n    }\n\n\n}\n\nexport default ReplaceDialog;\n","import * as React from 'react';\nimport { AST, ASTTransformer, Transformer, ProseTransformation} from \"./../helpers/transformers\";\nimport { assert } from '../model/util';\nimport { DataSet, Network, Node, Edge } from 'vis'\nimport ReplaceDialog from './ReplaceDialog'\nconst _ = require(\"lodash\");\ntype Props = {\n    name: string,\n    input: string,\n    onBlast: (tStack: Transformer[])=>void,\n    isModal: boolean,\n    saveExprs?: ()=> void,\n    onTransformExprs?: (t: string)=> Promise<void>,\n}\ntype State = {\n    selectedNodeIDs: number[],\n    stringRep: string,\n    status: string,\n    possibleTransformations: ProseTransformation[],\n    transformationSelected: string,\n}\n\nclass TreeEditor extends React.Component<Props, State> {\n    state = {\n        selectedNodeIDs: [-1],\n        stringRep: \"\",\n        status: \"\",\n        possibleTransformations: [],\n        transformationSelected: \"\",\n    }\n    network: Network | null = null;\n    networkNodes = new DataSet<Node>([]);\n    networkEdges = new DataSet<Edge>([]);\n    graphContainer = React.createRef<HTMLDivElement>();\n    astStack = new Array<AST>();\n    transformerStack = new Array<Transformer>();\n    transformer = new ASTTransformer();\n    localSelectedNodeIDs = [-1];\n    componentDidMount() {\n        if(this.props.isModal){\n            this.props.saveExprs!();\n        }\n        this.generateNetwork();\n        if(this.props.input !== \"()\"){\n            this.astStack = [new AST(this.props.input)];\n            this.redrawAST();\n        }\n    }\n\n    redrawAST(){\n        if(this.astStack[this.astStack.length-1] != null){\n            let ast = this.astStack[this.astStack.length-1];\n            console.log(ast);\n            console.log(\"visNodes\", ast.visNodes);\n            console.log(\"visEdges\", ast.visEdges);\n\n            this.networkEdges.clear();\n            this.networkEdges.add(ast.visEdges);\n            this.networkNodes.clear();\n            this.networkNodes.add(ast.visNodes);\n            /* this.network!.fit(); */\n            this.network!.redraw();\n            console.log(ast.toHTML(_.last(this.state.selectedNodeIDs), ast.nodeList[0]));\n            this.setState({stringRep: ast.toHTML(_.last(this.state.selectedNodeIDs), ast.nodeList[0])});\n        }\n    }\n\n\n\n    componentDidUpdate(prevProps: Props){\n        if(prevProps.input !== this.props.input){\n            //new formula. clear everything\n            this.astStack = [new AST(this.props.input)];\n            this.transformerStack = [];\n            this.redrawAST();\n        }\n    }\n\n    generateNetwork() {\n        console.log(\"I am Graph. I receive:\", this.props)\n        assert(this.graphContainer.current);\n        assert(!this.network); // should only be called once\n        this.network = new Network(this.graphContainer.current!, {\n            nodes: this.networkNodes,\n            edges: this.networkEdges\n        }, {\n            physics: false,\n            interaction: {\n                multiselect: true\n            },layout: {\n                hierarchical: {\n                    /* direction: 'UD', */\n                    sortMethod: 'directed',\n                },\n            }\n\n        });\n\n        this.network.on('click', async (clickEvent) => {\n            if (clickEvent.nodes.length > 0) {\n                console.log(\"clickEvent.nodes\", clickEvent.nodes);\n                    this.localSelectedNodeIDs = clickEvent.nodes;\n            } else {\n                this.setState({selectedNodeIDs: []});\n            }\n        });\n        \n    }\n\n    updateConditionInputEvent(evt: React.ChangeEvent<HTMLInputElement>, idx: number){\n        this.transformerStack[idx].condition = evt.target.value;\n    }\n    updateParamsInputEvent(evt: React.ChangeEvent<HTMLInputElement>, idx: number){\n        this.transformerStack[idx].params = JSON.parse(evt.target.value);\n    }\n\n    displayTransformers() {\n        const listItems = this.transformerStack.map((t, index) =>{\n            return (\n                <div  key={index} className=\"transformer-wrapper\">\n                    {`If `}\n                    <input style={{display: \"inline-block\", width: \"20rem\"}}\n                           ref=\"condition-${index}\"\n                           type=\"text\"\n                           defaultValue={t.condition}\n                           onChange={evt => this.updateConditionInputEvent(evt, index)}/>\n                    <br/>\n                    {`then run __${t.action}__ with params:`}\n                    <br/>\n                    <input ref=\"params-${index}\" type=\"text\" defaultValue={JSON.stringify(t.params)}\n                           style={{width: \"100%\"}}\n                           onChange={evt => this.updateParamsInputEvent(evt, index)}/>\n                </div>);\n        });\n\n        return listItems;\n    }\n\n    applyStack(){\n        const original_ast = new AST(this.props.input);\n\n        try{\n            this.astStack.push(this.transformer.runStack(original_ast, this.transformerStack));\n            this.transformerStack.push({\"action\": \"runStack\", \"params\": \"\", \"condition\": \"\"});\n            this.redrawAST();\n        }catch(error){\n            this.setState({\"status\": \"Error:\"+error.message});\n        }\n    }\n\n    applyLocal(action: string, params: {}){\n        const currentAST = this.astStack[this.astStack.length - 1];\n        const nodes = this.localSelectedNodeIDs;\n        console.log(params)\n        let t = {\"action\": action, \"params\": params, \"condition\": \"true\"};\n        try{\n            let [dirty, new_ast] = this.transformer.run(nodes, currentAST, t);\n            if(dirty){\n                this.astStack.push(new_ast);\n                //guess the condition\n                t.condition = this.transformer.getCondition(action, nodes, currentAST);\n                this.transformerStack.push(t);\n                this.redrawAST();\n            }\n        }catch(error){\n            this.setState({\"status\": \"Error:\"+error.message});\n        }\n    }\n    undo(){\n        if(this.astStack.length>1){\n            this.astStack.pop();\n            this.transformerStack.pop();\n            this.redrawAST();\n        }\n    }\n    async learnTransformationFromInputOutput() {\n        let inputAST = this.astStack[0];\n        let outputAST = this.astStack[this.astStack.length - 1];\n\n        let payload = {\n            \"inputOutputExamples\":[{\"input\": inputAST.toString(-1, inputAST.nodeList[0]),\n                                 \"output\": outputAST.toString(-1, outputAST.nodeList[0]),\n                                 \"aux\": [\"\"]}],\n            \"exp_path\": this.props.name\n        };\n\n        console.log(\"payload\", payload);\n        const response = await fetch(\"http://localhost:5000/spacer/learn_transformation_modified\", {\n            method: 'POST',\n            mode :'cors',\n            headers: {\n                'Accept': 'application/json',\n                'Content-Type': 'application/json'\n            }, body : JSON.stringify(payload)\n        });\n        if (response.status === 200){\n            const responseJson = await response.json();\n            let possiblePrograms = responseJson[\"response\"];\n            console.log(possiblePrograms);\n            this.setState({\n                possibleTransformations: possiblePrograms\n            });\n        }\n        else {\n            this.setState({\n                possibleTransformations: []\n            });\n        }\n    }\n    \n    updateTransformationSelected(e) {\n        this.setState({\n            transformationSelected: e.target.value\n        })\n    }\n    render() {\n        console.log(\"I'm TreeEditor. I got\", this.props.input);\n        console.log(\"I'm TreeEditor. My possibleTs:\", this.state.possibleTransformations);\n        let tStack = this.displayTransformers();\n        let possibleTs = this.state.possibleTransformations.map((transformation: ProseTransformation,key) => (\n            <div key={key}>\n                <input type=\"radio\" name={\"transformation\"} value={transformation.xmlAst}\n                       onClick={this.updateTransformationSelected!.bind(this)}/>{transformation.humanReadableAst}\n            </div>\n        ))\n\n        return (\n            <div className=\"tree-editor\">\n                <div className=\"editor-options-card\" id=\"graph-container\">\n                    <h4>{this.state.status}</h4>\n                    <div className=\"editor-menu\">\n                        {`Hint: Long click to select multiple nodes`}\n                        <br/>\n                        <button onClick={this.applyLocal.bind(this, \"flipCmp\", {})}>Flip Cmp</button>\n                        <button onClick={this.applyLocal.bind(this, \"toImp\", {})}>To Imp</button>\n                        <button onClick={this.applyLocal.bind(this, \"move\", {\"direction\": \"l\"})}>Move Left</button>\n                        <button onClick={this.applyLocal.bind(this, \"move\", {\"direction\": \"r\"})}>Move Right</button>\n                        <button onClick={this.applyLocal.bind(this, \"changeBreak\", {})}>\\n?</button>\n                        <button onClick={this.applyLocal.bind(this, \"changeBracket\", {})}>()?</button>\n                        <br/>\n                        <ReplaceDialog\n                            onApply = {this.applyLocal.bind(this)}\n                        />\n                        <br/>\n\n                        <button onClick={this.undo.bind(this)}>Undo</button>\n                        <pre className=\"editor-string-rep\" dangerouslySetInnerHTML={{ __html: this.state.stringRep }} />\n                    </div>\n                    <div className= \"editor-component-graph\" ref = { this.graphContainer }>\n                        <canvas/>\n                    </div>\n                </div>\n                <div className=\"editor-options-card\" id=\"transformer-container\">\n                    <h3>Transformer Queue</h3>\n                    <pre>{`\nCondition examples:\n- apply the transformation for all the node\nwhose token pass the regex test \"ab+c\"\n  /ab+c/.test(node.token)\n- apply the transformation for all the node\nwhose token is either x, y, or z\n  [\"x_\", \"y_\", \"z_\"].includes(node.token)\n- apply the transformation for all the node\nat depth 2\n  ast.nodeDepth(node) === 2\n                        `}</pre>\n                    {tStack}\n                    <button onClick={this.applyStack.bind(this)}>Apply for the current AST</button>\n                    <button onClick={this.props.onBlast.bind(this, this.transformerStack)}>Blast</button>\n                    <button onClick={this.learnTransformationFromInputOutput.bind(this)}>Learn</button>\n                    <h3>Possible Transformations</h3>\n                    {possibleTs}\n                    {this.props.isModal?<button onClick={this.props.onTransformExprs!.bind(this, this.state.transformationSelected)}>Apply Everywhere</button>:''}\n                </div>\n            </div>\n        );\n    }\n}\n\nexport default TreeEditor;\n","import * as React from 'react';\nimport '../styles/Editor.css';\nimport * as Monaco from 'monaco-editor'\nimport TreeEditor from \"./TreeEditor\";\nimport { AST, ASTTransformer, Transformer} from \"./../helpers/transformers\";\nconst icons = require('../resources/icons/all.svg') as string;\n\ntype Props = {\n    input: string,\n    name: string,\n    isModal: boolean,\n    onTransformExprs?: (t: string)=> Promise<void>,\n    saveExprs?: ()=> void,\n}\n\ntype State = {\n    input: string,\n    output: string\n}\n\n\nexport class Editor extends React.Component<Props, State> {\n    private isChromeOrFirefox = true;\n    monacoDiv = React.createRef<HTMLDivElement>();\n    monaco: Monaco.editor.IStandaloneCodeEditor | null = null\n\n    state: State = {\n        input: \"()\",\n        output: \"\"\n    };\n\n\n    componentDidMount() {\n        if (!this.isChromeOrFirefox) {\n            return;\n        }\n\n        // generate instance of Monaco Editor\n        this.monaco = Monaco.editor.create(this.monacoDiv.current!, {\n            lineNumbers: 'off',\n            roundedSelection: false,\n            scrollBeyondLastLine: false,\n            scrollBeyondLastColumn: 0,\n            minimap: {\n                enabled: false\n            },\n            renderLineHighlight: 'none',\n            hideCursorInOverviewRuler: true,\n            links: false,\n            overviewRulerBorder: false,\n            automaticLayout: false,\n            lineDecorationsWidth: 0,\n            lineNumbersMinChars: 0,\n            wordWrap: 'wordWrapColumn'\n            // fontFamily: \"Monaco\" TODO: decide which font to use. By default, multiple fonts are loaded, which is quite slow\n        });\n\n        this.monaco.setValue(this.props.input);\n\n        /* this.monaco.setValue(this.props.problem);\n         * this.monaco.getModel()!.onDidChangeContent(() => {\n         *     console.log(this.monaco!.getModel()!.getValue());\n         *     this.props.onChangeProblem(this.monaco!.getModel()!.getValue());\n         * }); */\n    }\n\n    openEditor(){\n        console.log(\"click Apply\")\n\n        let input = this.monaco!.getModel()!.getValueInRange(this.monaco!.getSelection()!);\n        console.log(input)\n        /* getValue()!; */\n\n        this.setState({\n            input: input\n        });\n    }\n\n    getFormulas(input: string): string[]{\n        return input.split(/\\n\\s*\\n/);\n    }\n\n    blast(tStack: Transformer[]){\n        let all_formulas = this.getFormulas(this.monaco?.getModel()!.getValue()!);\n        let transformer = new ASTTransformer();\n\n\n        console.log(all_formulas);\n        console.log(tStack);\n        console.log(\"pew pew !\");\n\n        let output=\"\"\n        for(var f of all_formulas){\n            let ast = new AST(f);\n            let new_ast = transformer.runStack(ast, tStack);\n            let new_f = new_ast.toString(-1, new_ast.nodeList[0]);\n            output+=new_f+\"\\n\\n\";\n        }\n        this.setState({output: output});\n    }\n\n    render() {\n        if (!this.isChromeOrFirefox) {\n            return (\n                <section className=\"unsupported-message\">\n                    <svg viewBox=\"0 0 24 24\" className=\"icon\">\n                        <use xlinkHref={`${icons}#alert-triangle`}/>\n                    </svg>\n                    <span>Your current browser is not supported. Please use Chrome or Firefox!</span>\n                </section>\n            );\n        }\n\n        return (\n            <section className=\"component-menu\">\n                <section className=\"editor\">\n                    <div id=\"editor-wrapper\">\n                        <h2>Original</h2>\n                        <div ref={this.monacoDiv} className=\"monaco\" id=\"input\"></div>\n                        <button onClick={this.openEditor.bind(this)}>Open Editor</button>\n                        <h2>Transformed</h2>\n                        <textarea ref=\"output\" id=\"output\" rows={30} value={this.state.output} readOnly></textarea>\n                    </div>\n                    {/* <TransformerTable/> */}\n                    {this.props.isModal?\n                    <TreeEditor\n                        name ={this.props.name}\n                        input = {this.state.input}\n                        onBlast = {this.blast.bind(this)}\n                        isModal = {this.props.isModal}\n                        onTransformExprs = {this.props.onTransformExprs!.bind(this)}\n                        saveExprs = {this.props.saveExprs!.bind(this)}\n                    />:\n                     <TreeEditor\n                         name ={this.props.name}\n                         input = {this.state.input}\n                         onBlast = {this.blast.bind(this)}\n                         isModal = {this.props.isModal}\n                     />\n                    }\n                </section>\n\n            </section>\n        );\n    }\n}\n\n","import * as React from 'react';\n\nimport '../styles/NodeDetails.css';\nimport '../styles/Editor.css';\nimport {toDiff} from \"../helpers/diff\";\nimport {lemmaColours} from \"../helpers/network\";\nimport {cleanExprOperators, getCleanExprList, getIndexOfLiteral, getOp, reorder} from \"../helpers/readable\";\nimport Modal from 'react-modal';\nimport TreeEditor from './TreeEditor';\nimport {Editor} from './Editor';\ntype Props = {\n    nodes: any,\n    name: string\n    PobLemmasMap: {},\n    ExprMap: {},\n    layout: string,\n    expr_layout: \"SMT\" | \"JSON\",\n    saveExprs: () => void,\n    relatedExprMap: any\n};\n\ntype State = {\n    learningFlag: boolean,\n    learningErrorFlag: boolean,\n    transformationFlag: boolean\n    transformationErrorFlag: boolean\n    possibleTransformations: {humanReadableAst: string, xmlAst: string}[]\n    transformationSelected: string,\n    editorIsOpen: boolean,\n    editorTextInput: string,\n}\n\nexport default class NodeDetails extends React.Component<Props, State> {\n\n    keep = false; // hack to skip each second event generated by Sortable\n    constructor(props) {\n        super(props);\n        this.state = {\n            learningFlag: false,\n            learningErrorFlag: false,\n            transformationFlag: false,\n            transformationErrorFlag: false,\n            possibleTransformations: [],\n            transformationSelected: \"\",\n            editorIsOpen: false,\n            editorTextInput: \"\",\n        }\n    }\n\n    type_map = {\n        \"EQUALS\": \"= \",\n        \"PLUS\": \"+ \",\n        \"TIMES\": \"* \",\n        \"LT\": \"< \",\n        \"LE\": \"<= \",\n        \"GT\": \"> \",\n        \"GE\": \">= \",\n        \"SYMBOL\": \"\",\n        \"0_REAL_CONSTANT\": \"\"\n    };\n\n    node_to_string(n: Object, is_root: Boolean):string{\n        let result = \"\";\n        let args = \"\";\n        const nl = is_root?\"\\n\":\"\";\n        //build args \n        if (Array.isArray(n[\"content\"])){\n            for(const arg of n[\"content\"]){\n                args+=this.node_to_string(arg, false)+nl\n            }\n        }else{\n            args+=n[\"content\"]\n        }\n        //build node\n        if (n[\"type\"] in this.type_map){\n            if(this.type_map[n[\"type\"]]===\"\"){\n                result = \" \"+ args\n            }else{\n                result = \"(\" + this.type_map[n[\"type\"]] + args + \")\"\n            }\n        }else{\n            result = \"(\" + n[\"type\"] + nl + args + \")\"\n        }\n        return result\n    }\n\n    getLemmaExprs(node){\n        /*\n        Convert all lemmas under a pob to input to Editor\n        */\n        let lemmaExprs = new Array<string>();\n        if (node.event_type === \"EType.EXP_POB\") {\n            if (node.exprID in this.props.PobLemmasMap){\n                let lemmas = this.props.PobLemmasMap[node.exprID];\n                for (const lemma of lemmas){\n                    let expr = this.props.ExprMap[lemma[0]];\n                    lemmaExprs.push(expr[\"raw\"]);\n                }\n            }\n        }\n        return lemmaExprs;\n    }\n\n    getLemmaList(node) {\n        let lemma_list: JSX.Element[] = [];\n        if (node.event_type === \"EType.EXP_POB\") {\n            lemma_list.push(<h2 key =\"lemma-title\"> Lemmas summarization </h2>);\n            if (node.exprID in this.props.PobLemmasMap){\n                let lemmas = this.props.PobLemmasMap[node.exprID];\n                for (const lemma of lemmas){\n                    let colorIndex = lemmas.indexOf(lemma);\n                    let lemmaStyle = {\n                        color: lemmaColours[colorIndex]\n                    };\n                    lemma_list.push(<h3 style={lemmaStyle} key={\"lemma-header-\"+ lemma[0]}>ExprID: {lemma[0]}, From: {lemma[1]} to {lemma[2]}</h3>);\n                    let expr = this.props.ExprMap[lemma[0]].edited;\n                    if (typeof expr === \"string\"){\n                        if (Object.keys(this.props.relatedExprMap).length > 0){\n                            let keys = Object.keys(this.props.relatedExprMap);\n                            for (let i = 0; i < keys.length; i++){\n                                let exprData = this.props.relatedExprMap[keys[i]];\n                               if (expr === exprData.readable) {\n                                   expr = exprData.edited;\n                                   break;\n                               }\n                            }\n                        }\n                        let exprList = getCleanExprList(expr, \"\\n\");\n                        let implies = -1;\n                        for (let i = 0; i < exprList.length; i++){\n                            if (exprList[i].includes(\"=>\")){\n                                implies = i;\n                                break;\n                            }\n                        }\n                        exprList.forEach((literal, key) => {\n                            let lemmaColour = {\n                                color: \"black\"\n                            }\n                            if (implies !== -1){\n                                if (key > implies){\n                                    lemmaColour.color = \"darkblue\";\n                                }\n                            }\n                            if (key !== exprList.length - 1) {\n                                lemma_list.push(<pre style={lemmaColour} onClick={this.addLemma.bind(this, lemma[0])} key={\"lemma-expr-\"+lemma[0] + key}>{literal}</pre>);\n                            }\n                            else {\n                                lemma_list.push(<pre style={lemmaColour} onClick={this.addLemma.bind(this, lemma[0])}\n                                                     key={\"lemma-expr-\" + lemma[0] + key}>{literal}</pre>);\n                            }\n                        });\n                    }\n                    else {\n                        lemma_list.push(<pre>{expr}</pre>);\n                    }\n                }\n            }\n        }\n        return lemma_list;\n    }\n    \n    addLemma(lemmaId, e) {\n        let expr = this.props.ExprMap[lemmaId].readable;\n        let exprList = getCleanExprList(expr, getOp(expr));\n        let literal = (cleanExprOperators(e.target.innerText));\n        literal = literal.trim();\n        let index = getIndexOfLiteral(exprList, literal);\n        let lhs = this.props.ExprMap[lemmaId].lhs;\n        if (lhs.includes(index)){\n            lhs.splice(lhs.indexOf(index), 1);\n        }\n        else {\n            lhs.push(index)\n        }\n        \n        this.props.ExprMap[lemmaId].lhs = lhs;\n        this.props.ExprMap[lemmaId].edited = reorder(expr, lhs, getOp(expr));\n        this.props.ExprMap[lemmaId].changed = lhs.length !== 0;\n        this.props.saveExprs();\n        this.forceUpdate();\n        \n    }\n    \n    async learnTransformation() {\n        this.setState({\n            learningFlag: false,\n            learningErrorFlag: false,\n            transformationFlag: false,\n            transformationErrorFlag: false,\n            possibleTransformations: []\n        });\n\n        const response = await fetch(\"http://localhost:5000/spacer/learn_transformation\", {\n            method: 'POST',\n            mode :'cors',\n            headers: {\n                'Accept': 'application/json',\n                'Content-Type': 'application/json'\n            }, body : JSON.stringify({\n                exp_path: this.props.name\n            })\n        });\n        if (response.status === 200){\n            let responseJson = await response.json();\n            let possiblePrograms = responseJson[\"response\"];\n            this.setState({\n                learningFlag: true,\n                possibleTransformations: possiblePrograms\n            });\n            this.forceUpdate();\n        }\n        else {\n            this.setState({\n                learningErrorFlag: true\n            });\n        }\n    }\n    async transformExprsFromText(t: string) {\n        //wrapper around transformExprs to take in a string instead of reading transformationSelected from state\n        this.setState({\n            transformationSelected: t\n        }, ()=>this.transformExprs());\n    }\n\n    async transformExprs() {\n        this.setState({\n            transformationFlag: false,\n            transformationErrorFlag: false\n        });\n        const response = await fetch(\"http://localhost:5000/spacer/apply_transformation\", {\n            method: 'POST',\n            mode :'cors',\n            headers: {\n                'Accept': 'application/json',\n                'Content-Type': 'application/json'\n            }, body : JSON.stringify({\n                exp_path: this.props.name,\n                selectedProgram: this.state.transformationSelected\n            })\n        });\n\n        if (response.status === 200){\n            this.closeModal();\n            let responseData = await response.json();\n            let tExprMap = responseData[\"response\"];\n            Object.keys(tExprMap).forEach((key) => {\n                this.props.ExprMap[key].edited = tExprMap[key]['Edited'];\n                this.props.ExprMap[key].lhs = tExprMap[key]['Lhs'];\n            });\n            this.props.saveExprs();\n            this.setState({\n                transformationFlag: true,\n            });\n            this.forceUpdate();\n        }\n        else {\n            this.setState({\n                transformationErrorFlag: true\n            });\n        }\n    }\n    \n    updateTransformationSelected(e) {\n        this.setState({\n            transformationSelected: e.target.value\n        })\n    }\n\n    openModal() {\n        let editorTextInput = this.getLemmaExprs(this.props.nodes[0]).join(\"\\n\\n\");\n        this.setState({editorIsOpen: true, editorTextInput: editorTextInput});\n    }\n\n    afterOpenModal() {\n        // references are now sync'd and can be accessed.\n    }\n\n    closeModal(){\n        this.setState({editorIsOpen: false});\n    }\n\n    render() {\n        let node1, node2;\n        \n        if (this.props.nodes.length > 1){\n            node1 = this.props.nodes[0];\n            node2 = this.props.nodes[1];\n        }\n        return (\n            <div>\n                {/* Editor modal */}\n                <Modal\n                    isOpen={this.state.editorIsOpen}\n                    onRequestClose={this.closeModal.bind(this)}\n                    overlayClassName=\"editor-modal\"\n                    contentLabel=\"Example Modal\"\n                >\n                    <h2>Editor</h2>\n                    <button onClick={this.closeModal.bind(this)}>Close</button>\n                    <Editor\n                        name={this.props.name}\n                        input={this.state.editorTextInput}\n                        isModal={true}\n                        onTransformExprs = {this.transformExprsFromText.bind(this)}\n                    saveExprs={this.props.saveExprs.bind(this)}\n                    />\n                </Modal>\n\n                {this.props.nodes.length > 1 && <section className='component-node-details details-diff'>\n                    <article>\n                        <h2>Diff (Node: <strong>{node1.nodeID}</strong> vs. Node: <strong>{node2.nodeID}</strong>)</h2>\n                        {toDiff(node1.expr.readable, node2.expr.readable).map((part, key) => (\n                            <span key={key} className={part.added ? \"green\" : part.removed ? \"red\" : \"black\"}>\n                                {part.value}\n                            </span>\n                        ))}\n                    </article>\n                </section>}\n                {this.props.nodes.map((node, key) => {\n                    let additional_info =\"type:\" + node.event_type + \" level:\" + node.level;\n                    let lemma_list = this.getLemmaList(node);\n\n                    let expr = node.expr.readable;\n                    if (this.props.expr_layout===\"SMT\") {\n                        console.log(node.expr);\n                    }\n                    else {\n                        /* expr = JSON.stringify(this.props.node.ast_json, null, 2); */\n                        if (node.ast_json) {\n                            expr += this.node_to_string(node.ast_json, true);\n                        }\n                    }\n                    const classNameTop = \"component-node-details details-top-\" + key;\n                    const classNameBottom = \"component-node-details details-bottom-\" + key;\n                    return (\n                        <div key = {key}>\n                            <section className={classNameTop}>\n                                <article>\n                                    <h2>Node <strong>{node.nodeID}, </strong>Expr <strong> {node.exprID} </strong>,\n                                        Parent <strong> {node.pobID}  </strong></h2>\n                                    <h3>{additional_info}</h3>\n                                    <pre className={this.props.nodes.length === 1 ? \"black\" : node === node1 ? \"red\" : \"green\" }>{expr}</pre>\n                                </article>\n                            </section>\n                            {lemma_list.length > 0 && <section className={classNameBottom}>\n                                <article>\n                                    {lemma_list}\n                                    <button onClick={this.openModal.bind(this)}>Open Editor</button>\n                                    <button onClick={this.learnTransformation.bind(this)}>Learn Transform</button>\n                                    {this.state.learningFlag && <p>Possible Transformations: </p>}\n                                    {this.state.possibleTransformations.length !== 0 && this.state.possibleTransformations.map((transformation,key) => (\n                                        <div key={key}>\n                                            <input type=\"radio\" name={\"transformation\"} value={transformation.xmlAst} onClick={this.updateTransformationSelected.bind(this)}/>{transformation.humanReadableAst}\n                                        </div>\n                                    ))}\n                                    {this.state.learningErrorFlag && <p style={{color: \"red\"}}>Internal Server Error: Please Try Again</p>}\n                                    <button onClick={this.transformExprs.bind(this)}>Apply Transform</button>\n                                    {this.state.transformationFlag && <p>Transformation Complete</p>}\n                                    {this.state.transformationErrorFlag && <p style={{color: \"red\"}}>Internal Server Error: Please Try Again</p>}\n                                </article>\n                            </section>}\n                        </div>\n                    );\n                })}\n            </div>\n);\n\n\n\n\n        /* let additional_info =\"type:\" + this.props.node.event_type + \" level:\" + this.props.node.level */\n        /* let lemma_list = new Array(); */\n\n        //if(this.props.node.event_type == \"EType.EXP_POB\"){\n        //    lemma_list.push(<h2 key =\"lemma-title\"> Lemmas summarization </h2>)\n        //    if(this.props.node.exprID in this.props.PobLemmasMap){\n        //        let lemmas = this.props.PobLemmasMap[this.props.node.exprID]\n        //        for (const lemma of lemmas){\n        //            lemma_list.push(<h3 key={\"lemma-header-\"+ lemma[0]}>ExprID: {lemma[0]}, From: {lemma[1]} to {lemma[2]}</h3>)\n        //            lemma_list.push(<pre key={\"lemma-expr-\"+lemma[0]}>{this.props.ExprMap[lemma[0]]}</pre>)\n        //        }\n        //    }\n        //}\n\n        //let expr = \"\"\n        //if(this.props.expr_layout==\"SMT\"){\n        //    expr = this.props.node.expr\n        //}else{\n        //    /* expr = JSON.stringify(this.props.node.ast_json, null, 2); */\n        //    if(this.props.node.ast_json){\n        //        expr += this.node_to_string(this.props.node.ast_json, true);\n        //    }\n        //}\n\n        //return (\n        //    <div >\n        //        <section className= { 'component-node-details details-top'} >\n        //        <article>\n        //        <h2>Node <strong>{this.props.node.nodeID}, </strong>Expr < strong > { this.props.node.exprID } </strong>, Parent <strong> {this.props.node.pobID}  </strong></h2 >\n        //        <h3>{additional_info}</h3>\n        //        <pre>{expr}</pre>\n        //        </article>\n        //        </section>\n        //        <section className= { 'component-node-details details-bottom'} >\n        //            <article>\n        //                {lemma_list}\n        //            </article>\n        //        </section>\n        //    </div>\n        //);\n\n    }\n\n}\n","import * as diff from 'diff';\nexport function toDiff(expr1, expr2){\n    let result : {value:string, added:boolean, removed:boolean}[] = [];\n    let expr1List = expr1.split(\"\\n\");\n    let expr2List = expr2.split(\"\\n\");\n    for (let i = 0; i < Math.min(expr1List.length, expr2List.length); i++){\n        let lineDiff = diff.diffWords(expr1List[i], expr2List[i]);\n        lineDiff.push({\n            added: false,\n            removed: false, \n            value: \"\\n\"\n        });\n        result = result.concat(lineDiff);\n        console.log(result);\n    }\n    console.log(result);\n    return result;\n    \n} ","import * as React from 'react';\nimport {getProblemName} from \"../helpers/readable\";\n\ntype Props = {\n    name: string\n    updateRelatedExprMap: (exprMap) => void\n}\n\ntype State = {\n    matchingFiles: any[],\n    exps: any[],\n    selected: string\n}\n\nclass ExprMapSelector extends React.Component<Props, State> {\n    constructor(props: Props){\n        super(props);\n        this.state = {\n            matchingFiles: [],\n            exps: [],\n            selected: \"\"\n        }\n    }\n    \n    async componentDidMount() {\n        await this.fetchExps();\n        this.getMatchingFiles();\n        await this.getMatchingExprMap();\n    }\n\n    getMatchingFiles() {\n        let data = this.state.exps.filter(exp => exp.name.includes(getProblemName(this.props.name)) && exp.name !== this.props.name);\n        \n        if (data.length > 0){\n            this.setState({\n                matchingFiles: data,\n                selected: data[0].name\n            });\n        }\n    }\n    \n    async getMatchingExprMap() {\n        const fetchedJSON = await fetch('http://localhost:5000/spacer/get_exprs', {\n            method: 'POST',\n            mode: 'cors',\n            headers: {\n                'Accept': 'application/json',\n                'Content-Type': 'application/json'\n            }, body : JSON.stringify({\n                exp_path: this.state.selected,\n            })\n        });\n\n        try {\n            const json = await fetchedJSON.json();\n            this.props.updateRelatedExprMap(JSON.parse(json.expr_map));\n        } catch (error) {\n            if (error.name === \"SatVisAssertionError\") {\n                throw error;\n            }\n            this.setState({\n                exps: []\n            });\n        }\n    }\n\n    async fetchExps() {\n        const fetchedJSON = await fetch('http://localhost:5000/spacer/fetch_exps', {\n            method: 'POST',\n            mode: 'cors',\n            headers: {\n                'Accept': 'application/json',\n                'Content-Type': 'application/json'\n            }, body : \"\"\n        });\n\n        try {\n            const json = await fetchedJSON.json();\n            this.setState({exps: json.exps_list})\n        } catch (error) {\n            if (error.name === \"SatVisAssertionError\") {\n                throw error;\n            }\n            this.setState({\n                exps: []\n            });\n        }\n    }\n    \n    updateSelected(e) {\n        this.setState({\n            selected: e.target.value\n        });\n    } \n    \n    render() {\n        return (\n            <section className={\"component-node-details details-top-right\"}>\n                <select id=\"exprs\" onChange={this.updateSelected.bind(this)}>\n                {this.state.matchingFiles.length > 0 && this.state.matchingFiles.map((exp, key) => (\n                    <option key={key} value={exp.name}>{exp.name}</option>\n                ))}\n                </select>\n                <button onClick={this.getMatchingExprMap.bind(this)}>Get Expr Map</button>\n            </section>\n\n        );\n    }\n}\n\nexport default ExprMapSelector","import * as React from 'react';\n\nimport '../styles/NodeMenu.css';\nimport NodeDetails from './NodeDetails';\nimport ExprMapSelector from \"./ExprMapSelector\";\nconst icons = require('../resources/icons/all.svg') as string;\n\ntype Props = {\n    messages_q: string[],\n    mode: \"proof\" | \"replay\" | \"iterative\",\n    tree: any | null,\n    nodeSelection: number[],\n    onUpdateNodeSelection: (selection: number[]) => void,\n    onPoke: () => void,\n    onOpenStarModal: () => void,\n    SatVisLayout: () => void,\n    PobVisLayout: () => void,\n    MultiSelectMode: () => void,\n    SMTLayout: () => void,\n    JSONLayout:() => void,\n    PobLemmasMap: {},\n    ExprMap: {},\n    layout: string,\n    expr_layout: \"SMT\"|\"JSON\",\n    saveExprs: () => void,\n    name: string\n};\n\ntype State = {\n    relatedExprMap: any\n}\n\nclass Aside extends React.Component<Props, State> {\n    constructor(props: Props){\n        super(props);\n        this.state = {\n            relatedExprMap: []\n        }\n    }\n\n    createButton(title, onClick, svg) {\n        return <button\n                   title={title}\n                   onClick = { onClick }\n               >\n            <svg viewBox=\"0 0 24 24\" className = \"icon big\" >\n                <use xlinkHref={ `${icons}#${svg}` } />\n            </svg>\n        </button>;\n    }\n    getNodeDetails() {\n        if (this.props.nodeSelection.length >= 1  && this.props.tree != null) {\n            let nodes: any[] = [];\n            for (let node of this.props.nodeSelection){\n                nodes.push(this.props.tree[node]);\n            }\n            return <NodeDetails\n                       nodes={nodes}\n                       name={this.props.name}\n                       PobLemmasMap = { this.props.PobLemmasMap }\n                       ExprMap = { this.props.ExprMap }\n                       layout = { this.props.layout }\n                       expr_layout ={this.props.expr_layout}\n                       saveExprs = {this.props.saveExprs}\n                       relatedExprMap = {this.state.relatedExprMap}\n                       \n            />;\n        } else {\n            return <section className={ 'component-node-details overview' }>\n                <small id=\"nodeInfo\" > <strong>{`${this.props.nodeSelection.length} nodes`\n                } </strong> selected</small >\n            </section>\n        }\n        \n    }\n    \n    updateRelatedExprMap(exprMap) {\n        this.setState({\n            relatedExprMap: exprMap \n        });\n    }\n\n    render() {\n        console.log(this.props.mode);\n        return(\n            <aside>\n                <article>\n                    {this.props.messages_q.map((mess, key) => (\n                        <section  key={key} className=\"component-node-menu\">{mess}</section>\n                    ))}\n                    <section className=\"component-node-menu\" >\n                        { this.createButton(\"Poke\", this.props.onPoke, \"graph-undo\") }\n                        { this.createButton(\"Star\", this.props.onOpenStarModal, \"star\") }\n                        { this.createButton(\"SatVis\", this.props.SatVisLayout, \"node-parents\") }\n                        { this.createButton(\"PobVis\", this.props.PobVisLayout, \"node-children\") }\n                        { this.createButton(\"MultiSelect\", this.props.MultiSelectMode, \"history-forward\") }\n                        <button\n                            title = \"SMT\"\n                            onClick = { this.props.SMTLayout }\n                        >\n                            <svg viewBox=\"0 0 30 30\" className = \"icon big\" >\n                                <text x=\"50%\" alignmentBaseline=\"middle\" textAnchor=\"middle\" y=\"50%\" dominantBaseline=\"middle\" fontWeight=\"light\" stroke=\"none\" fill=\"black\" fontFamily=\"monospace\">Raw</text>\n                            </svg>\n                        </button>\n                        <button\n                            title = \"JSON\"\n                            onClick = { this.props.JSONLayout }\n                        >\n                            <svg viewBox=\"0 0 35 35\" className = \"icon big\" >\n                                <text x=\"50%\" alignmentBaseline=\"middle\" textAnchor=\"middle\" y=\"50%\" dominantBaseline=\"middle\" fontWeight=\"light\" stroke=\"none\" fill=\"black\" fontFamily=\"monospace\">Sort</text>\n                            </svg>\n                        </button>\n                    </section>\n                </article>\n                { this.getNodeDetails() }\n                <ExprMapSelector\n                    name = {this.props.name}\n                    updateRelatedExprMap = {this.updateRelatedExprMap.bind(this)}\n                />\n            </aside>\n        );\n    }\n\n}\nexport default Aside; \n","import * as React from 'react';\nimport '../styles/StarModal.css';\nconst icons = require('../resources/icons/all.svg') as string;\n\ntype Props = {\n    PobLemmasMap: {},\n    ExprMap: {},\n}\n\ntype State = {\n    input: string,\n    output: string\n}\n\n\nexport class StarModal extends React.Component<Props, State> {\n    state: State = {\n        input: \"()\",\n        output: \"\"\n    };\n\n    getFinalInvariant() {\n        let lemma_list_edited: JSX.Element[] = [];\n        let lemma_list_raw: JSX.Element[] = [];\n        let lemma_set = new Set();\n\n\n        for(const pob in this.props.PobLemmasMap){\n            /* console.log(pob); */\n            let lemmas = this.props.PobLemmasMap[pob];\n            for(const lemma of lemmas){\n                lemma_set.add(lemma);\n            }\n        }\n\n        for (const lemma of lemma_set){\n            console.log(lemma);\n            /* let colorIndex = lemmas.indexOf(lemma);\n             * let lemmaStyle = {\n             *     color: lemmaColours[colorIndex]\n             * }; */\n            if(lemma instanceof Array){\n                const lemma_id = lemma[0];\n                if(lemma[2]!==\"oo\"){continue;}\n                /* console.log(this.props.ExprMap[lemma_id]); */\n                let expr_raw = '';\n                let expr_edited = '';\n                if(this.props.ExprMap[lemma_id]){\n                    expr_edited = this.props.ExprMap[lemma_id].edited;\n                    expr_raw = this.props.ExprMap[lemma_id].raw;\n                }\n\n                lemma_list_edited.push(<h4 key={\"lemma-header-edited-\"+ lemma_id}>ExprID: {lemma[0]}, From: {lemma[1]} to {lemma[2]}</h4>);\n                lemma_list_edited.push(<pre>{expr_raw}</pre>);\n\n                lemma_list_raw.push(<h4 key={\"lemma-header-\"+ lemma_id}>ExprID: {lemma[0]}, From: {lemma[1]} to {lemma[2]}</h4>);\n                lemma_list_raw.push(<pre>{expr_edited}</pre>);\n            }\n        }\n        return {\"raw\": lemma_list_raw, \"edited\": lemma_list_edited};\n    }\n\n\n    render() {\n        const finalInv = this.getFinalInvariant();\n        console.log(this.props.PobLemmasMap);\n        return (\n            <section className=\"star-modal-content\">\n                <div className=\"raw-inv\">\n                    {finalInv[\"raw\"]}\n                </div>\n                <div className=\"edited-inv\">\n                    {finalInv[\"edited\"]}\n                </div>\n            </section>\n        );\n    }\n}\n\n","import * as React from 'react';\nimport { Component } from 'react';\n\nimport Main from './Main';\nimport Aside from './Aside';\nimport {StarModal} from './StarModal';\nimport '../styles/App.css';\nimport { assert } from '../model/util';\nimport {buildExprMap, buildPobLemmasMap} from \"../helpers/network\";\nimport {replaceVarNames, toReadable} from \"../helpers/readable\";\n\nimport Modal from 'react-modal';\ntype Props = {\n    name: string,\n    exp_path: string,\n    mode: \"proof\" | \"replay\" | \"iterative\",\n    problem: string,\n    spacerUserOptions: string,\n    hideBracketsAssoc: boolean,\n    nonStrictForNegatedStrictInequalities: boolean,\n    orientClauses: boolean,\n    varNames: string\n};\n\ntype State = {\n    exp_path: string,\n    state: \"loaded\" | \"loaded iterative\" | \"waiting\" | \"layouting\" | \"error\",\n    trees: any[],\n    runCmd: string,\n    messages_q: string[],\n    nodeSelection: number[],\n    currentTime: number,\n    layout: string,\n    expr_layout: \"SMT\" | \"JSON\",\n    PobLemmasMap: {},\n    ExprMap: {},\n    multiselect: boolean,\n    varNames: string\n    starModalIsOpen: boolean\n}\n\nclass App extends Component<Props, State> {\n\n    state: State = {\n        exp_path: this.props.exp_path,\n        state: \"waiting\",\n        trees: [],\n        runCmd: \"Run command:\",\n        messages_q: [\"\"],\n        nodeSelection: [],\n        currentTime: 0,\n        layout: \"PobVis\",\n        expr_layout: \"SMT\",\n        PobLemmasMap: {},\n        ExprMap: {},\n        multiselect: false,\n        varNames: \"\",\n        starModalIsOpen: false\n    };\n\n    async componentDidMount() {\n        if(this.props.mode === \"iterative\"){\n            // call Spacer on given input problem\n            await this.runSpacer(this.props.problem, this.props.spacerUserOptions, this.props.mode);\n        }\n        else {\n            await this.poke();\n        }\n    }\n\n    async poke() {\n        let message_q = [\"Poking Spacer...\"];\n\n        console.log(\"poking...\")\n        this.setState({\n            state: \"waiting\",\n            messages_q: message_q,\n        });\n\n        const fetchedJSON = await fetch('http://localhost:5000/spacer/poke', {\n            method: 'POST',\n            mode: 'cors',\n            headers: {\n                'Accept': 'application/json',\n                'Content-Type': 'application/json'\n            }, body : JSON.stringify({\n                exp_path: this.state.exp_path,\n            })\n        });\n\n        try {\n            const json = await fetchedJSON.json();\n            console.log(\"backend response:\", json);\n            message_q = [\"Get response from Backend.\"]\n            let tree = json.nodes_list;\n            for (let i = 0; i < Object.keys(tree).length; i++){\n                let rawWithVars = replaceVarNames(tree[i].expr, json.var_names);\n                let readable = toReadable(rawWithVars);\n                tree[i].expr = {\n                    raw: rawWithVars,\n                    readable: readable,\n                };\n            }\n            const state = \"loaded\";\n            const PobLemmasMap = buildPobLemmasMap(tree, json.var_names);\n            // NOTE: use varNames in state, not in props. The one in state is returned by the backend.\n            let ExprMap;\n            if (json.expr_map === \"\") {\n                ExprMap = buildExprMap(tree, json.var_names);\n            }\n            else {\n                ExprMap = JSON.parse(json.expr_map);\n            }\n\n            this.setState({\n                trees: [tree],\n                runCmd: json.run_cmd,\n                messages_q: [\"Spacer is \"+json.spacer_state],\n                state: state,\n                PobLemmasMap: PobLemmasMap,\n                ExprMap: ExprMap,\n                varNames: json.var_names\n            });\n            console.log(\"state is set\")\n        } catch (error) {\n            if (error.name === \"SatVisAssertionError\") {\n                throw error;\n            }\n            this.setState({\n                state: \"error\",\n                messages_q: [`Error: ${error[\"message\"]}`],\n            });\n        }\n    }\n\n    async saveExprMap() {\n        await fetch('http://localhost:5000/spacer/save_exprs', {\n            method: 'POST',\n            mode: 'cors',\n            headers: {\n                'Accept': 'application/json',\n                'Content-Type': 'application/json'\n            }, body : JSON.stringify({\n                exp_path: this.state.exp_path,\n                expr_map: JSON.stringify(this.state.ExprMap)\n            })\n        });\n    }\n\n    async runSpacer(problem: string, spacerUserOptions: string, mode: \"proof\" | \"replay\" | \"iterative\") {\n        this.setState({\n            state: \"waiting\",\n            messages_q: [\"Waiting for Spacer...\"],\n        });\n\n        const fetchedJSON = await fetch('http://localhost:5000/spacer/start_iterative', {\n            method: 'POST',\n            mode: 'cors',\n            headers: {\n                'Accept': 'application/json',\n                'Content-Type': 'application/json'\n            },\n            body: JSON.stringify({\n                name: this.props.name,\n                file: problem,\n                spacerUserOptions: spacerUserOptions,\n                varNames: this.props.varNames\n            })\n        });\n\n        try {\n            const json = await fetchedJSON.json();\n            console.log(\"backend response:\", json);\n            if (json.status === \"success\") {\n                const state = (mode === \"iterative\" && json.spacer_state === \"running\") ? \"loaded iterative\" : \"loaded\";\n                const messages_q = [\"Hit Poke to update graph\"];\n                this.setState({\n                    exp_path: json.exp_name,\n                    messages_q: messages_q,\n                    state: state,\n                });\n            } else {\n                assert(json.status === \"error\");\n                const errorMess = json.message;\n                assert(errorMess !== undefined && errorMess !== null);\n                this.setState({\n                    state: \"error\",\n                    messages_q: [errorMess],\n                });\n            }\n        } catch (error) {\n            if (error.name === \"SatVisAssertionError\") {\n                throw error;\n            }\n            this.setState({\n                state: \"error\",\n                messages_q: [`Error: ${error[\"message\"]}`],\n            });\n        }\n    }\n\n    updateNodeSelection(nodeSelection: number[]) {\n        if (this.state.multiselect) {\n            let tempNodeSelection = this.state.nodeSelection.slice(this.state.nodeSelection.length-1).concat(nodeSelection);\n            this.setState({nodeSelection: tempNodeSelection});\n        } else {\n            this.setState({nodeSelection: nodeSelection});\n        }\n    }\n    \n    updateCurrentTime(currentTime: number) {\n        const trees = this.state.trees;\n        assert(trees.length > 0);\n        this.setState({\n            currentTime: currentTime\n        });\n    }\n\n    setPobVisLayout(){\n        this.setState({ layout: \"PobVis\" })\n    }\n    setSatVisLayout(){\n        this.setState({ layout: \"SatVis\" })\n    }\n    setMultiSelect() {\n        if (this.state.multiselect) {\n            if (this.state.nodeSelection.length > 0) {\n                this.setState({\n                    nodeSelection: [this.state.nodeSelection[this.state.nodeSelection.length - 1]]\n                });\n            }\n            else {\n                this.setState({\n                    messages_q: [\"Hit Poke to update graph\"]\n                })\n            }\n        } else {\n            this.setState({\n                messages_q: [\"Select Up to 2 nodes\"]\n            });\n        }\n        this.setState({\n            multiselect: !this.state.multiselect\n        });\n    }\n    setSMTLayout(){\n        this.setState({ expr_layout: \"SMT\" })\n    }\n    setJSONLayout(){\n        this.setState({ expr_layout: \"JSON\" })\n    }\n\n    openStarModal(){\n        this.setState({starModalIsOpen: true});\n    }\n\n    closeStarModal(){\n        this.setState({starModalIsOpen: false});\n    }\n\n    render() {\n        const {\n            state,\n            trees,\n            runCmd,\n            messages_q,\n            nodeSelection,\n            currentTime,\n            layout,\n            expr_layout,\n            PobLemmasMap,\n            ExprMap\n        } = this.state;\n        let tree;\n        let main;\n        if (state === \"loaded\") {\n            assert(trees.length > 0);\n            tree = trees[trees.length - 1];\n            const hL = Object.keys(tree).length;\n            main = (\n                <Main\n                    mode = { this.props.mode }\n                    runCmd = {runCmd}\n                    tree = { tree }\n                    onNodeSelectionChange = { this.updateNodeSelection.bind(this) }\n                    nodeSelection = { nodeSelection }\n                    historyLength = { hL }\n                    currentTime = { currentTime }\n                    onCurrentTimeChange = { this.updateCurrentTime.bind(this) }\n                    layout = { layout }\n                    PobLemmasMap = { PobLemmasMap }\n                />\n            );\n        } else {\n            main = (\n                <main>\n                    <section className= \"slider-placeholder\" />\n                </main>\n            );\n        }\n        return (\n            <div className= \"app\" >\n                <Modal\n                    isOpen={this.state.starModalIsOpen}\n                    onRequestClose={this.closeStarModal.bind(this)}\n                    overlayClassName=\"editor-modal\"\n                    contentLabel=\"Example Modal\"\n                >\n                    <h2>Final invariant</h2>\n                    <button onClick={this.closeStarModal.bind(this)}>Close</button>\n                    <StarModal\n                        PobLemmasMap = {this.state.PobLemmasMap}\n                        ExprMap = {this.state.ExprMap}\n                    />\n                </Modal>\n                { main }\n                <Aside\n                    messages_q = {messages_q}\n                    mode = { this.props.mode }\n                    tree = { tree }\n                    nodeSelection = { nodeSelection }\n                    onUpdateNodeSelection = { this.updateNodeSelection.bind(this) }\n                    onPoke = {this.poke.bind(this)}\n                    onOpenStarModal = {this.openStarModal.bind(this)}\n                    SatVisLayout = { this.setSatVisLayout.bind(this) }\n                    PobVisLayout = { this.setPobVisLayout.bind(this) }\n                    MultiSelectMode= { this.setMultiSelect.bind(this) }\n                    SMTLayout = { this.setSMTLayout.bind(this) }\n                    JSONLayout = { this.setJSONLayout.bind(this) }\n                    PobLemmasMap = { PobLemmasMap }\n                    ExprMap = { ExprMap }\n                    layout = { layout }\n                    expr_layout ={expr_layout}\n                    saveExprs = {this.saveExprMap.bind(this)}\n                    name = {this.state.exp_path}\n                />\n                </div>\n        );\n\n    }\n\n}\n\nexport default App;\n","import * as React from 'react';\nimport App from \"./App\";\nimport '../styles/AppWrapper.css';\n\ntype Props = {\n    name: string,\n    problem: string,\n    exp_path: string,\n    spacerUserOptions: string,\n    mode: \"proof\" | \"replay\" | \"iterative\"\n    hideBracketsAssoc: boolean,\n    nonStrictForNegatedStrictInequalities: boolean, \n    orientClauses: boolean,\n    varNames: string\n};\n\nexport class AppWrapper extends React.Component<Props, {}> {\n    render() {\n        return (\n            <div id=\"appWrapper\">\n                <App \n                    name = {this.props.name}\n                    problem={this.props.problem}\n                    exp_path = {this.props.exp_path}\n                    spacerUserOptions={this.props.spacerUserOptions}\n                    mode={this.props.mode}\n                    hideBracketsAssoc={this.props.hideBracketsAssoc}\n                    nonStrictForNegatedStrictInequalities={this.props.nonStrictForNegatedStrictInequalities}\n                    orientClauses={this.props.orientClauses}\n                    varNames={this.props.varNames}\n                />\n            </div>\n        )\n    }\n}\n\n","import * as React from 'react';\nimport '../styles/NodeMenu.css';\nimport {Link} from 'react-router-dom';\n\ntype Props = {\n};\ntype State = {\n    isFetching: boolean,\n    exps: any[],\n}\n\nexport default class ExpTable extends React.Component<Props, State> {\n    constructor(props) {\n        super(props);\n        this.state = {\n            isFetching: false,\n            exps: []\n        };\n    }\n\n    async componentDidMount() {\n        await this.fetchExps();\n        // this.timer = setInterval(() => this.fetchUsers(), 5000);\n    }\n\n    render() {\n        return (\n                <div>\n                {this.state.exps.map((item, index) => (\n                        <h5 key = {item.name}><Link to={{pathname: `/replay/${item.name}`}} >{item.name}</Link> ${item.done}</h5>\n                ))}\n                <p>{this.state.isFetching ? 'Fetching experiments...' : ''}</p>\n                </div>\n        )\n    }\n    async fetchExps() {\n        this.setState({\n            isFetching: true,\n        });\n\n        const fetchedJSON = await fetch('http://localhost:5000/spacer/fetch_exps', {\n            method: 'POST',\n            mode: 'cors',\n            headers: {\n                'Accept': 'application/json',\n                'Content-Type': 'application/json'\n            }, body : \"\"\n        });\n\n        try {\n            const json = await fetchedJSON.json();\n            console.log(json)\n            this.setState({isFetching: false, exps: json.exps_list})\n        } catch (error) {\n            if (error.name === \"SatVisAssertionError\") {\n                throw error;\n            }\n            this.setState({\n                exps: []\n            });\n        }\n    }\n\n\n}\n","export const options = [\n    {name: \"fp.spacer.arith.solver\", type:\"unsigned int\"},\n    {name: \"fp.spacer.blast_term_ite_inflation\", type:\"unsigned int\"},\n    {name: \"fp.spacer.ctp\", type:\"bool\"},\n    {name: \"fp.spacer.dump_benchmarks\", type:\"bool\"},\n    {name: \"fp.spacer.dump_threshold\", type:\"double\"},\n    {name: \"fp.spacer.elim_aux\", type:\"bool\"},\n    {name: \"fp.spacer.eq_prop\", type:\"bool\"},\n    {name: \"fp.spacer.gpdr\", type:\"bool\"},\n    {name: \"fp.spacer.gpdr.bfs\", type:\"bool\"},\n    {name: \"fp.spacer.ground_pobs\", type:\"bool\"},\n    {name: \"fp.spacer.iuc\", type:\"unsigned int\"},\n    {name: \"fp.spacer.iuc.arith\", type:\"unsigned int\"},\n    {name: \"fp.spacer.iuc.debug_proof\", type:\"bool\"},\n    {name: \"fp.spacer.iuc.old_hyp_reducer\", type:\"bool\"},\n    {name: \"fp.spacer.iuc.print_farkas_stats\", type:\"bool\"},\n    {name: \"fp.spacer.iuc.split_farkas_literals\", type:\"bool\"},\n    {name: \"fp.spacer.keep_proxy\", type:\"bool\"},\n    {name: \"fp.spacer.logic\", type:\"symbol\"},\n    {name: \"fp.spacer.max_level\", type:\"unsigned int\"},\n    {name: \"fp.spacer.max_num_contexts\", type:\"unsigned int\"},\n    {name: \"fp.spacer.mbqi\", type:\"bool\"},\n    {name: \"fp.spacer.min_level\", type:\"unsigned int\"},\n    {name: \"fp.spacer.native_mbp\", type:\"bool\"},\n    {name: \"fp.spacer.order_children\", type:\"unsigned int\"},\n    {name: \"fp.spacer.p3.share_invariants\", type:\"bool\"},\n    {name: \"fp.spacer.p3.share_lemmas\", type:\"bool\"},\n    {name: \"fp.spacer.print_json\", type:\"symbol\"},\n    {name: \"fp.spacer.propagate\", type:\"bool\"},\n    {name: \"fp.spacer.push_pob\", type:\"bool\"},\n    {name: \"fp.spacer.push_pob_max_depth\", type:\"unsigned int\"},\n    {name: \"fp.spacer.q3\", type:\"bool\"},\n    {name: \"fp.spacer.q3.instantiate\", type:\"bool\"},\n    {name: \"fp.spacer.q3.qgen.normalize\", type:\"bool\"},\n    {name: \"fp.spacer.q3.use_qgen\", type:\"bool\"},\n    {name: \"fp.spacer.random_seed\", type:\"unsigned int\"},\n    {name: \"fp.spacer.reach_dnf\", type:\"bool\"},\n    {name: \"fp.spacer.reset_pob_queue\", type:\"bool\"},\n    {name: \"fp.spacer.restart_initial_threshold\", type:\"unsigned int\"},\n    {name: \"fp.spacer.restarts\", type:\"bool\"},\n    {name: \"fp.spacer.simplify_lemmas_post\", type:\"bool\"},\n    {name: \"fp.spacer.simplify_lemmas_pre\", type:\"bool\"},\n    {name: \"fp.spacer.simplify_pob\", type:\"bool\"},\n    {name: \"fp.spacer.trace_file\", type:\"symbol\"},\n    {name: \"fp.spacer.use_array_eq_generalizer\", type:\"bool\"},\n    {name: \"fp.spacer.use_bg_invs\", type:\"bool\"},\n    {name: \"fp.spacer.use_derivations\", type:\"bool\"},\n    {name: \"fp.spacer.use_euf_gen\", type:\"bool\"},\n    {name: \"fp.spacer.use_inc_clause\", type:\"bool\"},\n    {name: \"fp.spacer.use_inductive_generalizer\", type:\"bool\"},\n    {name: \"fp.spacer.use_lemma_as_cti\", type:\"bool\"},\n    {name: \"fp.spacer.use_lim_num_gen\", type:\"bool\"},\n    {name: \"fp.spacer.validate_lemmas\", type:\"bool\"},\n    {name: \"tr\", type: \"bool\"},\n    {name: \"fp.spacer.weak_abs\", type:\"bool\"}\n];\n\n","import * as React from 'react';\nimport {options} from \"../helpers/spacerOptions\";\nimport eye from \"./../resources/icons/singles/eye.svg\"\n\ntype Props = {\n    spacerUserOptions: string,\n    onChangeVariables: (e: React.ChangeEvent<HTMLInputElement>) => void,\n    changeSpacerUserOptions: (spacerUserOptions: string) => void,\n}\n\ntype State = {\n    optionTypeHTML: JSX.Element,\n    optionValue: string,\n    optionName: string,\n    optionType: string,\n    allOptions: {type:string, name: string, value:string}[],\n    showOptions: boolean\n}\n\nclass MenuOptions extends React.Component<Props, State> {\n    state = {\n        optionTypeHTML: <div />,\n        optionType: \"\",\n        optionValue: \"\",\n        optionName: \"\",\n        allOptions: [],\n        showOptions: true\n    };\n\n    updateSpacerOptions() {\n        let allOptions: {type:string, name: string, value:string}[] = this.state.allOptions;\n        let fullOptionString = \"\";\n        for (let option of allOptions) {\n            if (option.type === \"flag\") {\n                fullOptionString += \"-\" + option.name + \" \";\n            }\n            else {\n                fullOptionString += option.name + \"=\" + option.value + \" \";\n            }\n        }\n        this.props.changeSpacerUserOptions(fullOptionString);\n    }\n\n    storeSpacerOptions(e) {\n        e.preventDefault();\n        e.target.reset();\n        if (this.state.optionName === \"\" || (this.state.optionType !== \"custom\" && this.state.optionValue === \"\")) return;\n        let allOptions: {type:string, name: string, value:string}[] = this.state.allOptions;\n        allOptions.push({\n            name: this.state.optionName,\n            value: this.state.optionValue,\n            type: this.state.optionValue === \"\" ? \"flag\" : this.state.optionType\n        });\n        this.setState({\n            allOptions: allOptions\n        });\n        this.setState({\n            optionName: \"\",\n            optionValue: \"\",\n            optionType: \"\"\n        });\n        this.updateSpacerOptions();\n    }\n\n    displaySpacerOptions() {\n        if (this.props.spacerUserOptions !== \"\") {\n            return this.props.spacerUserOptions.trim().split(\" \");\n        }\n        return []\n    }\n\n    updateOptionValue(e){\n        this.setState({\n            optionValue: e.target.value\n        });\n    }\n\n    getOptions(name:string, type:string) {\n        if (type === \"bool\") {\n            this.setState({\n                optionTypeHTML:\n                    <React.Fragment>\n                        <input type=\"radio\" name={name} value=\"true\" onClick={this.updateOptionValue.bind(this)}/>True\n                        <input type=\"radio\" name={name} value=\"false\" onClick={this.updateOptionValue.bind(this)}/>False\n                        <button className=\"fake-button\" type=\"submit\" value=\"Submit\">+</button>\n                    </React.Fragment>\n            });\n        } else {\n            this.setState({\n                optionTypeHTML:\n                    <React.Fragment>\n                        <input type=\"text\" name={name} placeholder={type} defaultValue={this.state.optionValue} onChange={this.updateOptionValue.bind(this)}/>\n                        <button className=\"fake-button\" type=\"submit\" value=\"Submit\">+</button>\n                    </React.Fragment>\n            });\n        }\n    }\n\n    changeOptionType(e: React.ChangeEvent<HTMLInputElement>){\n        let tempList = options.filter(option => option.name === e.target.value);\n        let type = \"custom\";\n        if (tempList.length > 0) {\n            type = tempList[0].type;\n        }\n        this.setState({\n            optionName: e.target.value,\n            optionType: type\n        });\n        this.getOptions(e.target.value, type);\n    }\n\n    removeOption(name:string, value:string){\n        let allOptions: {type:string, name: string, value:string}[] = this.state.allOptions;\n        let rIndex = -1;\n        if (value === undefined){\n            name = name.replace(\"-\", \"\");\n            value = \"\";\n        }\n        for (let i = 0; i < allOptions.length; i++){\n            if (allOptions[i].name === name && allOptions[i].value === value){\n                rIndex = i;\n                break;\n            }\n        }\n        if (rIndex === -1) return;\n        allOptions.splice(rIndex, 1);\n        this.updateSpacerOptions();\n    }\n    changeSpacerManualUserOptions(event: React.ChangeEvent<HTMLInputElement>) {\n        const newValue = event.target.value;\n        this.props.changeSpacerUserOptions(newValue);\n    }\n\n    showHideOptions() {\n        this.setState({\n            showOptions: !this.state.showOptions\n        });\n    }\n    render() {\n        let selectedOptions = this.displaySpacerOptions();\n        return (\n            <aside>\n                <fieldset className=\"options-card\">\n                    <h3>Z3 Options</h3>\n                    <ul>\n                        <li>\n                            <label htmlFor=\"userOptions\" className=\"form-label\">Additional Spacer options</label>\n                            <button onClick={this.showHideOptions.bind(this)} className=\"showHideButton\" title={\"showHide\"}><img className=\"eyeImage\" src={eye} alt=\"eye\"/></button>\n                            {selectedOptions.length !== 0 && this.state.showOptions && selectedOptions.map((option, key) => {\n                                if (option !== \"\") {\n                                    let kvp = option.split(\"=\");\n                                    let name = kvp[0];\n                                    let value = kvp[1];\n                                    let displayValue = value ? name + \": \" + value : name;\n                                    return (\n                                        <div className=\"displaySpacerOption\" key={key}>\n                                            <span>{displayValue}</span>\n                                            <button className=\"fake-button\" type=\"button\" onClick={this.removeOption.bind(this, name, value)}>x</button>\n                                        </div>\n                                    );\n                                }\n                                return \"\";\n                            })}\n                            <form className=\"tfradio\" name=\"tfradio\" onSubmit={this.storeSpacerOptions.bind(this)}>\n                                <input type=\"text\" className=\"optionsList\" list=\"spacerOptions\" name=\"spacerOptions\" onChange={this.changeOptionType.bind(this)}/>\n                                <datalist id=\"spacerOptions\">\n                                    {options.map((part, key) => (\n                                        <option value={part.name} key={key}/>\n                                    ))}\n                                </datalist>\n                                {this.state.optionTypeHTML}\n                            </form>\n                        </li>\n                        <label>Or using manual run parameters</label>\n                        <input type=\"text\" name=\"manualRun\" onChange={this.changeSpacerManualUserOptions.bind(this)}/>\n                        <li>\n                            <label htmlFor=\"varOptions\" className=\"form-label\">Variable Designation</label>\n                            <p>Enter a single space separated list of your chosen variables in the order they appear (var1 var2 var3 ..)</p>\n                            <input type=\"text\" name=\"variables\" onChange={this.props.onChangeVariables}/>\n                        </li>\n                    </ul>\n                </fieldset>\n            </aside>\n        );\n    }\n}\n\nexport default MenuOptions;","import * as React from 'react';\nimport {Link} from 'react-router-dom';\nimport '../styles/Menu.css';\nimport * as Monaco from 'monaco-editor'\nimport ExpTable from './ExpTable';\nimport { assert } from '../model/util';\nimport MenuOptions from \"./MenuOptions\";\n\nconst icons = require('../resources/icons/all.svg') as string;\n\ntype Props = {\n    problem: string,\n    problemName: string,\n    spacerUserOptions: string,\n    hideBracketsAssoc: boolean,\n    nonStrictForNegatedStrictInequalities: boolean\n    orientClauses: boolean,\n    onChangeProblem: (problem: string) => void,\n    onChangeProblemName: (problemName: string) => void,\n    onChangeSpacerUserOptions: (spacerUserOptions: string) => void,\n    onChangeHideBracketsAssoc: (newValue: boolean) => void,\n    onChangeNonStrictForNegatedStrictInequalities: (newValue: boolean) => void,\n    onChangeOrientClauses: (newValue: boolean) => void\n    onChangeVariables: (newValue: string) => void\n}\n\nexport class Menu extends React.Component<Props, {}> {\n    // private isChromeOrFirefox = navigator.userAgent.indexOf('Chrome') > -1 || navigator.userAgent.indexOf('Firefox') > -1;\n    private isChromeOrFirefox = true;\n    private fileUpload = React.createRef<HTMLInputElement>();\n    monacoDiv = React.createRef<HTMLDivElement>();\n    monaco: Monaco.editor.IStandaloneCodeEditor | null = null\n\n    componentDidMount() {\n        if (!this.isChromeOrFirefox) {\n            return;\n        }\n        // generate instance of Monaco Editor\n        this.monaco = Monaco.editor.create(this.monacoDiv.current!, {\n            lineNumbers: 'off',\n            roundedSelection: false,\n            scrollBeyondLastLine: false,\n            scrollBeyondLastColumn: 0,\n            minimap: {\n                enabled: false\n            },\n            renderLineHighlight: 'none',\n            hideCursorInOverviewRuler: true,\n            links: false,\n            overviewRulerBorder: false,\n            automaticLayout: true,\n            lineDecorationsWidth: 0,\n            lineNumbersMinChars: 0,\n            wordWrap: 'wordWrapColumn'\n            // fontFamily: \"Monaco\" TODO: decide which font to use. By default, multiple fonts are loaded, which is quite slow\n        });\n        this.monaco.setValue(this.props.problem);\n        this.monaco.getModel()!.onDidChangeContent(() => {\n            this.props.onChangeProblem(this.monaco!.getModel()!.getValue());\n        });\n    }\n\n    componentDidUpdate(prevProps: Props) {\n        assert(this.isChromeOrFirefox);\n        if (this.props.problem !== prevProps.problem) {\n            this.monaco!.setValue(this.props.problem);\n        }\n    }\n\n    render() {\n        if (!this.isChromeOrFirefox) {\n            return (\n                <section className=\"unsupported-message\">\n                    <svg viewBox=\"0 0 24 24\" className=\"icon\">\n                        <use xlinkHref={`${icons}#alert-triangle`}/>\n                    </svg>\n                    <span>Your current browser is not supported. Please use Chrome or Firefox!</span>\n                </section>\n            );\n        }\n\n        return (\n            <section className=\"component-menu\">\n                <h1>Spacer Visualization</h1>\n\n                <section className=\"editor\">\n                    <div className=\"editor-spacer\">\n                        <main>\n                            <div className=\"headline-wrapper\">\n                                <h2>Input</h2>\n                                <small className=\"file-name\">{this.props.problemName}</small>\n                                <button title=\"Pick a new file\" onClick={this.chooseFile.bind(this)}>\n                                    <svg viewBox=\"0 0 24 24\" className=\"icon big\">\n                                        <use xlinkHref={`${icons}#graph-upload`}/>\n                                    </svg>\n                                </button>\n                            </div>\n\n                            <input\n                                ref={this.fileUpload}\n                                type=\"file\"\n                                onChange={this.uploadEncoding.bind(this)}\n                            />\n                            <div ref={this.monacoDiv} className=\"monaco\"></div>\n                        </main>\n\n                        <aside>\n                            <MenuOptions \n                                spacerUserOptions = {this.props.spacerUserOptions}\n                                onChangeVariables = {this.onChangeVariables.bind(this)}\n                                changeSpacerUserOptions={this.props.onChangeSpacerUserOptions.bind(this)}\n                            />\n                            <ExpTable/>\n                        </aside>\n                    </div>\n                </section>\n\n                <section className=\"run-menu\">\n                    <Link to=\"/iterative/\" className=\"fake-button\">Hit and Run</Link>\n                </section>\n            </section>\n        );\n    }\n\n    chooseFile() {\n        if (this.fileUpload.current) {\n            this.fileUpload.current.click();\n        }\n    }\n\n    onChangeVariables(e) {\n        this.props.onChangeVariables(e.target.value);\n    }\n\n    uploadEncoding(event: React.ChangeEvent<HTMLInputElement>) {\n        if (event.target.files !== null && event.target.files.length > 0) {\n            const file = event.target.files[0];\n\n            const reader = new FileReader();\n            // callback which will be executed when readAsText is called\n            reader.onloadend = () => {\n                const text = (reader.result ? reader.result : '') as string;\n                this.props.onChangeProblem(text);\n                this.props.onChangeProblemName(file.name);\n\n            };\n            reader.readAsText(file);\n        }\n    }\n}\n","import * as React from 'react';\nimport * as d3 from 'd3';\nimport SunburstChart, {Node} from \"sunburst-chart\";\nimport {timeDetailedItem} from \"../dashboardTypes\";\n\ntype Props = {\n    data: timeDetailedItem | {},\n    height: number,\n    width: number,\n    className: string,\n    type: string,\n    index: string\n}\n\ntype State = {}\n\nclass TimeChart extends React.Component<Props, State> {\n    private totalTime: number;\n    private readonly palette: string[];\n    constructor(props) {\n        super(props);\n        this.totalTime = -1;\n        this.palette = [\"#023FA5\", \"#7D87B9\", \"#BEC1D4\", \"#D6BCC0\", \"#BB7784\", \"#8E063B\", \"#4A6FE3\", \"#8595E1\", \"#B5BBE3\",\n                \"#E6AFB9\", \"#E07B91\", \"#D33F6A\", \"#11C638\", \"#8DD593\", \"#C6DEC7\", \"#EAD3C6\", \"#F0B98D\", \"#EF9708\",\n                \"#0FCFC0\", \"#9CDED6\", \"#D5EAE7\", \"#F3E1EB\", \"#F6C4E1\", \"#F79CD4\"]\n    }\n    componentDidMount() {\n        this.createSunburst();\n    }\n    componentDidUpdate(prevProps: Readonly<any>, prevState: Readonly<any>, snapshot?: any): void {\n        this.createSunburst();\n    }\n\n    prepareData() {\n        let tmp:Object[] = [];\n        let keys = Object.keys(this.props.data);\n        \n        for (let i = 0; i < keys.length; i++){\n            tmp.push({\n                name: keys[i], \n                size: this.props.data[keys[i]],\n                children: []\n            });\n        }\n        \n        return tmp;\n    }\n    \n    getData(input): Node[] {        \n        let result = {};\n        let last = \"zzzzzzz\";\n        \n        for (let i = 0; i < input.length; i++){\n            let key = input[i].name;\n            let value = input[i].size;\n            \n            if (key.includes(last)){\n                result[last].children.push({\n                    name: key,\n                    size: value,\n                    children: []\n                });\n            }\n            else {\n                result[key] = {\n                    name: key,\n                    size: value,\n                    children: []\n                };\n                last = key\n            }\n        }\n        \n        let resultKeys = Object.keys(result);\n        for (let i = 0; i < resultKeys.length; i++){\n            if (result[resultKeys[i]].children){\n                result[resultKeys[i]].children = this.getData(result[resultKeys[i]].children);\n            }\n        }\n        \n        return Object.values(result);\n    }\n    \n    createSunburst() {\n        if (this.props.type === \"\") d3.select(\".sunburst-viz\").remove();\n        if (this.props.type !== \"\") d3.select(\".\" + this.props.className + \" .sunburst-viz\").remove();\n        let colour = d3.scaleOrdinal()\n            .domain(Object.keys(this.props.data))\n            .range(this.palette);\n        let data: Node[] = this.getData(this.prepareData());\n        const myChart = SunburstChart();\n        myChart.data(data[0])(document.getElementById(this.props.className)!)\n               .width(this.props.width)\n               .height(this.props.height)\n               .color(x => colour(x.name))\n               .label(x => x.name!)\n               .size('size')\n               .tooltipTitle(x => x.name!);\n        \n        if (this.props.type !== \"\"){\n            myChart.showLabels(false);\n        }\n    }\n\n\n    render() {\n        this.totalTime = this.props.data[\"time\"];\n        return (\n          <div className={this.props.className} id={this.props.className}>\n              {this.props.type === \"\" && <h2>Total Time: {this.totalTime}</h2>}\n              {this.props.type !== \"\" && <p>{this.props.index}</p>}\n              \n          </div>  \n        );\n    }\n}\n\nexport default TimeChart;\n","export function potholeToNormal(input) {\n    let words = input.split(\"_\");\n    for (let i = 0; i < words.length; i++){\n        words[i] = words[i][0].toUpperCase() + words[i].substring(1);\n    }\n    \n    return words.join(\" \");\n    \n}","import * as React from 'react';\nimport TimeChart from \"./TimeChart\";\nimport {potholeToNormal} from \"../../helpers/naming\";\nimport {dataItem} from \"../dashboardTypes\";\n\ntype Props = {\n    data: dataItem\n}\n\ntype State = {}\n\nclass IndividualBenchmark extends React.Component<Props, State> {\n    componentDidMount() {\n        console.log(this.props.data);\n    }\n    componentDidUpdate(prevProps: Readonly<any>, prevState: Readonly<any>, snapshot?: any): void {\n        console.log(this.props.data);\n    }\n\n    filterTimeData() {\n        return Object.keys(this.props.data)\n            .filter(function(d) {return d.includes(\"time\")})\n            .reduce((obj, key) => {\n                obj[key] = this.props.data[key];\n                return obj;\n            }, {});\n    }\n    render() {\n        let dataDisplay = [\"result\",\"depth\", \"memory\", \"max_memory\", \"SPACER_num_invariants\", \"SPACER_num_lemmas\",\n            \"SPACER_num_propagations\", \"SPACER_num_active_lemmas\"];\n        let timeData = this.filterTimeData();\n        return (\n          <div className=\"overview\">\n              <div className=\"details\">\n                  <h1>{this.props.data.index}</h1>\n                  {dataDisplay.map((dataKey, key) => (\n                      <p className=\"data-details\" key={key}>{potholeToNormal(dataKey)}: {this.props.data[dataKey]}</p>\n                  ))}\n              </div>\n              <TimeChart \n                  data={timeData}\n                  height={600}\n                  width={600}\n                  className={\"time\"}\n                  type={\"\"}\n                  index={\"\"}\n              />\n          </div>  \n        );\n    }\n}\n\nexport default IndividualBenchmark;","import * as React from 'react';\nimport * as d3 from 'd3';\nimport {dashboardConfig, resultItem} from \"../dashboardTypes\";\n\ntype Props = {\n    key: number,\n    data: resultItem [],\n    config: dashboardConfig,\n    selectBenchmark: (e: resultItem) => void\n}\n\ntype State = {}\n\nclass ResultsOverview extends React.Component<Props, State> {\n    componentDidMount() {\n        this.createResultsOverview();\n    }\n    componentDidUpdate(prevProps: Readonly<any>, prevState: Readonly<any>, snapshot?: any): void {\n        this.createResultsOverview();\n    }\n\n    createResultsOverview() {\n        d3.select(\".results-overview svg\").remove();\n        let data = this.props.data;\n        \n        let results = d3.map(data, function(d) {return d.result;}).keys();\n        \n        let colour = d3.scaleOrdinal()\n            .domain(results)\n            .range(d3.schemeCategory10);\n        \n        let xValue = function(d) {\n            return d.index;\n        };\n        let index = d3.map(data,function(d) {return d.index;}).keys();\n        let xScale = d3.scaleBand()\n            .domain(index)\n            .range([this.props.config.margin.left, this.props.config.width - this.props.config.margin.right]);\n\n        let xMap = function(d) {\n            return xScale(xValue(d))\n        };\n\n        let xAxis = d3.axisBottom(xScale).tickValues([]);\n\n        let yValue = function(d) {\n            return d.SPACER_num_invariants;\n        };\n        let yScale = d3.scaleLinear()\n            .domain([d3.min(data, yValue), d3.max(data, yValue)])\n            .range([this.props.config.graphHeight - this.props.config.margin.top, this.props.config.margin.bottom]);\n\n        let yMap = function(d) {\n            return yScale(yValue(d))\n        };\n\n        let yAxis = d3.axisLeft(yScale);\n\n        let svg = d3.select(\".results-overview\")\n            .append(\"svg\")\n            .attr(\"width\", this.props.config.width)\n            .attr(\"height\", this.props.config.height);\n        svg.append(\"text\")\n            .attr(\"x\", this.props.config.width / 2)\n            .attr(\"y\", this.props.config.margin.top)\n            .attr(\"text-anchor\", \"middle\")\n            .style(\"font-size\", this.props.config.font.title)\n            .style(\"text-decoration\", \"underline\")\n            .text(\"Index x Result x Num of Invariants\");\n        svg.append(\"g\")\n            .attr(\"class\", \"x-axis\")\n            .attr(\"transform\", \"translate(0,\" + (this.props.config.graphHeight - this.props.config.margin.top) + \")\")\n            .call(xAxis);\n        svg.append(\"g\")\n            .attr(\"class\", \"y-axis\")\n            .attr(\"transform\", \"translate(\" + this.props.config.margin.left + \",0)\")\n            .style(\"font-size\", this.props.config.font.axis)\n            .call(yAxis);\n        let g = svg.append(\"g\");\n        g.selectAll(\".dot\")\n            .data(data)\n            .enter()\n            .append('circle')\n            .attr('r', 10)\n            .attr('cx', function(d) {return xMap(d) + xScale.bandwidth() /2})\n            .attr('cy', yMap)\n            .on(\"mouseenter\", function(d) {\n                d3.select(\".overview-tooltip\")\n                    .append(\"text\")\n                    .text(d.index);\n            })\n            .on(\"mouseout\", function(d) {\n                d3.select(\".overview-tooltip\")\n                    .select(\"text\")\n                    .remove();\n            })\n            .on(\"click\", this.props.selectBenchmark)\n            .style(\"fill\", function(d) {return colour(d.result)});\n        g.selectAll(\".result-text\")\n            .data(data)\n            .enter()\n            .append(\"text\")\n            .attr(\"class\", \"label\")\n            .style(\"font-size\", this.props.config.font.label)\n            .attr(\"x\", function(d) {return xMap(d) + (xScale.bandwidth() / 4)})\n            .attr(\"y\", function(d) {return yMap(d) - 25})\n            .attr(\"dy\", \".75em\")\n            .text(function(d) {return d.SPACER_num_invariants});\n        g.selectAll(\"legendDots\")\n            .data(results)\n            .enter()\n            .append(\"circle\")\n            .attr(\"cx\", function(this,d,i) {return this.props.config.margin.left + i*100}.bind(this))\n            .attr(\"cy\", this.props.config.graphHeight + 15)\n            .attr(\"r\", 5)\n            .style(\"fill\", function(d){return colour(d)});\n        g.selectAll(\"legendText\")\n            .data(results)\n            .enter()\n            .append(\"text\")\n            .attr(\"x\", function(this,d,i){return this.props.config.margin.left + 10 + i*100}.bind(this))\n            .attr(\"y\", this.props.config.graphHeight + 20)\n            .text(function(d){return d})\n\n\n\n    }\n\n    render() {\n        return (\n            <div className=\"results-overview\">\n            </div>\n        );\n    }\n}\n\nexport default ResultsOverview\n","import * as React from 'react';\nimport TimeChart from \"./TimeChart\";\nimport {timeDetailedItem} from \"../dashboardTypes\";\n\ntype State = {}\n\ntype Props = {\n    data: timeDetailedItem[]\n}\n\nclass TimeZoom extends React.Component<Props, State> {\n    render() {\n        return (\n            <div>\n                {this.props.data.map((instance, key) => {\n                    return (\n                        <TimeChart\n                            key={key}\n                            data={instance}\n                            height={200}\n                            width={200}\n                            className={\"timezoom\" + key}\n                            type={\"timezoom\"}\n                            index={instance[\"index\"]!}\n                        />\n                    );\n                })}\n                \n            </div>\n        );\n    }\n}\n\nexport default TimeZoom;\n","import * as React from 'react';\nimport * as d3 from 'd3';\nimport {potholeToNormal} from \"../../helpers/naming\";\nimport {dashboardConfig, depthItem, memoryItem, timeItem} from \"../dashboardTypes\";\n\ntype Props = {\n    key: number,\n    data: (depthItem | memoryItem | timeItem) [],\n    config: dashboardConfig,\n    className: string,\n    classText: string,\n    yValue: string,\n    updateZoomView: (type:string) => void\n}\n\ntype State = {}\n\nclass GeneralGraphOverview extends React.Component<Props, State> {\n    componentDidMount() {\n        this.createGraph();\n    }\n    componentDidUpdate(prevProps: Readonly<any>, prevState: Readonly<any>, snapshot?: any): void {\n        this.createGraph();\n    }\n    \n    createGraph() {\n        d3.select(\".\" + this.props.className + \" svg\").remove();\n        \n        if (this.props.data.length === 0) return;\n        let data = this.props.data;\n        let xValue = function(d) {\n            return d.index;\n        };\n        let index = d3.map(data,function(d) {return d.index;}).keys();\n        let xScale = d3.scaleBand()\n            .domain(index)\n            .range([this.props.config.margin.left, this.props.config.width - this.props.config.margin.right]);\n        let xMap = function(d) {\n            return xScale(xValue(d))\n        };\n        let xAxis = d3.axisBottom(xScale).tickValues([]);\n\n        let yValue = function(this,d) {\n            return d[this.props.yValue];\n        }.bind(this);\n        let yScale = d3.scaleLinear()\n            .domain([d3.min(data, yValue), d3.max(data, yValue)])\n            .range([this.props.config.graphHeight - this.props.config.margin.top, this.props.config.margin.bottom]);\n        let yMap = function(d) {\n            return yScale(yValue(d))\n        };\n        let yAxis = d3.axisLeft(yScale);\n\n        let svg = d3.select(\".\" + this.props.className)\n            .append(\"svg\")\n            .attr(\"width\", this.props.config.width)\n            .attr(\"height\", this.props.config.height)\n            .on (\"click\", this.props.updateZoomView);\n        svg.append(\"text\")\n            .attr(\"x\", this.props.config.width / 2)\n            .attr(\"y\", this.props.config.margin.top)\n            .attr(\"text-anchor\", \"middle\")\n            .style(\"font-size\", this.props.config.font.title)\n            .style(\"text-decoration\", \"underline\")\n            .text(\"Index x \" + potholeToNormal(this.props.yValue));\n        svg.append(\"g\")\n            .attr(\"class\", \"x-axis\")\n            .attr(\"transform\", \"translate(0,\" + (this.props.config.graphHeight - this.props.config.margin.top) + \")\")\n            .call(xAxis);\n        svg.append(\"g\")\n            .attr(\"class\", \"y-axis\")\n            .attr(\"transform\", \"translate(\" + this.props.config.margin.left + \",0)\")\n            .style(\"font-size\", this.props.config.font.axis)\n            .call(yAxis);\n        let g = svg.append(\"g\");\n        \n        g.selectAll(\".bar\")\n            .data(data)\n            .enter()\n            .append(\"rect\")\n            .attr(\"class\", \"bar\")\n            .attr(\"x\", xMap)\n            .attr(\"y\", yMap)\n            .attr(\"width\", xScale.bandwidth() - 1)\n            .attr(\"height\", function(this,d) {return (this.props.config.graphHeight - this.props.config.margin.top - yScale(d[this.props.yValue]))}.bind(this));\n\n        g.selectAll(\".\" + this.props.classText)\n            .data(data)\n            .enter()\n            .append(\"text\")\n            .style(\"font-size\", this.props.config.font.label)\n            .attr(\"class\", \"label\")\n            .attr(\"x\", function(d) {return xMap(d)})\n            .attr(\"y\", function(d) {return yMap(d) - 15})\n            .attr(\"dy\", \".75em\")\n            .text(function(this,d) {return d[this.props.yValue]}.bind(this));\n    }\n    render() {\n        return (\n            <div className={this.props.className}>\n            </div>\n\n        );\n    }\n}\n\nexport default GeneralGraphOverview;\n","import * as React from 'react';\nimport './../styles/Dashboard.css';\nimport * as d3 from 'd3';\nimport IndividualBenchmark from \"./DashboardComponents/IndividualBenchmark\";\nimport ResultsOverview from \"./DashboardComponents/ResultsOverview\";\nimport arrow from './../resources/icons/singles/angle-arrow-down.svg'\nimport TimeZoom from \"./DashboardComponents/TimeZoom\";\nimport GeneralGraphOverview from \"./DashboardComponents/GeneralGraphOverview\";\nimport {dashboardConfig, dataItem, depthItem, memoryItem, resultItem, timeItem} from \"./dashboardTypes\";\n\ntype State = {\n    data: dataItem[]\n    selectedBenchmark: string,\n    graphMin: number,\n    graphMax: number,\n    customMode: boolean,\n    customData: {\n        depth: depthItem[],\n        result: resultItem[], \n        memory: memoryItem[], \n        time: timeItem[]\n    },\n    zoomMode: string,\n    dashboardConfig: dashboardConfig\n}\n\ntype Props = {\n    rawData: string\n}\n\nclass Dashboard extends React.Component<Props, State> {\n    private readonly overviewMetrics: string[];\n    constructor(props: Props) {\n        super(props);\n        this.overviewMetrics = [\"depth\", \"memory\", \"time\", \"result\"];\n            this.state = {\n            data: [],\n            selectedBenchmark: \"\",\n            graphMin: 0,\n            graphMax: 30,\n            customMode: false,\n            customData: {\n                depth: [],\n                result: [],\n                memory: [],\n                time: []\n            },\n            zoomMode: \"\",\n            dashboardConfig: {\n                height: 450,\n                width: 1600,\n                graphHeight: 400,\n                margin: {\n                    top: 20,\n                    right: 20,\n                    bottom: 50,\n                    left: 60\n                },\n                font: {\n                    title: \"20px\",\n                    axis: \"20px\",\n                    label: \"14px\"\n                },\n                barNum: 10\n            }\n        };\n    }\n    componentDidMount() {\n        this.loadData();\n        document.addEventListener(\"keydown\", this.handleGraphTranslationKeyboard.bind(this));\n    }\n    \n\n    loadData() {\n        let file = this.props.rawData;\n        let parsedData = d3.csvParse(file, function (d) {\n            d.SPACER_cluster_out_of_gas = +d.SPACER_cluster_out_of_gas;\n            d.SPACER_expand_pob_undef = +d.SPACER_expand_pob_undef;\n            d.SPACER_inductive_level = +d.SPACER_inductive_level;\n            d.SPACER_max_cluster_size = +d.SPACER_max_cluster_size;\n            d.SPACER_max_cvx_reduced_dim = +d.SPACER_max_cvx_reduced_dim;\n            d.depth = +d.depth;\n            d.SPACER_max_query_lvl = +d.SPACER_max_query_lvl;\n            d.SPACER_need_sage = +d.SPACER_need_sage;\n            d.SPACER_num_abstractions = +d.SPACER_num_abstractions;\n            d.SPACER_num_abstractions_failed = +d.SPACER_num_abstractions_failed;\n            d.SPACER_num_abstractions_success = +d.SPACER_num_abstractions_success;\n            d.SPACER_num_active_lemmas = +d.SPACER_num_active_lemmas;\n            d.SPACER_num_cant_abstract = +d.SPACER_num_cant_abstract;\n            d.SPACER_num_ctp_blocked = +d.SPACER_num_ctp_blocked;\n            d.SPACER_num_dim_reduction_success = +d.SPACER_num_dim_reduction_success;\n            d.SPACER_num_invariants = +d.SPACER_num_invariants;\n            d.SPACER_num_is_invariant = +d.SPACER_num_is_invariant;\n            d.SPACER_num_lemma_jumped = +d.SPACER_num_lemma_jumped;\n            d.SPACER_num_lemmas = +d.SPACER_num_lemmas;\n            d.SPACER_num_mbp_failed = +d.SPACER_num_mbp_failed;\n            d.SPACER_num_merge_gen = +d.SPACER_num_merge_gen;\n            d.SPACER_num_merge_gen_failed = +d.SPACER_num_merge_gen_failed;\n            d.SPACER_num_merge_gen_success = +d.SPACER_num_merge_gen_success;\n            d.SPACER_num_no_over_approximate = +d.SPACER_num_no_over_approximate;\n            d.SPACER_num_non_lin = +d.SPACER_num_non_lin;\n            d.SPACER_num_pobs = +d.SPACER_num_pobs;\n            d.SPACER_num_propagations = +d.SPACER_num_propagations;\n            d.SPACER_num_queries = +d.SPACER_num_queries;\n            d.SPACER_num_reach_queries = +d.SPACER_num_reach_queries;\n            d.SPACER_num_refinements = +d.SPACER_num_refinements;\n            d.SPACER_num_reuse_reach_facts = +d.SPACER_num_reuse_reach_facts;\n            d.SPACER_num_sync_cvx_cls = +d.SPACER_num_sync_cvx_cls;\n            d.SPACER_num_under_approximations = +d.SPACER_num_under_approximations;\n            d.SPACER_pob_out_of_gas = +d.SPACER_pob_out_of_gas;\n            d.SPACER_wide_attmpts = +d.SPACER_wide_attmpts;\n            d.SPACER_wide_success = +d.SPACER_wide_success;\n            d.max_memory = +d.max_memory;\n            d.memory = +d.memory;\n            d.time = +d.time;\n            d.time_iuc_solver_get_iuc = +d.time_iuc_solver_get_iuc;\n            d.time_iuc_solver_get_iuc_hyp_reduce1 = +d.time_iuc_solver_get_iuc_hyp_reduce1;\n            d.time_iuc_solver_get_iuc_hyp_reduce2 = +d.time_iuc_solver_get_iuc_hyp_reduce2;\n            d.time_iuc_solver_get_iuc_learn_core = +d.time_iuc_solver_get_iuc_learn_core;\n            d.time_pool_solver_proof = +d.time_pool_solver_proof;\n            d.time_pool_solver_smt_total = +d.time_pool_solver_smt_total;\n            d.time_pool_solver_smt_total_sat = +d.time_pool_solver_smt_total_sat;\n            d.time_pool_solver_smt_total_undef = +d.time_pool_solver_smt_total_undef;\n            d.time_spacer_ctp = +d.time_spacer_ctp;\n            d.time_spacer_init_rules = +d.time_spacer_init_rules;\n            d.time_spacer_init_rules_pt_init = +d.time_spacer_init_rules_pt_init;\n            d.time_spacer_mbp = +d.time_spacer_mbp;\n            d.time_spacer_solve = +d.time_spacer_solve;\n            d.time_spacer_solve_propagate = +d.time_spacer_solve_propagate;\n            d.time_spacer_solve_pt_must_reachable = +d.time_spacer_solve_pt_must_reachable;\n            d.time_spacer_solve_reach = +d.time_spacer_solve_reach;\n            d.time_spacer_solve_reach_children = +d.time_spacer_solve_reach_children;\n            d.time_spacer_solve_reach_cluster = +d.time_spacer_solve_reach_cluster;\n            d.time_spacer_solve_reach_gen_bool_ind = +d.time_spacer_solve_reach_gen_bool_ind;\n            d.time_spacer_solve_reach_gen_merge = +d.time_spacer_solve_reach_gen_merge;\n            d.time_spacer_solve_reach_gen_merge_cvx_cls = +d.time_spacer_solve_reach_gen_merge_cvx_cls;\n            d.time_spacer_solve_reach_gen_wide = +d.time_spacer_solve_reach_gen_wide;\n            d.time_spacer_solve_reach_is_reach = +d.time_spacer_solve_reach_is_reach;\n            return d;\n        });\n        this.setState({\n            data: parsedData\n        })\n        \n    }\n    \n    handleSidebarClick(e:React.MouseEvent<HTMLLIElement>) {\n        let event = e.target as HTMLElement;\n        this.setState({\n            selectedBenchmark: event.innerText\n        });\n    }\n    \n    handleSidebarClickDot(e: resultItem){\n        this.setState({\n            selectedBenchmark: e.index\n        });\n    }\n    \n    handleHomeClick() {\n        this.setState({\n            selectedBenchmark: \"\",\n            customMode: false,\n            customData: {\n                depth: [],\n                time: [],\n                memory: [],\n                result: []\n            },\n            zoomMode: \"\", \n            graphMin: 0,\n            graphMax: 30\n        });\n    }\n    \n    handleClearClick() {\n        this.setState({\n            customData: {\n                depth: [],\n                time: [],\n                memory: [],\n                result: []\n            }\n        });\n    }\n    \n    moveGraphLeft() {\n        if (this.state.graphMin > 0){\n            this.setState({\n                graphMin: this.state.graphMin - 1,\n                graphMax: this.state.graphMax - 1\n            });\n        }\n    }\n    \n    moveGraphRight() {\n        if (this.state.graphMax < this.state.data.length - 1 ){\n            this.setState({\n                graphMin: this.state.graphMin + 1,\n                graphMax: this.state.graphMax + 1\n            });\n        }\n    }\n    \n    moveGraphUp() {\n        if (this.state.graphMin - 10 >= 0 ){\n            this.setState({\n                graphMin: this.state.graphMin - 10,\n                graphMax: this.state.graphMax - 10\n            });\n        }\n    }\n\n    moveGraphDown() {\n        if (this.state.graphMax + 10 < this.state.data.length){\n            this.setState({\n                graphMin: this.state.graphMin + 10,\n                graphMax: this.state.graphMax + 10\n            });\n        }\n    }\n\n    handleGraphTranslationClick(e:React.MouseEvent) {\n        e.preventDefault();\n        let clickEvent = e.target as HTMLImageElement;\n        if (clickEvent.alt === \"left-arrow\"){\n            this.moveGraphLeft();\n        }\n        else if (clickEvent.alt === \"right-arrow\"){\n            this.moveGraphRight();\n        }\n    }\n    \n    handleGraphTranslationKeyboard(e:KeyboardEvent) {\n        e.preventDefault();\n        if  (e.key === \"ArrowLeft\"){\n            this.moveGraphLeft();\n        }\n        else if (e.key === \"ArrowRight\") {\n            this.moveGraphRight();\n        }\n        else if (e.key === \"ArrowDown\") {\n            this.moveGraphDown();\n        }\n        else if (e.key === \"ArrowUp\") {\n            this.moveGraphUp();\n        }\n        \n    }\n    \n    handleCustomClick() {\n        this.setState({\n            customMode: !this.state.customMode\n        });\n        if (this.state.customMode){\n            this.setState({\n                customData: {\n                    depth: [],\n                    time: [],\n                    memory: [],\n                    result: []\n                }\n            });\n        }\n    }\n\n    filterDictionary(keys, custom:boolean=false, index:string=\"\"){\n        let data = this.state.data.slice(this.state.graphMin, this.state.graphMax);\n        if (custom) {\n            data = this.state.data.filter(function(d) {return d.index === index})\n        }\n        let result:Object[] = [];\n        for (let i = 0; i < data.length; i++){\n            result.push({});\n            for (let j = 0; j < keys.length; j ++){\n                result[i][keys[j]] = data[i][keys[j]];\n            }\n        }\n        return result;\n    }\n    \n    addToCustomData(e: React.MouseEvent) {\n        let event = e.target as HTMLLIElement;\n        for (let i = 0; i < this.overviewMetrics.length; i++){\n            let metric = this.overviewMetrics[i];\n            let metricDataKeys = [metric].concat([\"index\"]);\n            if (metric === \"result\") {\n                metricDataKeys.push(\"SPACER_num_invariants\");\n            }\n            let totalData = this.state.customData[metric].concat(this.filterDictionary(metricDataKeys, true, event.innerHTML));\n            \n            if (totalData.length > (this.state.graphMax - this.state.graphMin)){\n                totalData.splice(0,1);\n            }\n            let customDataCopy = this.state.customData;\n            customDataCopy[metric] = totalData;\n            this.setState({\n                customData: customDataCopy\n            });\n        }\n    }\n    \n    setZoomView(type: string) {\n        this.setState({\n            zoomMode: type, \n            graphMin: 0,\n            graphMax: 49\n        });\n    }\n    \n    render() {\n        let benchmarks = d3.map(this.state.data, function(d) {return d.index;}).keys();\n        let selectedBenchmark = this.state.selectedBenchmark;\n        let timeZoomData;\n        if (this.state.zoomMode === \"time\") {\n            let timeKeys = Object.keys(this.state.data[0]).filter(x => x.includes(\"time\"));\n            timeKeys.push(\"index\");\n            timeZoomData = this.filterDictionary(timeKeys);\n        }\n        return (\n          <div className=\"page\">\n                  <div className=\"sidebar\" id=\"sidebar\">\n                  {benchmarks.map((name, key ) => {\n                      if (this.state.customMode){\n                          if (this.state.customData.depth.filter(d => d.index === name).length > 0){\n                              return (<li className=\"selected\" key={key} onClick={this.addToCustomData.bind(this)}>{name}</li>);\n                          }\n                          return (<li key={key} onClick={this.addToCustomData.bind(this)}>{name}</li>);\n                      }\n                      else if (selectedBenchmark) {\n                          if (name === selectedBenchmark) {\n                              return (<li className=\"selected\" key={key}\n                                          onClick={this.handleSidebarClick.bind(this)}>{name}</li>);\n                          }\n                          return (<li key={key} onClick={this.handleSidebarClick.bind(this)}>{name}</li>);\n                          \n                      }\n                      else {\n                          if (key >= this.state.graphMin && key < this.state.graphMax) {\n                              return (<li className=\"selected\" key={key}\n                                          onClick={this.handleSidebarClick.bind(this)}>{name}</li>);\n                          }\n                          return (<li key={key} onClick={this.handleSidebarClick.bind(this)}>{name}</li>);\n                      }\n                  })}\n              </div>\n              <div className=\"visual\">\n                  {this.state.selectedBenchmark !== \"\" &&\n                  <IndividualBenchmark \n                      data={this.state.data.filter(function(d) {return d.index === selectedBenchmark})[0]}\n                  />}\n                  {this.state.selectedBenchmark === \"\" && this.state.zoomMode === \"\" &&\n                  <div className=\"dashboard\">\n                      {this.overviewMetrics.map((type, key) => {\n                          let data;\n                          if (this.state.customMode) {\n                              data = this.state.customData[type];\n                              if (type === \"result\"){\n                                  return (\n                                      <ResultsOverview\n                                          key={key}\n                                          data={data}\n                                          config={this.state.dashboardConfig}\n                                          selectBenchmark={this.handleSidebarClickDot.bind(this)}\n                                      />\n                                  );\n                                  \n                              }\n                          }\n                          else if (type === \"result\"){\n                              data = this.filterDictionary([type].concat([\"index\", \"SPACER_num_invariants\"]));\n                              return (\n                                  <ResultsOverview\n                                      key={key}\n                                      data={data}\n                                      config={this.state.dashboardConfig}\n                                      selectBenchmark={this.handleSidebarClickDot.bind(this)}\n                                  />\n                              );\n                          }\n                          else {\n                              data = this.filterDictionary([\"index\"].concat([type]));\n                          }\n                          return (\n                              <GeneralGraphOverview\n                                  key={key}\n                                  data={data}\n                                  config={this.state.dashboardConfig}\n                                  className={type + \"-overview\"}\n                                  classText={type + \"-text\"}\n                                  yValue={type}\n                                  updateZoomView={this.setZoomView.bind(this, type === \"time\" ? \"time\" : \"\")}\n                              />\n                          );\n                      })}\n                      <img className=\"left-arrow\" src={arrow} alt=\"left-arrow\" onClick={this.handleGraphTranslationClick.bind(this)}/>\n                      <img className=\"right-arrow\" src={arrow} alt=\"right-arrow\" onClick={this.handleGraphTranslationClick.bind(this)}/>\n                  </div>}\n                  {this.state.zoomMode === \"time\" &&\n                  <TimeZoom\n                      data={timeZoomData}\n                      \n                  />}\n              </div>\n              \n              <button className=\"home-button\" onClick={this.handleHomeClick.bind(this)}>Home</button>\n              <button className=\"custom-button\" onClick={this.handleCustomClick.bind(this)}>Custom</button>\n              {this.state.customMode && <button className=\"clear-button\" onClick={this.handleClearClick.bind(this)}>Clear</button>}\n          </div>  \n        );\n    }\n}\n\nexport default Dashboard;\n","import * as React from 'react';\n\ntype Props = {\n    rawData: {name: string, id: string, content: string}[],\n    updateData: (newValue: {name:string, id:string, content:string}) => void\n}\n\ntype State = {\n    rawData: [],\n    file: File | null\n}\n\nclass DashboardLanding extends React.Component<Props, State> {\n    private fileReader: FileReader | undefined;\n    constructor(props) {\n        super(props);\n        this.state = {\n            rawData: [],\n            file: null\n        }\n    }\n    \n    handleFileRead(file: File) {\n        const content = this.fileReader!.result!.toString();\n        let returnObject = {\n            name: file.name,\n            id: Date.now().toString(),\n            content: content!\n        };\n        \n        this.props.updateData(returnObject);\n    }\n    \n    handleFileChosen(e: React.MouseEvent<HTMLButtonElement>) {\n        e.preventDefault();\n        let file = this.state.file;\n        this.fileReader = new FileReader();\n        this.fileReader.onloadend = this.handleFileRead.bind(this, file!);\n        this.fileReader.readAsText(file!);\n    }\n    \n    updateFile(e: React.ChangeEvent<HTMLInputElement>) {\n        this.setState({\n            file: e.target.files![0]\n        });\n    }\n    \n    render() {\n        return (\n            <div className=\"dashboard-menu\">\n                <h1>Spacer Dashboard</h1>\n                <form>\n                <input type=\"file\" accept=\".csv\" onChange={this.updateFile.bind(this)}/>\n                <button type=\"submit\" className=\"fake-button\" onClick={this.handleFileChosen.bind(this)}>Upload</button>\n                </form>\n                <div className=\"file-list\">\n                    <h2>Uploaded Files</h2>\n                    {this.props.rawData.length > 0 && this.props.rawData.map((dataItem, key) => (\n                        <li key={key}>\n                            <span>{dataItem.name}</span><a href={\"#/dashboard/\" + dataItem.id}>Analysis</a>\n                        </li>\n                    ))}\n                </div>\n            </div>\n        );\n    }\n}\n\nexport default DashboardLanding;\n","import * as React from 'react';\nimport { HashRouter, Route} from \"react-router-dom\";\nimport { AppWrapper } from './AppWrapper'\nimport { Menu } from './Menu';\nimport { RouteComponentProps } from 'react-router';\nimport Dashboard from \"./Dashboard\";\nimport DashboardLanding from \"./DashboardLanding\";\nimport { Editor } from \"./Editor\";\ntype State = {\n    problem: string,\n    problemName: string,\n    spacerUserOptions: string,\n    hideBracketsAssoc: boolean,\n    nonStrictForNegatedStrictInequalities: boolean,\n    orientClauses: boolean\n    varNames: string\n    rawData: {name: string, id: string, content: string}[]\n}\n\nexport class AppRouter extends React.Component<{} & RouteComponentProps<{}>, State> {\n\n    state: State = {\n        problem: \"\",\n        problemName: \"\",\n        spacerUserOptions: \"\",\n        hideBracketsAssoc: true,\n        nonStrictForNegatedStrictInequalities: true,\n        orientClauses: true,\n        varNames: \"\",\n        rawData: []\n    };\n\n    render() {\n        return (\n            <HashRouter>\n                <Route path=\"/\" exact render={() => \n                    <Menu \n                        problem={this.state.problem}\n                                problemName={this.state.problemName}\n                                spacerUserOptions={this.state.spacerUserOptions}\n                                hideBracketsAssoc={this.state.hideBracketsAssoc}\n                                nonStrictForNegatedStrictInequalities={this.state.nonStrictForNegatedStrictInequalities}\n                                orientClauses={this.state.orientClauses}\n                                onChangeProblem={this.changeProblem.bind(this)}\n                                onChangeProblemName={this.changeProblemName.bind(this)}\n                                onChangeSpacerUserOptions={this.changeSpacerUserOptions.bind(this)}\n                                onChangeHideBracketsAssoc={this.changeHideBracketsAssoc.bind(this)}\n                                onChangeNonStrictForNegatedStrictInequalities={this.changeNonStrictForNegatedStrictInequalities.bind(this)}\n                                onChangeOrientClauses={this.changeOrientClauses.bind(this)}\n                                onChangeVariables={this.changeVariables.bind(this)}\n                    />\n                }/>\n                <Route path=\"/replay/:exp_id\" render={({match}) => \n                    this.appComponent(\"replay\", match.params.exp_id)\n                }/>\n                <Route path=\"/iterative/\" render={() => \n                    this.appComponent(\"iterative\", \"\")\n                }/>\n                <Route exact path=\"/dashboard/\" render={() =>\n                    <DashboardLanding \n                        rawData={this.state.rawData}\n                        updateData={this.changeRawData.bind(this)}\n                    />\n                }/>\n                <Route path=\"/dashboard/:fileId\" render={({match}) => \n                    this.displayVisualization(match.params.fileId)\n                }/>\n                <Route exact path=\"/editor/\" render={() =>\n                    <Editor\n                        name=\"\"\n                        input=\"\"\n                        isModal ={false}\n                    />\n                }/>\n            </HashRouter>\n        );\n    }\n\n    appComponent(mode: \"replay\" | \"iterative\", exp_path: string) {\n        const spacerUserOptions = `${this.state.spacerUserOptions}`;\n        return <AppWrapper\n        name={this.state.problemName}\n        exp_path ={exp_path}\n        mode={mode}\n        problem={this.state.problem!}\n        spacerUserOptions={spacerUserOptions}\n        hideBracketsAssoc={this.state.hideBracketsAssoc}\n        nonStrictForNegatedStrictInequalities={this.state.nonStrictForNegatedStrictInequalities}\n        orientClauses={this.state.orientClauses}\n        varNames={this.state.varNames}\n        />\n    }\n    \n    displayVisualization(fileId: string) {\n        let rawData = this.state.rawData.filter(x => x.id === fileId)[0];\n        if (rawData) {\n            return (\n                <Dashboard\n                    rawData={rawData.content}\n                />\n            );\n        }\n    }\n\n    changeProblem(problem: string) {\n        this.setState({problem: problem});\n    }\n    changeProblemName(problemName: string) {\n        this.setState({problemName: problemName});\n    }\n    changeSpacerUserOptions(spacerUserOptions: string) {\n        this.setState({spacerUserOptions: spacerUserOptions});\n    }\n    changeHideBracketsAssoc(newValue: boolean) {\n        this.setState({hideBracketsAssoc: newValue});\n    }\n    changeNonStrictForNegatedStrictInequalities(newValue: boolean) {\n        this.setState({nonStrictForNegatedStrictInequalities: newValue});\n    }\n    changeOrientClauses(newValue: boolean) {\n        this.setState({orientClauses: newValue});\n    }\n    changeVariables(newValue: string){\n        this.setState({\n            varNames: newValue\n        });\n    }\n    \n    changeRawData(newValue: {name:string, id:string, content:string}){\n        let currentList = this.state.rawData;\n        let newList = currentList.concat([newValue]);\n        this.setState({\n            rawData: newList\n        });\n    }\n}\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.1/8 is considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl)\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready.then(registration => {\n      registration.unregister();\n    });\n  }\n}\n","import * as React from 'react';\nimport * as ReactDOM from 'react-dom';\nimport './index.css';\nimport { AppRouter } from './components/Router';\nimport * as serviceWorker from './serviceWorker';\n\nReactDOM.render(\n  <AppRouter/>,\n  document.getElementById('root')\n);\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.unregister();\n","module.exports = __webpack_public_path__ + \"static/media/all.496082da.svg\";","class SatVisAssertionError extends Error {\n    constructor(message) {\n      super(message);\n      this.name = \"SatVisAssertionError\";\n    }\n  }\n\nexport function assert(condition, message=\"\") {\n    if (!condition)\n        throw new SatVisAssertionError('Assertion failed: ' + (message || ''));\n};","// export interface SExp extends Array<string | SExp> {}\nexport interface SExpNode {\n  token: string,\n  startLine: number,\n  startOffset: number,\n  endLine: number,\n  endOffset: number\n}\nexport interface SExp extends Array<SExpNode | SExp> {}\nexport function parse(input: string): SExp {\n  console.log(\"**\"+input+\"//\");\n  let i = 0;\n  let line_number = 0;\n  let offset = 0;\n  const impl = () => {\n    while (input[i].match(/\\r\\n|\\r|\\n/)) {\n      line_number++; // skip newlines\n      i++;\n    }\n    while (input[i].match(/\\s/)) {\n      i++; // skip whitespaces\n      offset++;\n    }\n    if (input[i] === \"(\") {\n      // drop '('\n      i++;\n    } else {\n      throw new Error(\n        `Input is not valid: unexpected '${input[i]}' at the beginning`\n      );\n    }\n\n    const result: SExp = [];\n    let node = \"\";\n    let startLine = line_number;\n    let startOffset = offset;\n    let endLine = line_number;\n    let endOffset = offset;\n    while (true) {\n      offset++;\n      let c = input[i++];\n\n      if (!c) {\n        if (!node) {\n          break;\n        } else {\n          throw new Error(\n            `Input is not valid: unexpected '${node}' at the end`\n          );\n        }\n      }\n\n      if (c === \")\") {\n        if (node) result.push({\n          \"token\": node, \n          \"startLine\": startLine,\n          \"startOffset\": startOffset,\n          \"endLine\": line_number,\n          \"endOffset\": offset,\n        });\n        break;\n      } else if (c === \"\\\\\") {\n        c += input[i++];\n        node += c;\n      } else if (c.match(/\\r\\n|\\r|\\n/)) {\n        if (node) {\n          result.push({\n          \"token\": node, \n          \"startLine\": startLine,\n          \"startOffset\": startOffset,\n          \"endLine\": line_number,\n          \"endOffset\": offset,\n          });\n          node = \"\";\n        }\n        line_number++;\n        offset = 0;\n      } else if (c.match(/\\s/)) {\n        if (node) result.push({\n          \"token\": node, \n          \"startLine\": startLine,\n          \"startOffset\": startOffset,\n          \"endLine\": line_number,\n          \"endOffset\": offset,\n        });\n        node = \"\";\n        startLine = line_number;\n        startOffset = offset;\n      } else if (c === \"(\") {\n        i--;\n        offset--;\n        result.push(impl());\n      } else if (c === '\"') {\n        node += c;\n        // parse string\n        while ((c = input[i++])) {\n          // skip \\\"\n          if (c === \"\\\\\" && input[i] === '\"') {\n            c += input[i++];\n          }\n          node += c;\n          if (c === '\"') break;\n        }\n      } else {\n        node += c;\n      }\n    }\n\n    return result;\n  };\n\n  return impl();\n}\n\nfunction isString(node: any): node is string {\n  return typeof node === \"string\";\n}\n\n//dump checker since typescript doesnt have fancy typechecker api\nexport function isSExpNode(node: any): node is SExpNode {\n  return \"startOffset\" in node;\n}\n\n// export function beautify(input: string | SExp): string {\n//   const sExp = isString(input) ? parse(input) : input;\n\n//   const stack: Array<{ idx: number; exp: SExp }> = [{ idx: 0, exp: sExp }];\n//   let indent = 0;\n\n//   let result = \"\";\n//   const print = (str: string) => {\n//     result += \"  \".repeat(indent) + str + \"\\n\";\n//   };\n\n//   while (stack.length) {\n//     const node = stack.pop()!;\n\n//     if (node.idx === 0 && node.exp.length < 5 && node.exp.every(isSExpNode)) {\n//       // very short case, just print and it's done\n//       print(`(${node.exp.join(\" \")})`);\n//       continue;\n//     }\n\n//     let done = false;\n\n//     while (true) {\n//       if (node.idx >= node.exp.length) {\n//         done = true;\n//         break;\n//       }\n\n//       const child = node.exp[node.idx++];\n\n//       if (node.idx === 1) {\n//         print(`(${child}`);\n//         indent++;\n//       } else if (isSExpNode(child)) {\n//         print(child.token);\n//       } else {\n//         stack.push(node);\n//         stack.push({ idx: 0, exp: child });\n//         break;\n//       }\n//     }\n\n//     if (done) {\n//       indent--;\n//       print(\")\");\n//     }\n//   }\n\n//   return result.trim();\n// }\n","module.exports = __webpack_public_path__ + \"static/media/angle-arrow-down.412f3289.svg\";","import {parse} from \"s-exify\";\n\nexport const negateMap = {\n    \"<=\": \">\",\n    \">=\": \"<\",\n    \"!=\": \"=\",\n    \"<\": \">=\",\n    \">\": \"<=\",\n    \"=\": \"!=\",\n    \"&&\": \"||\",\n    \"||\": \"&&\",\n    \"not\": \"\"\n};\n\nconst logSym = [\"&&\", \"||\", \"=>\"];\n\nexport function toReadable(expr) {\n    if (expr[0] !== \"(\"){\n        expr = \"(\" + expr + \")\";\n    }\n    return parseResult(parse(expr), \"\");\n}\n\nfunction parseResult(lst, sep) {\n    //symbols for logical relations\n    let logSym = {\n        \"and\": \"&&\",\n        \"or\": \"||\"\n    };\n\n    //symbols for mathematical operations\n    //Note: \"-\" is not included because negative numbers are in the form (- x)\n    let logOp = [\"!=\", \"=\", \"<=\", \">=\", \">\", \"<\", \"+\", \"*\", \"/\"];\n\n    //empty list should return empty string\n    if (lst.length < 1){\n        return \"\";\n    }\n\n    //logical symbol should be inserted between each child clause\n    if (lst[0] in logSym) {\n        return parseResult(lst.splice(1), logSym[lst[0]]);\n    }\n\n    //reorders to put operators between operands\n    //Note: accounts for \"-\" denoting the subtraction of 2 numbers, (- x y)\n    if (logOp.indexOf(lst[0]) >= 0 || (lst[0] === \"-\" && lst.length === 3)){\n        return \"(\" + parseResult(lst[1], \"\") + \" \" + lst[0] + \" \" + parseResult(lst[2], \"\") + \")\";\n    }\n\n    //handles indexing into an array\n    if (lst[0] === \"select\") {\n        return lst[1] + \"[\" + lst[2] + \"]\";\n    }\n\n    //Adds not symbol (!) to beginning of clause\n    if (lst[0] === \"not\") {\n        if (lst[1][0] in negateMap){\n            lst[1][0] = negateMap[lst[1][0]];\n        }\n        return parseResult(lst[1], \"\")\n    }\n\n    //prevents trailing logical symbol\n    if (sep !== \"\" && lst.length === 1){\n        return parseResult(lst[0], \"\");\n    }\n\n    //actual place where logical symbol gets placed between clauses\n    if (sep !== \"\") {\n        return parseResult(lst[0], \"\") + \" \" + sep + \"\\n\" + parseResult(lst.splice(1), sep);\n    }\n\n    //handler for negative numbers which come in the form (- x)\n    if (lst[0] === \"-\"){\n        return lst[0] + lst[1];\n    }\n\n    //handler for denoting invariants. Ex. Inv (...)\n    if (typeof(lst[0]) === 'string' && Array.isArray(lst) && lst.length > 1){\n        return lst[0] + \": (\" + parseResult(lst[1], \"\") + \")\";\n    }\n\n    return lst;\n}\n\nexport function replaceVarNames(expr, varList) {\n    if (varList === \"\") return expr;\n    if (typeof expr === \"string\") {\n        let newList = varList.split(\" \");\n        for (let i = 0; i < newList.length; i++) {\n            let regex = new RegExp( \"[a-zA-z0-9@$:!]+_\"+ i + \"_n\", \"gi\");\n            expr = expr.replace(regex, newList[i]);\n        }\n    }\n    return expr;\n}\n\nexport function reorder(expr, lhs, op){\n    if (typeof expr !== \"string\") return expr;\n    let lhsFinal:Number[] = [];\n    let rhsFinal:Number[] = [];\n    let exprList = getCleanExprList(expr, op);\n    let result = \"\";\n    for (let i = 0; i < exprList.length; i++){\n        if (lhs.indexOf(i) > -1) {\n            if (lhsFinal.length === 0){\n                result = negate(exprList[i]) + result;\n            }\n            else {\n                result = negate(exprList[i]) + \" \" + negateMap[op] + \"\\n\" + result;\n            }\n            lhsFinal.push(i);\n            \n        }\n        else {\n            if (rhsFinal.length === 0) {\n                result = result + \" =>\\n\" + exprList[i];\n            }\n            else {\n                result = result + \" \" + op + \"\\n\" + exprList[i]\n            }\n           rhsFinal.push(i); \n        }\n        \n        if (i === exprList.length - 1) {\n            if (lhsFinal.length === 0) {\n                result = \"true \" + result\n            }\n            if (rhsFinal.length === 0) {\n                result = result + \" =>\\nfalse\"\n            }\n        }\n    }\n    return result;\n}\n\nfunction negate(expr) {\n    let compOp = getCompOp(expr);\n    if (compOp === \"not\"){\n        return compOp + \" \" + expr\n    }\n    return expr.replace(compOp, negateMap[compOp]);\n}\n\nfunction getCompOp(expr: string) {\n    let keys = Object.keys(negateMap);\n    for (let i = 0; i < keys.length; i++){\n        if (expr.includes(keys[i])){\n            return keys[i];\n        } \n    }\n    \n    return \"not\";\n}\n\nexport function getOp(expr) {\n    for (let i = 0; i < logSym.length; i++) {\n        if (expr.includes(logSym[i])) return logSym[i];\n    }\n}\n\nexport function getIndexOfLiteral(exprList, literal){\n    for (let i = 0; i < exprList.length; i++){\n        if (literal === exprList[i] || literal === negate(exprList[i])){\n            return i;            \n        }\n    }\n    return -1;\n}\n\nexport function getCleanExprList(expr, sep) {\n    let exprList = expr.split(sep);\n    let resultExprList:string[] = [];\n    for (let i = 0; i < exprList.length; i++){\n        if (exprList[i] !== \"\") {\n            resultExprList.push(exprList[i].trim());\n        }\n    }\n    \n    return resultExprList;\n}\n\nexport function getVariables(literal) {\n    let regex = /([a-zA-Z])+/g;\n    return literal.match(regex);\n}\n\nexport function getProcesses(literal) {\n    let regex = /(\\[[0-9]+\\])/g;\n    return literal.match(regex);\n}\n\nexport function getProcessVariables(literal) {\n    let regex = /([a-zA-Z]+\\[[0-9]+\\])/g;\n    return literal.match(regex);\n}\n\nexport function cleanExprOperators(expr) {\n    for (let i = 0; i < logSym.length; i++){\n       expr = expr.replace(logSym[i], \"\"); \n    }\n    return expr;\n}\n\nexport function getVarIndices(varList: string[], exprList: string[]) {\n    let result:number[] = [];\n    for (let i = 0; i < varList.length; i++){\n        for (let j = 0; j < exprList.length; j++){\n            if (exprList[j].includes(varList[i])){\n                result.push(j);\n            }\n        }\n    }\n    return result;\n}\n\n\nexport function getProblemName(fileName) {\n    let regex = /.*.smt2/\n    return fileName.match(regex);\n}\n"],"sourceRoot":""}