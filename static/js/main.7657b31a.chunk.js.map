{"version":3,"sources":["resources/icons/singles/eye.svg","helpers/readable.ts","helpers/transformers.ts","components/Slider.tsx","helpers/network.ts","components/Graph.tsx","helpers/navigation.ts","components/Main.tsx","components/ReplaceDialog.tsx","components/TreeEditor.tsx","components/EditorModal.tsx","components/NodeDetails.tsx","helpers/diff.ts","components/Aside.tsx","components/StarModal.tsx","components/TransformerTable.tsx","components/ExprMapSelector.tsx","components/DumbReplaceModal.tsx","components/App.tsx","components/ExpTable.tsx","components/MenuOptions.tsx","components/UploadSpacerLogModal.tsx","components/Menu.tsx","components/DashboardComponents/TimeChart.tsx","helpers/naming.ts","components/DashboardComponents/IndividualBenchmark.tsx","components/DashboardComponents/ResultsOverview.tsx","components/DashboardComponents/TimeZoom.tsx","components/DashboardComponents/GeneralGraphOverview.tsx","components/Dashboard.tsx","components/DashboardLanding.tsx","components/EditorPage.tsx","components/Router.tsx","serviceWorker.js","index.tsx","resources/icons/all.svg","helpers/uber-s-exify.ts","resources/icons/singles/angle-arrow-down.svg","helpers/util.ts"],"names":["module","exports","require","negateMap","toReadable","expr","getCleanExprList","sep","exprList","split","resultExprList","i","length","push","trim","getProblemName","fileName","match","_","NULL_IDX","ASTNode","constructor","nodeID","token","parentID","children","shouldBreak","shouldInBracket","transformers","startLine","endLine","startOffset","endOffset","this","updateRange","node","isOpt","lst","Array","isArray","indexOf","ASTTransformer","Object","run","nodes","ast","t","action","params","condition","runStack","tStack","new_ast","cloneDeep","t_index","dirty","nodeList","getCondition","current_token","current_break","node_depth","nodeDepth","current_in_bracket","move","movable","cloned_ast","eval","parent","assert","siblings","nodePosition","buildVis","flipCmp","new_node","toImp","cloned_node","headChildren","tailChildren","newHead","newTail","cID","includes","new_cID","negateNode","childID","replace","last","source","RegExp","old_token","changeBreak","changeBracket","AST","formula","visNodes","visEdges","null_node","lstToAST","parse","getNode","child","deleteNode","console","log","findNode","line","character","isSExpNode","_i","label","id","shape","size","from","to","toString","selectedID","toHTML","add_highlight","result","join","repeat","icons","Slider","React","slider","render","props","historyLength","currentTime","onCurrentTimeChange","className","disabled","enabled","onClick","viewBox","xlinkHref","ref","type","min","max","value","onChange","getSliderValue","current","parseInt","styleTemplates","lemmaColours","ptColours","buildPobLemmasMap","tree","varList","PobLemmasMap","event_type","lemmaExprID","exprID","level","Number","MAX_SAFE_INTEGER","pobID","existPrevLemma","lemma","prev_min","buildExprMap","ExprMap","readable","exprMapItem","exprType","raw","editedRaw","editedReadable","toVisNode","style","nodeSelection","finalInv","color","styleData","isMarked","finalColor","border","markedStyle","defaultStyle","background","highlight","highlightStyle","fixed","toVisEdge","edgeId","parentNodeId","hidden","arrows","smooth","Graph","network","networkNodes","DataSet","networkEdges","graphContainer","boundKeyupHandler","keyupHandler","bind","componentDidMount","generateNetwork","updateNetwork","layout","fit","window","addEventListener","componentWillUnmount","removeEventListener","componentDidUpdate","prevProps","Network","edges","physics","interaction","multiselect","hierarchical","direction","sortMethod","on","clickEvent","a","clickedNodeId","onNodeSelectionChange","onlyUpdateStyles","visLayout","PobVisTree","treeCloned","to_be_vis","identical_sibl","same_as_sibl","sibl","new_children","PobVisLayout","ATree","nodeHasBeenSelected","currentNodeExprID","MIN_SAFE_INTEGER","InvList","ptColorMap","map","exprInfo","start","end","nodeColor","pt_name","keys","visNode","filter","x","findIndex","visEdge","clear","add","event","closest_node","nodeId","currentNode","body","closestNode","min_distance","idx","distance","y","edge","fromId","toId","closestNodes","findClosestNode","key","ReactModal","setAppElement","Main","messageArea","messageQ","forEach","runCmd","readOnly","appState","ReplaceDialog","state","target","regex","handleSourceChange","e","setState","handleTargetChange","handleRegexChange","checked","handleKeyUp","stopPropagation","onKeyUp","defaultValue","defaultChecked","onApply","TreeEditor","selectedNodeIDs","stringRep","status","possibleTransformations","transformationSelected","astStack","transformerStack","transformer","localSelectedNodeIDs","input","redrawAST","redraw","updateConditionInputEvent","evt","updateParamsInputEvent","JSON","displayTransformers","index","display","width","stringify","applyStack","original_ast","error","message","applyLocal","currentAST","undo","pop","addInputOutputExample","inputAST","outputAST","inputOutputExample","onAddInputOutputExample","updateTransformationSelected","possibleTs","transformation","name","xmlAst","humanReadableAst","dangerouslySetInnerHTML","__html","isModal","onBlast","onTransformExprs","EditorModal","isChromeOrFirefox","selectedInput","openEditor","getFormulas","blast","inputList","expName","onPushToMessageQ","NodeDetails","super","keep","type_map","learningFlag","learningErrorFlag","transformationFlag","transformationErrorFlag","editorIsOpen","editorTextInputList","getLemmaExprs","lemmaExprs","lemmas","lemmaId","getLemmaList","lemma_list","colorIndex","lemmaStyle","relatedExprMap","exprData","implies","literal","lemmaColour","transformExprsFromText","transformExprs","fetch","method","mode","headers","selectedProgram","response","closeModal","json","responseData","tExprMap","forceUpdate","openModal","afterOpenModal","node1","node2","detailfDiffJSX","expr1","expr2","expr1List","expr2List","Math","lineDiff","diff","added","removed","concat","toDiff","part","isOpen","onRequestClose","overlayClassName","additional_info","classNameTop","classNameBottom","solvingCompleted","Aside","createButton","title","svg","getNodeDetails","expr_layout","updateRelatedExprMap","exprMap","onPoke","onOpenStarModal","SatVisLayout","MultiSelectMode","StarModal","output","finalLemmas","getFinalInvariant","debugMode","Set","pob","values","getLemmaHeader","lemma_id","reset","sortByLevel","sorted","sort","lem_a","lem_b","sortByHeader","renderFinalInvariant","lemRows","expr_raw","expr_edited","handleDebugModeChange","resJSX","TransformerTable","isFetching","progs","fetchProgs","multiTransformExprs","toRaw","item","hash","xml_ast","human_readable_ast","programs","tmpExprMap","localExprMap","onUpdateLocalExprMap","fetchedJSON","progs_list","ExprMapSelector","matchingFiles","exps","selected","fetchExps","getMatchingFiles","getMatchingExprMap","data","exp","exp_path","expr_map","exps_list","updateSelected","TransformerMenu","localReplaceMap","dumbReplaceMap","uuid","handleTextareaChange","learnTransformationFromInputOutput","payload","inputOutputExamples","responseJson","possiblePrograms","onSaveExprMap","onApplyDumbReplaceMap","onUpdateExprMap","App","Component","varNames","starModalIsOpen","poke","pushToMessageQ","channel","msg","current_messageQ","var_names","run_cmd","spacer_state","saveExprMap","applyDumbReplaceMap","newReplaceMap","newReplaceMapJSON","newExprMap","replaceAll","updateExprMap","updateNodeSelection","tempNodeSelection","slice","updateCurrentTime","setPobVisLayout","setSatVisLayout","setMultiSelect","setSMTLayout","setJSONLayout","openStarModal","closeStarModal","example","hL","shouldCloseOnOverlayClick","onUpdateNodeSelection","SMTLayout","JSONLayout","ExpTable","exp_name","pathname","deleteExp","MenuOptions","optionTypeHTML","optionType","optionValue","optionName","allOptions","showOptions","options","fetchOptions","updateSpacerOptions","fullOptionString","option","dash","changeSpacerUserOptions","storeSpacerOptions","preventDefault","displaySpacerOptions","spacerUserOptions","updateOptionValue","getOptions","placeholder","changeOptionType","tempList","removeOption","rIndex","undefined","splice","changeSpacerManualUserOptions","newValue","showHideOptions","selectedOptions","htmlFor","src","eye","alt","kvp","displayValue","onSubmit","list","onChangeVariables","UploadSpacerLogModal","inputProblem","spacerLog","handleExpNameChange","uploadInputFile","files","file","reader","FileReader","onloadend","text","readAsText","uploadSpacerLog","uploadFiles","spacerState","location","reload","Menu","uploadModalIsOpen","problem","problemName","messagesQ","newProblemUploaded","fileUpload","monacoDiv","monaco","Monaco","create","lineNumbers","roundedSelection","scrollBeyondLastLine","scrollBeyondLastColumn","minimap","renderLineHighlight","hideCursorInOverviewRuler","links","overviewRulerBorder","automaticLayout","lineDecorationsWidth","lineNumbersMinChars","wordWrap","setValue","getModel","onDidChangeContent","changeProblem","getValue","openUploadModal","closeUploadModal","runSpacer","newPath","history","errorMess","chooseFile","uploadEncoding","changeVariables","click","changeProblemName","withRouter","TimeChart","totalTime","palette","createSunburst","prevState","snapshot","prepareData","tmp","getData","resultKeys","d3","remove","colour","domain","range","myChart","SunburstChart","document","getElementById","height","tooltipTitle","showLabels","potholeToNormal","words","toUpperCase","substring","IndividualBenchmark","filterTimeData","d","reduce","obj","timeData","dataKey","ResultsOverview","createResultsOverview","results","xScale","config","margin","left","right","xMap","xValue","xAxis","tickValues","yValue","SPACER_num_invariants","yScale","graphHeight","top","bottom","yMap","yAxis","append","attr","font","call","axis","g","selectAll","enter","bandwidth","select","selectBenchmark","TimeZoom","instance","GeneralGraphOverview","createGraph","updateZoomView","classText","Dashboard","overviewMetrics","selectedBenchmark","graphMin","graphMax","customMode","customData","depth","memory","time","zoomMode","dashboardConfig","barNum","loadData","handleGraphTranslationKeyboard","rawData","parsedData","SPACER_cluster_out_of_gas","SPACER_expand_pob_undef","SPACER_inductive_level","SPACER_max_cluster_size","SPACER_max_cvx_reduced_dim","SPACER_max_query_lvl","SPACER_need_sage","SPACER_num_abstractions","SPACER_num_abstractions_failed","SPACER_num_abstractions_success","SPACER_num_active_lemmas","SPACER_num_cant_abstract","SPACER_num_ctp_blocked","SPACER_num_dim_reduction_success","SPACER_num_is_invariant","SPACER_num_lemma_jumped","SPACER_num_lemmas","SPACER_num_mbp_failed","SPACER_num_merge_gen","SPACER_num_merge_gen_failed","SPACER_num_merge_gen_success","SPACER_num_no_over_approximate","SPACER_num_non_lin","SPACER_num_pobs","SPACER_num_propagations","SPACER_num_queries","SPACER_num_reach_queries","SPACER_num_refinements","SPACER_num_reuse_reach_facts","SPACER_num_sync_cvx_cls","SPACER_num_under_approximations","SPACER_pob_out_of_gas","SPACER_wide_attmpts","SPACER_wide_success","max_memory","time_iuc_solver_get_iuc","time_iuc_solver_get_iuc_hyp_reduce1","time_iuc_solver_get_iuc_hyp_reduce2","time_iuc_solver_get_iuc_learn_core","time_pool_solver_proof","time_pool_solver_smt_total","time_pool_solver_smt_total_sat","time_pool_solver_smt_total_undef","time_spacer_ctp","time_spacer_init_rules","time_spacer_init_rules_pt_init","time_spacer_mbp","time_spacer_solve","time_spacer_solve_propagate","time_spacer_solve_pt_must_reachable","time_spacer_solve_reach","time_spacer_solve_reach_children","time_spacer_solve_reach_cluster","time_spacer_solve_reach_gen_bool_ind","time_spacer_solve_reach_gen_merge","time_spacer_solve_reach_gen_merge_cvx_cls","time_spacer_solve_reach_gen_wide","time_spacer_solve_reach_is_reach","handleSidebarClick","innerText","handleSidebarClickDot","handleHomeClick","handleClearClick","moveGraphLeft","moveGraphRight","moveGraphUp","moveGraphDown","handleGraphTranslationClick","handleCustomClick","filterDictionary","custom","j","addToCustomData","metric","metricDataKeys","totalData","innerHTML","customDataCopy","setZoomView","timeZoomData","benchmarks","timeKeys","arrow","DashboardLanding","fileReader","handleFileRead","content","returnObject","Date","now","updateData","handleFileChosen","updateFile","accept","dataItem","href","EditorPage","getValueInRange","getSelection","all_formulas","f","rows","AppRouter","path","exact","appComponent","changeRawData","displayVisualization","fileId","newList","Boolean","hostname","ReactDOM","navigator","serviceWorker","ready","then","registration","unregister","line_number","offset","impl","Error","c","SatVisAssertionError"],"mappings":"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","file":"static/js/main.7657b31a.chunk.js","sourcesContent":["module.exports = __webpack_public_path__ + \"static/media/eye.bf3c357b.svg\";","import { parse, SExp} from \"s-exify\";\n\nconst _ = require(\"lodash\");\nexport const negateMap = {\n    \"<=\": \">\",\n    \">=\": \"<\",\n    \"!=\": \"=\",\n    \"<\": \">=\",\n    \">\": \"<=\",\n    \"=\": \"!=\",\n    \"&&\": \"||\",\n    \"||\": \"&&\",\n    \"not\": \"\"\n};\n\nconst sortableOps = [\"+\", \"and\", \"or\", \"*\"];\nconst logSym = [\"&&\", \"||\", \"=>\"];\n\n\nexport function toReadable(expr: string): string{\n    //NHAM: the current toReadable is so broken with anything other than\n    //simple_bakery, so temporary disable it\n    return expr;\n}\n\n\n// export function oldToReadable(expr: string): string {\n//     if (expr[0] !== \"(\"){\n//         expr = \"(\" + expr + \")\";\n//     }\n//     return parseResult(parse(expr), \"\");\n//     // return parseResult(sortLST(parse(expr)), \"\");\n// }\n\n\n// function sortLST(lst: SExp){\n//     //XXX: Fix me\n//     if(_.isString(lst)){\n//         return lst;\n//     }\n\n//     if(lst.length < 1){\n//         return lst;\n//     }\n\n//     if(sortableOps.includes(lst[0])){\n//         var args = _.cloneDeep(lst.slice(1));\n//         args.sort(function(x, y) {\n//             if (sortLST(x).toString() < sortLST(y).toString()) {\n//                 return -1;\n//             }\n//             if (sortLST(x).toString() > sortLST(y).toString()) {\n//                 return 1;\n//             }\n//             return 0;\n//         });\n        \n//         return [lst[0]].concat(args);\n//     }\n//     // return lst;\n//     else{\n//         var newLst = [lst[0]];\n//         for(let i = 1; i < lst.length; i++){\n//             newLst.push(sortLST(lst[i]));\n//         }\n//         return newLst;\n//     }\n// }\n\n\n// function parseResult(lst, sep) {\n//     //symbols for logical relations\n//     let logSym = {\n//         \"and\": \"&&\",\n//         \"or\": \"||\"\n//     };\n\n//     //symbols for mathematical operations\n//     //Note: \"-\" is not included because negative numbers are in the form (- x)\n//     let logOp = [\"!=\", \"=\", \"<=\", \">=\", \">\", \"<\", \"+\", \"*\", \"/\", \"=>\"];\n\n//     //empty list should return empty string\n//     if (lst.length < 1){\n//         return \"\";\n//     }\n\n//     //logical symbol should be inserted between each child clause\n//     if (lst[0] in logSym) {\n//         return parseResult(lst.splice(1), logSym[lst[0]]);\n//     }\n\n//     //reorders to put operators between operands\n//     //Note: accounts for \"-\" denoting the subtraction of 2 numbers, (- x y)\n//     if (logOp.indexOf(lst[0]) >= 0 || (lst[0] === \"-\" && lst.length === 3)){\n//         return \"(\" + parseResult(lst[1], \"\") + \" \" + lst[0] + \" \" + parseResult(lst[2], \"\") + \")\";\n//     }\n\n//     //handles indexing into an array\n//     if (lst[0] === \"select\") {\n//         return lst[1] + \"[\" + parseResult(lst[2], \"\") + \"]\";\n//     }\n\n//     //Adds not symbol (!) to beginning of clause\n//     if (lst[0] === \"not\") {\n//         if (lst[1][0] in negateMap){\n//             lst[1][0] = negateMap[lst[1][0]];\n//             return parseResult(lst[1], \"\");\n//         }\n//         return parseResult(\"!\" + lst[1], \"\");\n//     }\n\n//     //prevents trailing logical symbol\n//     if (sep !== \"\" && lst.length === 1){\n//         return parseResult(lst[0], \"\");\n//     }\n\n//     //actual place where logical symbol gets placed between clauses\n//     if (sep !== \"\") {\n//         return parseResult(lst[0], \"\") + \" \" + sep + \"\\n\" + parseResult(lst.splice(1), sep);\n//     }\n\n//     //handler for negative numbers which come in the form (- x)\n//     if (lst[0] === \"-\"){\n//         return lst[0] + parseResult(lst[1], \"\");\n//     }\n\n//     //handler for denoting invariants. Ex. Inv (...)\n//     if (typeof(lst[0]) === 'string' && Array.isArray(lst) && lst.length > 1){\n//         return lst[0] + \": (\" + parseResult(lst[1], \"\") + \")\";\n//     }\n\n//     return lst.toString();\n// }\n\nexport function replaceVarNames(expr: string, varList: string): string {\n    if (varList === \"\") return expr;\n    if (typeof expr === \"string\") {\n        let newList = varList.split(\" \");\n        for (let i = 0; i < newList.length; i++) {\n            let regex = new RegExp( \"[a-zA-z0-9@$:!]+_\"+ i + \"_n\", \"gi\");\n            expr = expr.replace(regex, newList[i]);\n        }\n    }\n    return expr;\n}\n\n// export function reorder(expr, lhs, op){\n//     if (typeof expr !== \"string\") return expr;\n//     let lhsFinal:Number[] = [];\n//     let rhsFinal:Number[] = [];\n//     let exprList = getCleanExprList(expr, op);\n//     let result = \"\";\n//     for (let i = 0; i < exprList.length; i++){\n//         if (lhs.indexOf(i) > -1) {\n//             if (lhsFinal.length === 0){\n//                 result = negate(exprList[i]) + result;\n//             }\n//             else {\n//                 result = negate(exprList[i]) + \" \" + negateMap[op] + \"\\n\" + result;\n//             }\n//             lhsFinal.push(i);\n            \n//         }\n//         else {\n//             if (rhsFinal.length === 0) {\n//                 result = result + \" =>\\n\" + exprList[i];\n//             }\n//             else {\n//                 result = result + \" \" + op + \"\\n\" + exprList[i]\n//             }\n//            rhsFinal.push(i); \n//         }\n        \n//         if (i === exprList.length - 1) {\n//             if (lhsFinal.length === 0) {\n//                 result = \"true \" + result\n//             }\n//             if (rhsFinal.length === 0) {\n//                 result = result + \" =>\\nfalse\"\n//             }\n//         }\n//     }\n//     return result;\n// }\n\n// function negate(expr) {\n//     let compOp = getCompOp(expr);\n//     if (compOp === \"not\"){\n//         return compOp + \" \" + expr\n//     }\n//     return expr.replace(compOp, negateMap[compOp]);\n// }\n\n// function getCompOp(expr: string) {\n//     let keys = Object.keys(negateMap);\n//     for (let i = 0; i < keys.length; i++){\n//         if (expr.includes(keys[i])){\n//             return keys[i];\n//         } \n//     }\n    \n//     return \"not\";\n// }\n\n// export function getOp(expr) {\n//     for (let i = 0; i < logSym.length; i++) {\n//         if (expr.includes(logSym[i])) return logSym[i];\n//     }\n// }\n\n// export function getIndexOfLiteral(exprList, literal){\n//     for (let i = 0; i < exprList.length; i++){\n//         if (literal === exprList[i] || literal === negate(exprList[i])){\n//             return i;            \n//         }\n//     }\n//     return -1;\n// }\n\nexport function getCleanExprList(expr: string, sep: string): string[] {\n    let exprList = expr.split(sep);\n    let resultExprList:string[] = [];\n    for (let i = 0; i < exprList.length; i++){\n        if (exprList[i] !== \"\") {\n            resultExprList.push(exprList[i].trim());\n        }\n    }\n    \n    return resultExprList;\n}\n\n// export function getVariables(literal) {\n//     let regex = /([a-zA-Z])+/g;\n//     return literal.match(regex);\n// }\n\n// export function getProcesses(literal) {\n//     let regex = /(\\[[0-9]+\\])/g;\n//     return literal.match(regex);\n// }\n\n// export function getProcessVariables(literal) {\n//     let regex = /([a-zA-Z]+\\[[0-9]+\\])/g;\n//     return literal.match(regex);\n// }\n\n// export function cleanExprOperators(expr) {\n//     for (let i = 0; i < logSym.length; i++){\n//        expr = expr.replace(logSym[i], \"\"); \n//     }\n//     return expr;\n// }\n\n// export function getVarIndices(varList: string[], exprList: string[]) {\n//     let result:number[] = [];\n//     for (let i = 0; i < varList.length; i++){\n//         for (let j = 0; j < exprList.length; j++){\n//             if (exprList[j].includes(varList[i])){\n//                 result.push(j);\n//             }\n//         }\n//     }\n//     return result;\n// }\n\n\nexport function getProblemName(fileName: string): any {\n    let regex = /.*.smt2/\n    return fileName.match(regex);\n}\n","// @ts-nocheck\n\nimport { Node, Edge } from 'vis';\nimport { assert } from \"./util\";\nimport {parse, isSExpNode, SExp, SExpNode} from './uber-s-exify';\nimport {negateMap} from \"./readable\";\nconst _ = require(\"lodash\");\n\nconst NULL_IDX = -100;\n\nexport interface ProseTransformation{\n    humanReadableAst: string,\n    xmlAst: string\n}\n\n\nexport class ASTNode{\n    nodeID: number;\n    token: string;\n    shouldBreak: number;\n    shouldInBracket: number;\n    parentID: number;\n    children: number[];\n    transformers = [];\n    startLine: number;\n    endLine: number;\n    startOffset: number;\n    endOffset: number;\n\n    constructor(nodeID: number, token: string, parentID: number, children: number[]){ \n        this.nodeID = nodeID;\n        this.token = token;\n        this.shouldBreak = 0;\n        this.shouldInBracket = 1;\n        this.parentID = parentID;\n        this.children = children;\n        this.startLine = -1;\n        this.endLine = -1;\n        this.startOffset = -1;\n        this.endOffset = -1;\n    }\n\n    updateRange(node: SExpNode){\n        this.startLine = node.startLine;\n        this.startOffset = node.startOffset;\n        this.endLine = node.endLine;\n        this.endOffset = node.endOffset;\n    }\n\n}\n\nfunction isOpt(lst: SExp|SExpNode){\n    const optList = [\"+\", \"-\", \"*\", \"/\",\n                     \">\", \"<\", \">=\", \"<=\", \"=\",\n                     \"and\", \"or\", \"not\", \"=>\",\n                     \"assert\",\n                     \"declare-datatypes\",\n                     \"forall\", \"exists\", \"define\",\n                     \"select\", \"store\"];\n\n    if(Array.isArray(lst)){\n        return false;\n    }\n    return optList.indexOf(lst.token)>-1;\n}\n\nexport interface Transformer{\n    action: string;\n    condition: string;\n    params: {};\n}\n\nexport class ASTTransformer extends Object{\n    run(nodes: number[], ast: AST, t: Transformer): [boolean, AST]{\n        if(t.action!==\"runStack\"){\n            return this[t.action](nodes, ast, t.params, t.condition);\n        }\n        return [false, ast];\n    }\n\n    runStack(ast: AST, tStack: Transformer[]): AST{\n        let new_ast = _.cloneDeep(ast);\n        //loop over all transformer\n        let t_index = 0;\n        while(t_index < tStack.length){\n            //apply the transformer to all the node if possible.\n            let dirty = true;\n\n            for(var node of new_ast.nodeList){\n                if(node.nodeID === NULL_IDX){\n                    //null node\n                    continue;\n                }\n                [dirty, new_ast] = this.run([node.nodeID], new_ast, tStack[t_index]);\n                if(dirty){\n                    break;\n                }\n            }\n            //only move to the next transformer if reach fixpoint (dirty = false)\n            if(!dirty){\n                t_index++;\n            }\n        }\n        return new_ast;\n    }\n\n    getCondition(action: string, nodes: number[], ast: AST): string{\n        let node = ast.nodeList[nodes[nodes.length - 1]];\n        let condition = \"true\";\n        switch(action){\n            case \"move\":{\n                const current_token = node.token;\n                condition = `node.token === ${current_token}`;\n                break;\n            }\n            case \"changeBreak\":{\n                const current_break = node.shouldBreak;\n                const node_depth = ast.nodeDepth(node);\n                condition = `ast.nodeDepth(node) === ${node_depth} && node.shouldBreak === ${current_break}`;\n                break;\n            }\n            case \"changeBracket\":{\n                const current_in_bracket = node.shouldInBracket ;\n                const node_depth = ast.nodeDepth(node);\n                condition = `ast.nodeDepth(node) === ${node_depth} && node.shouldInBracket === ${current_in_bracket}`;\n                break;\n            }\n            case \"squashNegation\":{\n                condition = \"true\";\n                break;\n            }\n            case \"replace\":{\n                condition = \"true\";\n                break;\n            }\n            default:{\n                const current_token = node.token;\n                const node_depth = ast.nodeDepth(node);\n                condition = `node.token === \"${current_token}\" && ast.nodeDepth(node) === ${node_depth}`;\n                break;\n            }\n        }\n        return condition;\n    }\n\n    move(nodes: number[], ast: AST, params: {}, condition: string ): [boolean, AST]{\n        /*\n          move an AST node to the left or to the right\n          E.g: moveLeft(\"+ x y z\", \"z\") -> \"+ x z y\"\n         */\n        let node = ast.nodeList[nodes[nodes.length - 1]];\n        const movable = [\"+\", \"*\", \"=\", \"and\", \"or\"];\n        let cloned_ast = _.cloneDeep(ast);\n\n        let dirty = false;\n        if(eval(condition)){\n            let parent = cloned_ast.nodeList[node.parentID];\n            assert('direction' in params);\n            assert(movable.indexOf(parent.token)!==-1, \"The parent node doesnt support reordering.\");//only can move stuff under some opt\n            let siblings = parent.children;\n\n            const nodePosition = siblings.indexOf(node.nodeID);\n\n            switch(params[\"direction\"]){\n                case \"l\":{\n                    if(nodePosition>0){\n                        //ES6 magic\n                        [siblings[nodePosition], siblings[nodePosition-1]] = [siblings[nodePosition-1], siblings[nodePosition]];\n                        dirty = true;\n                    }\n                    break;\n                }\n                case \"r\":{\n                    if(nodePosition<siblings.length-1){\n                        //ES6 magic\n                        [siblings[nodePosition], siblings[nodePosition+1]] = [siblings[nodePosition+1], siblings[nodePosition]];\n                        dirty = true;\n                    }\n                    break;\n                }\n                default:\n                    break;\n            }\n            cloned_ast.buildVis();\n        }\n        return [dirty, cloned_ast];\n    }\n\n    flipCmp(nodes: number[], ast: AST, params: {}, condition: string ): [boolean, AST]{\n        /*\n          flip a comparison node\n          E.g: flipCmp(\"> x y\") -> \"<= y x\"\n         */\n        let node = ast.nodeList[nodes[nodes.length - 1]];\n        let cloned_ast = _.cloneDeep(ast);\n        let dirty = false;\n        if(eval(condition)){\n            let new_node : ASTNode;\n            switch(node.token){\n                case \"=\":{\n                    new_node = new ASTNode(node.nodeID, \"=\", node.parentID, [node.children[1], node.children[0]]);\n                    dirty = true;\n                    break;\n                }\n                case \"<\":{\n                    new_node = new ASTNode(node.nodeID, \">\", node.parentID, [node.children[1], node.children[0]]);\n                    dirty = true;\n                    break;\n                }\n                case \">\":{\n                    new_node = new ASTNode(node.nodeID, \"<\", node.parentID, [node.children[1], node.children[0]]);\n                    dirty = true;\n                    break;\n                }\n                case \">=\":{\n                    new_node = new ASTNode(node.nodeID, \"<=\", node.parentID, [node.children[1], node.children[0]]);\n                    dirty = true;\n                    break;\n                }\n                case \"<=\":{\n                    new_node = new ASTNode(node.nodeID, \">=\", node.parentID, [node.children[1], node.children[0]]);\n                    dirty = true;\n                    break;\n                }\n                default:\n                    new_node = node;\n            }\n            cloned_ast.nodeList[node.nodeID] = new_node;\n            cloned_ast.buildVis();\n        }\n        return [dirty, cloned_ast];\n    }\n\n    toImp(nodes: number[], ast: AST, params: {}, condition: string ): [boolean, AST]{\n        /*\n          Convert (or X Y Z T) to (and(~X ~Y) => (or Z T))\n\n        */\n        if(nodes.length === 0){\n            return [false, _.cloneDeep(ast)];\n        }\n        \n        let node = ast.nodeList[nodes[nodes.length - 1]];\n        let cloned_ast = _.cloneDeep(ast);\n        let cloned_node = cloned_ast.nodeList[node.nodeID];\n        let dirty = false;\n        if(eval(condition)){\n            //get the `or` node\n            let parent = cloned_ast.nodeList[cloned_node.parentID];\n\n            if(!parent || parent.token!==\"or\"){\n                return [false, cloned_ast];\n            }\n            // For an implication X => Y, X is the head, Y is the tail\n            let headChildren = new Array<number>();\n            let tailChildren = new Array<number>();\n            let newHead: ASTNode;\n            let newTail: ASTNode;\n            for(var cID of parent.children){\n                if(nodes.includes(cID)){\n                    // console.log(\"c negate\", cloned_ast.nodeList[cID].negate());\n                    let new_cID = cloned_ast.negateNode(cID);\n                    headChildren.push(new_cID);\n                }else{\n                    tailChildren.push(cID);\n                }\n            }\n\n\n            //build the head (X in X => Y)\n            if(headChildren.length>1){\n                newHead = new ASTNode(cloned_ast.nodeList.length, \"and\", parent.nodeID, headChildren);\n                cloned_ast.nodeList.push(newHead);\n                for(var childID of headChildren){\n                    cloned_ast.nodeList[childID].parentID = newHead.nodeID;\n                }\n            }else{\n                newHead = cloned_ast.nodeList[headChildren[0]];\n            }\n\n\n            //build the tail (Y in X => Y)\n            if(tailChildren.length > 1){\n                newTail = new ASTNode(cloned_ast.nodeList.length, \"or\", parent.nodeID, tailChildren);\n                cloned_ast.nodeList.push(newTail);\n                for(var childID of tailChildren){\n                    cloned_ast.nodeList[childID].parentID = newTail.nodeID;\n                }\n            }else{\n                newTail = cloned_ast.nodeList[tailChildren[0]];\n            }\n            //change the `or` node into the `=>` node\n            parent.token = \"=>\";\n            parent.children = [newHead.nodeID, newTail.nodeID];\n\n            cloned_ast.buildVis();\n            dirty = true;\n        }\n        return [dirty, cloned_ast];\n    } \n\n    replace(nodes: number[], ast: AST, params: {}, condition: string ): [boolean, AST]{\n        let node = ast.nodeList[_.last(nodes)];\n        let cloned_ast = _.cloneDeep(ast);\n        let dirty = false;\n        let source = params[\"source\"]\n        if(eval(condition)){\n            if(params[\"regex\"]){\n                source = new RegExp(params[\"source\"])\n            }\n\n\n            for(var cloned_node of cloned_ast.nodeList){\n                let old_token = cloned_node.token\n                cloned_node.token = old_token.replace(source, params[\"target\"]);\n                if(cloned_node.token !== old_token){\n                    dirty = true;\n                }\n            }\n\n            if(dirty){\n                cloned_ast.buildVis();\n            }\n        }\n\n        return [dirty, cloned_ast];\n    }\n    changeBreak(nodes: number[], ast: AST, params:{}, condition: string ): [boolean,AST]{\n        let node = ast.nodeList[_.last(nodes)];\n        let cloned_ast = _.cloneDeep(ast);\n        if(eval(condition)){\n            cloned_ast.nodeList[node.nodeID].shouldBreak ^= 1;\n            cloned_ast.buildVis();\n            return [true, cloned_ast];\n        }\n        return [false, cloned_ast];\n    }\n    changeBracket(nodes: number[], ast: AST, params:{}, condition: string ): [boolean, AST]{\n        let node = ast.nodeList[_.last(nodes)];\n        let cloned_ast = _.cloneDeep(ast);\n        if(eval(condition)){\n            cloned_ast.nodeList[node.nodeID].shouldInBracket ^= 1;\n            cloned_ast.buildVis();\n            return [true, cloned_ast];\n        }\n        return [false, cloned_ast];\n    }\n}\n\n\nexport class AST {\n    nodeList = new Array<ASTNode>();\n    visNodes = new Array<Node>();\n    visEdges = new Array<Edge>();\n\n    null_node = new ASTNode(NULL_IDX, \"null-node\", NULL_IDX, []);\n    constructor(formula: string){\n        this.lstToAST(-1, parse(formula));\n        this.buildVis();\n    }\n\n    nodeDepth(node: ASTNode): number{\n        if (node.parentID===-1){\n            return 0;\n        }\n\n        return this.nodeDepth(this.nodeList[node.parentID])+1;\n    }\n    negateNode(nodeID: number): number{\n        let node = this.getNode(nodeID);\n        //if node is `not`, squash it\n        if(node.token===\"not\"){\n            /*\n              if a node is not->formula\n              replace it with ``formula``\n             */\n            let child = this.getNode(node.children[0]);\n            this.nodeList[nodeID] = new ASTNode(node.nodeID, child.token, node.parentID, child.children);\n            //point all child to the new parent\n            for(var cID of child.children){\n                this.getNode(cID).parentID = node.nodeID;\n            }\n\n            this.deleteNode(child.nodeID);\n            return node.nodeID;\n        }\n        //negate using negateMap if operator is in negate map\n        if(node.token in negateMap){\n            this.nodeList[nodeID] = new ASTNode(node.nodeID, negateMap[node.token], node.parentID, node.children);\n            return node.nodeID;\n        }\n        //negate a normal node\n        let new_node = new ASTNode(this.nodeList.length, `not`, node.parentID, [nodeID]);\n        console.log(\"new node\", new_node);\n        node.parentID = new_node.nodeID;\n        this.nodeList.push(new_node);\n        return new_node.nodeID;\n    }\n\n    getNode(nodeID: number): ASTNode{\n        return this.nodeList[nodeID];\n    }\n\n    deleteNode(nodeID: number): void{\n        this.nodeList[nodeID] = this.null_node;\n    }\n\n    findNode(line: number, character: number): ASTNode| null{\n        for(var node of this.nodeList){\n            if(node.startLine<=line &&\n                node.endLine>=line &&\n                node.startOffset<=character &&\n                node.endOffset>=character)\n                return node;\n        }\n        return null;\n    }\n\n\n    lstToAST(parentID: number, lst: SExp|SExpNode): number{\n        // console.log(lst);\n        const nodeID = this.nodeList.length;\n        if(isSExpNode(lst)){\n            const node = new ASTNode(nodeID, lst.token, parentID, []);\n            node.updateRange(lst); \n            this.nodeList.push(node);\n            return nodeID;\n        }\n        //if is an opt\n        if(isOpt(lst[0])){\n            let node = new ASTNode(nodeID, (lst[0] as SExpNode).token, parentID, []);\n            node.updateRange(lst[0] as SExpNode);\n            this.nodeList.push(node);\n\n            for(var _i=1; _i < lst.length; _i++){\n\n                node.children.push(this.lstToAST(nodeID, lst[_i]));\n            }\n\n            return nodeID;\n        }else{\n            //is a list\n            // console.log(lst[0], lst[0] as SExpNode, (lst[0] as SExpNode).token);\n            // let node = new ASTNode(nodeID, (lst[0] as SExpNode).token, parentID, []); \n            let node = new ASTNode(nodeID, \"list\", parentID, []);\n            //TODO: fix the update range. it shouldnt be a problem with the visualizer, but only a problem for the VSCode extension\n            // node.updateRange(lst);\n            this.nodeList.push(node);\n\n            for(var _i=0; _i < lst.length; _i++){\n                node.children.push(this.lstToAST(nodeID, lst[_i]));\n            }\n\n            return nodeID;\n        }\n\n        //\n    }\n\n    buildVis(){\n        this.visNodes = [];\n        this.visEdges = [];\n\n        for(const node of this.nodeList){\n            if(node.nodeID!==NULL_IDX){\n                let label = node.token;\n\n                if(node.shouldInBracket){\n                    label = '(' + label + ')';\n                }\n                this.visNodes.push({\n                    id: node.nodeID,\n                    label: label + ((node.shouldBreak)?'\\u21B5':''),\n                    shape: \"box\",\n                    size: 20,\n                })\n                for(const childID of node.children){\n                    this.visEdges.push({\n                        id: this.visEdges.length,\n                        from: node.nodeID,\n                        to: childID\n                    })\n                }\n            }\n        }\n    }\n\n\n\n    toString(selectedID: number, node: ASTNode): string{\n        return this.toHTML(selectedID, node);\n    }\n    toHTML(selectedID: number, node: ASTNode, add_highlight = true): string{\n        let result: string;\n        if(node.children.length === 0){\n            result = node.token\n        }else{\n            let children = new Array<string>();\n            if(node.token !== 'list'){ children.push(node.token);  }\n\n            for(const childID of node.children){\n                children.push(this.toHTML(selectedID, this.nodeList[childID]));\n            }\n            if (children.length === 1 || !node.shouldInBracket){\n                result = children.join(\" \");\n            }else{\n                result = \"(\"+children.join(\" \")+\")\";\n            }\n\n\n        }\n\n        //add highlight\n        if(add_highlight && selectedID === node.nodeID){\n            result = '<span class=\"highlighted\">' + result + '</span>'\n        }\n\n        //add linebreak\n        if(node.shouldBreak){\n            result= '\\n'+ '    '.repeat(this.nodeDepth(node)) +  result ;\n        }\n\n        return result\n    }\n}\n\n\n","import * as React from 'react';\n\nimport '../styles/Slider.css';\n\n\nconst icons = require('../resources/icons/all.svg') as string;\n\ntype Props = {\n  historyLength: number,\n  currentTime: number,\n  onCurrentTimeChange: (newState: number) => void,\n  enabled: boolean\n};\nexport default class Slider extends React.Component<Props, {}> {\n\n  private slider = React.createRef<HTMLInputElement>();\n\n  render() {\n    const {historyLength, currentTime, onCurrentTimeChange} = this.props;\n      console.log(\"historyLength\", historyLength)\n    return (\n      <section className=\"component-slider\">\n\n        <button disabled={!this.props.enabled || currentTime <= 0} onClick={() => onCurrentTimeChange(currentTime - 1)}>\n          <svg viewBox=\"0 0 24 24\" className=\"icon\">\n            <use xlinkHref={`${icons}#history-back`}/>\n          </svg>\n        </button>\n\n        <section className=\"wrapper\">\n          <input\n            ref={this.slider}\n            type=\"range\"\n            min={0}\n            max={historyLength}\n            value={currentTime}\n            disabled={!this.props.enabled}\n            onChange={() => onCurrentTimeChange(this.getSliderValue())}\n          />\n        </section>\n\n        <button disabled={!this.props.enabled || currentTime >= historyLength} onClick={() => onCurrentTimeChange(currentTime + 1)}>\n          <svg viewBox=\"0 0 24 24\" className=\"icon\">\n            <use xlinkHref={`${icons}#history-forward`}/>\n          </svg>\n        </button>\n\n      </section>\n    );\n  }\n\n  // HELPERS ///////////////////////////////////////////////////////////////////////////////////////////////////////////\n\n  getSliderValue(): number {\n    return this.slider.current ? parseInt(this.slider.current.value, 10) : 0;\n  }\n\n}\n","import { toReadable } from \"./readable\";\nimport { IExprItem, ITree, IPobLemmasMap, IExprMap} from \"./datatypes\";\nconst styleTemplates = require('../resources/styleTemplates');\nconst _ = require(\"lodash\");\nexport const lemmaColours = [\n    \"#e6194B\",\n    \"#f58231\",\n    \"#3cb44b\",\n    \"#42d4f4\",\n    \"#000075\",\n    \"#469990\",\n    \"#911eb4\",\n    \"#f032e6\",\n    \"#fabebe\",\n    \"#800000\",\n];\n\nexport const ptColours = [\n    \"#e6194B\",\n    \"#f58231\",\n    \"#3cb44b\",\n    \"#42d4f4\",\n    \"#000075\",\n    \"#469990\",\n    \"#911eb4\",\n    \"#f032e6\",\n    \"#fabebe\",\n    \"#800000\",\n];\n\n\n\n//BUILD POB LEMMAS MAP////////////////////\nexport function buildPobLemmasMap(tree: ITree, varList: string[]): IPobLemmasMap{\n    // construct PobExprID->a list of lemmas\n    let PobLemmasMap:IPobLemmasMap = {};\n    for (const nodeID in tree) {\n        let node = tree[nodeID];\n        if (node.event_type !== \"EType.ADD_LEM\") {\n            continue\n        }\n        const lemmaExprID = node.exprID;\n        const level = node.level===\"oo\"?Number.MAX_SAFE_INTEGER:parseInt(node.level);\n        const pobID = node.pobID;\n        if (!(pobID in PobLemmasMap)) {\n            PobLemmasMap[pobID] =  [];\n        }\n        //traverse the list, if lemmaExprID is already in the list, update its min max\n        let existPrevLemma = false;\n        for (const lemma of PobLemmasMap[pobID]) {\n            if (lemma[0] === lemmaExprID) {\n                existPrevLemma = true;\n                let prev_min = lemma[1];\n                let prev_max = lemma[2];\n\n                if (level > prev_max) {\n                    lemma[2] = level\n                }\n                if (level < prev_min) {\n                    lemma[1] = level\n                }\n                break\n            }\n        }\n\n        if (!existPrevLemma) {\n            PobLemmasMap[node.pobID].push([lemmaExprID, level, level])\n        }\n    }\n    return PobLemmasMap\n}\n\n\n//BUILD EXPR MAP////////////////////////\nexport function buildExprMap(tree: any, varList: string[]): IExprMap{\n    let ExprMap = {} as IExprMap;\n    for (const nodeID in tree) {\n        const node = tree[nodeID];\n\n        let readable = toReadable(node[\"expr\"]);\n        // console.log(node[\"expr\"], readable);\n        const exprMapItem: IExprItem = {\n            exprType: \"UNK\",\n            raw: node.expr,\n            editedRaw: node.expr,\n            editedReadable: readable\n        };\n        ExprMap[node[\"exprID\"]] = exprMapItem;\n    }\n    return ExprMap;\n}\n\nexport function PobVisLayout(tree: ITree): ITree{\n    let treeCloned = _.cloneDeep(tree);\n\n    for (const nodeID in treeCloned){\n        let node = treeCloned[nodeID];\n        if(node.event_type !== \"EType.EXP_POB\"){\n            node.to_be_vis = false;\n            continue\n        }\n\n        let parent = treeCloned[node.parent];\n        let siblings = parent.children;\n        let same_as_sibl = false;\n        let identical_sibl;\n        for(const siblID of siblings){\n\n            const sibl = treeCloned[siblID];\n            if(sibl.nodeID !== node.nodeID && sibl.exprID === node.exprID){\n                same_as_sibl = true;\n                identical_sibl = sibl;\n                break\n            }\n\n        }\n        if(same_as_sibl){\n            // I will disappear\n            node.to_be_vis = false;\n\n            // point all my children to my sibling\n            for(const childID of node.children){\n                treeCloned[childID].parent = identical_sibl.nodeID;\n                identical_sibl.children.push(childID)\n            }\n            //change my parent's children\n            let new_children = new Array<number>();\n            for (const childID of siblings){\n                if(childID !== node.nodeID){\n                    new_children.push(childID)\n                }\n            }\n            parent.children = new_children\n        }\n    }\n\n    return treeCloned\n}\n\nexport function toVisNode(node: any, style: string, nodeSelection: number[], finalInv: number, color:number = -1): any {\n    const styleData = styleTemplates[style];\n    const isMarked = nodeSelection.includes(node.nodeID);\n\n    let finalColor  = {\n        border : isMarked ? styleData.markedStyle.border : styleData.defaultStyle.border,\n            background : isMarked ? styleData.markedStyle.background : styleData.defaultStyle.background,\n            highlight : {\n            border : styleData.highlightStyle.border,\n                background : styleData.highlightStyle.background\n        }\n    };\n    if (style === \"lemma\" && color !== -1) {\n        finalColor = {\n            border: lemmaColours[color],\n            background: lemmaColours[color],\n            highlight: {\n                border: lemmaColours[color],\n                background: lemmaColours[color]\n            }\n        }\n    }\n    if (style === \"activated\" && color !== -1) {\n        finalColor = {\n            border: lemmaColours[color],\n            background: lemmaColours[color],\n            highlight: {\n                border: ptColours[color],\n                background: ptColours[color]\n            }\n        }\n    }\n\n    return {\n        id: node.nodeID,\n        shape: finalInv > 0 ? finalInv > 1 ? \"hexagon\" : \"star\" : styleData.shape,\n        fixed: true,\n        color: finalColor\n    };\n}\n\n\nexport function toVisEdge(edgeId: number, parentNodeId: number, nodeID: number, hidden: boolean) {\n    return {\n        id: edgeId,\n        arrows: \"to\",\n        color: {\n            color: \"#dddddd\",\n            highlight: \"#f8cfc1\",\n        },\n        from: parentNodeId,\n        to: nodeID,\n        smooth: false,\n        hidden: hidden\n    }\n}\n","import * as React from 'react';\nimport { DataSet, Network, Node, Edge } from 'vis'\n\nimport '../styles/Graph.css'\nimport { assert } from '../helpers/util';\nimport { PobVisLayout, toVisEdge, toVisNode, ptColours} from \"../helpers/network\";\nimport {findClosestNode} from \"../helpers/navigation\";\nimport { ITree, IPobLemmasMap } from '../helpers/datatypes';\n\n\ntype Props = {\n    tree: ITree,\n    onNodeSelectionChange: (selection: number[]) => void,\n    nodeSelection: number[],\n    currentTime: number,\n    layout: string,\n    PobLemmasMap: IPobLemmasMap,\n};\n\nexport default class Graph extends React.Component<Props, {}> {\n    network: Network | null = null;\n    networkNodes = new DataSet<Node>([]);\n    networkEdges = new DataSet<Edge>([]);\n    graphContainer = React.createRef<HTMLDivElement>();\n    boundKeyupHandler =  this.keyupHandler.bind(this);\n   \n    componentDidMount() {\n        this.generateNetwork();\n        this.updateNetwork(false, this.props.layout);\n        this.network!.fit();\n        window.addEventListener(\"keyup\", this.boundKeyupHandler, false);\n    }\n\n    componentWillUnmount() {\n        window.removeEventListener(\"keyup\", this.boundKeyupHandler, false);\n    }\n\n    componentDidUpdate(prevProps: Props) {\n        this.updateNetwork(false, this.props.layout);\n    }\n\n    render() {\n        return (\n            <section className= \"component-graph\" ref = { this.graphContainer } >\n                <canvas/>\n            </section>\n        );\n    }\n\n    generateNetwork() {\n        console.log(\"I am Graph. I receive:\", this.props)\n        assert(this.graphContainer.current);\n        assert(!this.network); // should only be called once\n\n        this.network = new Network(this.graphContainer.current!, {\n            nodes: this.networkNodes,\n            edges: this.networkEdges\n        }, {\n            physics: false,\n            interaction: {\n                multiselect: false\n            },layout: {\n                hierarchical: {\n                    direction: 'UD',\n                    sortMethod: 'directed',\n                },\n            }\n\n        });\n\n        this.network.on('click', async (clickEvent) => {\n            if (clickEvent.nodes.length > 0) {\n\n                assert(clickEvent.nodes.length === 1);\n                const clickedNodeId = clickEvent.nodes[0];\n                console.log(\"clickEvent.nodes\", clickEvent.nodes);\n                console.log(\"clickedNodeId\", this.props.tree[clickedNodeId]);\n                this.props.onNodeSelectionChange(clickEvent.nodes);\n            } else {\n                this.props.onNodeSelectionChange([]);\n            }\n        });\n\n    }\n\n    // updates the network displayed by Vis.js\n    updateNetwork(onlyUpdateStyles: boolean, layout: string) {\n        if (layout === \"SatVis\"){\n            this.visLayout(this.props.tree);\n        } else if(layout === \"PobVis\"){\n            const PobVisTree =  PobVisLayout(this.props.tree);\n            this.visLayout(PobVisTree);\n        }\n    }\n\n    visLayout(ATree: ITree ){\n        let nodeHasBeenSelected = this.props.nodeSelection.length > 0;\n        let currentNodeExprID = Number.MIN_SAFE_INTEGER;\n        let InvList:{id: number, start: number, end: number}[] = [];\n\n        let ptColorMap: {[ptName:string]: number} = {};\n\n        if(nodeHasBeenSelected) {\n            currentNodeExprID = ATree[this.props.nodeSelection[0]].exprID;\n            InvList = currentNodeExprID in this.props.PobLemmasMap ? this.props.PobLemmasMap[currentNodeExprID].map((exprInfo ) => {\n                return {\n                    id: exprInfo[0],\n                    start: exprInfo[1],\n                    end: exprInfo[2]\n                }\n            }): [];\n        }\n        const visNodes = new Array<Node>();\n        const visEdges = new Array<Edge>();\n        let edgeId = 0;\n\n\n        for (const nodeID in ATree){\n            let node = ATree[nodeID];\n            let nodeColor:number = -1;\n            if(node.pt_name in ptColorMap){\n                nodeColor = ptColorMap[node.pt_name]%10;\n            }else{\n                ptColorMap[node.pt_name] = Object.keys(ptColorMap).length;\n                nodeColor = ptColorMap[node.pt_name]%10;\n            }\n            const level = node.level===\"oo\"?Number.MAX_SAFE_INTEGER:parseInt(node.level);\n            if(!node.to_be_vis) continue;\n            let visNode;\n            let FinalInvList = node.exprID in this.props.PobLemmasMap ? this.props.PobLemmasMap[node.exprID].filter(exprInfo => exprInfo[2] === Number.MAX_SAFE_INTEGER) : [];\n            let finalInv = (FinalInvList.filter(x => x[1] === level || x[1] === Number.MAX_SAFE_INTEGER).length);\n            //Prioritize related nodes\n            if (node.exprID === currentNodeExprID) {\n                visNode = toVisNode(node, \"sameExprID\", this.props.nodeSelection, finalInv, nodeColor)\n            } else if (InvList.length > 0 && InvList.filter(exprInfo =>exprInfo.id === node.exprID).length > 0){\n                visNode = toVisNode(node, \"lemma\", this.props.nodeSelection, finalInv, InvList.findIndex(x => x.id === node.exprID) % 10);\n            } else if (node.nodeID > this.props.currentTime) {\n                visNode = toVisNode(node, \"activated\", this.props.nodeSelection, finalInv, nodeColor);\n            } else {\n                visNode = toVisNode(node, \"passive\", this.props.nodeSelection, finalInv);\n            }\n\n            visNodes.push(visNode);\n            const visEdge = toVisEdge(edgeId, node.parent, node.nodeID, false);\n            visEdges.push(visEdge);\n            edgeId++;\n        }\n        this.networkNodes.clear();\n        this.networkNodes.add(visNodes);\n        this.networkEdges.clear();\n        this.networkEdges.add(visEdges);\n\n    }\n\n    keyupHandler(event: KeyboardEvent) {\n        if(this.props.nodeSelection.length !== 1 ) return;\n        const selected_node = this.props.nodeSelection[0];\n        let closest_node = findClosestNode(selected_node, event.key, this.network!);\n        this.props.onNodeSelectionChange([closest_node]);\n    }\n}\n","// @ts-nocheck\nimport {assert} from \"./util\";\n\nexport function findClosestNode(nodeId: number, direction, network){\n    assert(network);\n    assert(\"body\" in network!);\n    const currentNode = network!.body.nodes[nodeId];\n    let closestNode = currentNode.id;\n    let min_distance = Number.MAX_SAFE_INTEGER;\n\n    if (direction === \"ArrowLeft\"){\n        for(const idx in network!.body.nodes){\n            const node = network!.body.nodes[idx];\n            let distance = currentNode.x - node.x;\n            if (node.y !== currentNode.y) {continue}\n            if (distance > 0 && distance < min_distance){\n                closestNode = node.id;\n                min_distance = distance;\n            }\n        }\n    }\n    else if (direction === \"ArrowRight\"){\n        for (let idx in network!.body.nodes){\n            const node = network!.body.nodes[idx];\n            let distance = node.x - currentNode.x;\n            if (node.y !== currentNode.y) {continue}\n            if (distance > 0 && distance < min_distance){\n                closestNode = node.id;\n                min_distance = distance;\n            }\n        }\n    }\n    else if (direction === \"ArrowDown\" && currentNode.edges.length >= 2){\n        closestNode = currentNode.edges.filter(edge => edge.fromId === currentNode.id)[0].toId;\n    }\n    else if (direction === \"ArrowUp\" && currentNode.edges.length >= 1){\n        let closestNodes = currentNode.edges.filter(edge => edge.toId === currentNode.id);\n        if (closestNodes.length > 0){\n            closestNode = closestNodes[0].fromId;\n        }\n    }\n    return closestNode;\n\n}\n","import * as React from 'react';\n\nimport Slider from './Slider';\nimport Graph from './Graph';\nimport ReactModal from 'react-modal';\nReactModal.setAppElement('#root');\n\ntype Props = {\n    appState: \"loaded\" | \"loaded iterative\" | \"waiting\" | \"layouting\" | \"error\",\n    messageQ: { [channel: string]: string[] },\n    tree: any,\n    runCmd: string,\n    onNodeSelectionChange: (selection: number[]) => void,\n    nodeSelection: number[],\n    historyLength: number,\n    currentTime: number,\n    onCurrentTimeChange: (newState: number) => void,\n    layout: string,\n    PobLemmasMap: any,\n    solvingCompleted: boolean,\n    onPushToMessageQ: (channel: string, msg: string) => void,\n};\nexport default class Main extends React.Component<Props, {}> {\n    render() {\n        let messageArea: JSX.Element[] = [];\n        Object.keys(this.props.messageQ).forEach((key)=>{\n            messageArea.push(\n                <div className=\"message-wrapper\" key={\"message-\" + key}>\n                    <span>{key}</span>\n                    <br/>\n                    {this.props.messageQ[key][this.props.messageQ[key].length - 1]}\n                </div>)\n        })\n\n\n        return (\n            <main>\n                <div>{messageArea}</div>\n                <input type=\"text\" value={this.props.runCmd} readOnly></input>\n                {this.props.appState ===\"loaded\"?\n                <Graph\n                    tree={this.props.tree}\n                    onNodeSelectionChange={this.props.onNodeSelectionChange}\n                    nodeSelection={this.props.nodeSelection}\n                    currentTime={this.props.currentTime}\n                    layout={this.props.layout}\n                    PobLemmasMap={this.props.PobLemmasMap}\n                />:\"\"}\n                {this.props.appState === \"loaded\"?\n                <Slider\n                    historyLength={this.props.historyLength}\n                    currentTime={this.props.currentTime}\n                    onCurrentTimeChange={this.props.onCurrentTimeChange}\n                    enabled={true}\n                />\n                :\"\"}\n            </main>\n        );\n    }\n\n}\n","import * as React from 'react';\nimport {ChangeEvent} from \"react\";\n\ntype Props = {\n    onApply: (action: string, params: {})=>void,\n}\n\ntype State = {\n    source: string,\n    target: string,\n    regex: boolean\n}\n\n\nclass ReplaceDialog extends React.Component<Props, State> {\n    state = {\n        source: \"\",\n        target: \"\",\n        regex: false,\n    };\n    \n    handleSourceChange(e: ChangeEvent<HTMLInputElement>) {\n        this.setState({\n            source: e.target.value\n        })\n    }\n    handleTargetChange(e: ChangeEvent<HTMLInputElement>) {\n        this.setState({\n            target: e.target.value\n        })\n    }\n\n    handleRegexChange(e: ChangeEvent<HTMLInputElement>) {\n        this.setState({\n            regex: e.target.checked\n        })\n    }\n\n    handleKeyUp(event: React.KeyboardEvent) {\n        event.stopPropagation();\n    }\n    render() {\n        return (\n            <div onKeyUp={this.handleKeyUp}>\n                {`Replace: `}<input type=\"text\" defaultValue=\"\" onChange={this.handleSourceChange.bind(this)} />\n                {` with: `}<input type=\"text\" defaultValue=\"\" onChange={this.handleTargetChange.bind(this)}/>\n                {`\\tRegex?`}\n                <input type=\"checkbox\"\n                       defaultChecked={false}\n                       onChange={this.handleRegexChange.bind(this)} \n                />\n                <button onClick={this.props.onApply.bind(this, \"replace\",\n                                                         {\"source\": this.state.source,\n                                                          \"target\": this.state.target,\n                                                          \"regex\": this.state.regex\n                })}>Replace</button>\n                </div>\n        );\n    }\n\n\n}\n\nexport default ReplaceDialog;\n","import * as React from 'react';\nimport { AST, ASTTransformer, Transformer, ProseTransformation} from \"../helpers/transformers\";\nimport {inOutExample} from \"../helpers/datatypes\";\nimport { assert } from '../helpers/util';\nimport { DataSet, Network, Node, Edge } from 'vis'\nimport ReplaceDialog from './ReplaceDialog'\nconst _ = require(\"lodash\");\ntype Props = {\n    expName: string,\n    input: string,\n    onAddInputOutputExample: (example: inOutExample)=>void,\n    onBlast?: (tStack: Transformer[])=>void| null,\n    isModal: boolean,\n    onTransformExprs?: (t: string)=> Promise<void>,\n    onPushToMessageQ: (channel: string, msg: string)=>void,\n}\ntype State = {\n    selectedNodeIDs: number[],\n    stringRep: string,\n    status: string,\n    possibleTransformations: ProseTransformation[],\n    transformationSelected: string,\n}\n\nclass TreeEditor extends React.Component<Props, State> {\n    state = {\n        selectedNodeIDs: [-1],\n        stringRep: \"\",\n        status: \"\",\n        possibleTransformations: [],\n        transformationSelected: \"\",\n    }\n    network: Network | null = null;\n    networkNodes = new DataSet<Node>([]);\n    networkEdges = new DataSet<Edge>([]);\n    graphContainer = React.createRef<HTMLDivElement>();\n    astStack = new Array<AST>();\n    transformerStack = new Array<Transformer>();\n    transformer = new ASTTransformer();\n    localSelectedNodeIDs = [-1];\n    componentDidMount() {\n        this.generateNetwork();\n        if(this.props.input !== \"()\"){\n            this.astStack = [new AST(this.props.input)];\n            this.redrawAST();\n        }\n    }\n\n    redrawAST(){\n        if(this.astStack[this.astStack.length-1] != null){\n            let ast = this.astStack[this.astStack.length-1];\n            console.log(ast);\n            console.log(\"visNodes\", ast.visNodes);\n            console.log(\"visEdges\", ast.visEdges);\n\n            this.networkEdges.clear();\n            this.networkEdges.add(ast.visEdges);\n            this.networkNodes.clear();\n            this.networkNodes.add(ast.visNodes);\n            /* this.network!.fit(); */\n            this.network!.redraw();\n            console.log(ast.toHTML(_.last(this.state.selectedNodeIDs), ast.nodeList[0]));\n            this.setState({stringRep: ast.toHTML(_.last(this.state.selectedNodeIDs), ast.nodeList[0])});\n        }\n    }\n\n    componentDidUpdate(prevProps: Props){\n        if(prevProps.input !== this.props.input){\n            //new formula. clear everything\n            this.astStack = [new AST(this.props.input)];\n            this.transformerStack = [];\n            this.redrawAST();\n        }\n    }\n\n    generateNetwork() {\n        assert(this.graphContainer.current);\n        assert(!this.network); // should only be called once\n        this.network = new Network(this.graphContainer.current!, {\n            nodes: this.networkNodes,\n            edges: this.networkEdges\n        }, {\n            physics: false,\n            interaction: {\n                multiselect: true\n            },layout: {\n                hierarchical: {\n                    /* direction: 'UD', */\n                    sortMethod: 'directed',\n                },\n            }\n\n        });\n\n        this.network.on('click', async (clickEvent) => {\n            if (clickEvent.nodes.length > 0) {\n                console.log(\"clickEvent.nodes\", clickEvent.nodes);\n                    this.localSelectedNodeIDs = clickEvent.nodes;\n            } else {\n                this.setState({selectedNodeIDs: []});\n            }\n        });\n        \n    }\n\n    updateConditionInputEvent(evt: React.ChangeEvent<HTMLInputElement>, idx: number){\n        this.transformerStack[idx].condition = evt.target.value;\n    }\n    updateParamsInputEvent(evt: React.ChangeEvent<HTMLInputElement>, idx: number){\n        this.transformerStack[idx].params = JSON.parse(evt.target.value);\n    }\n\n    displayTransformers() {\n        const listItems = this.transformerStack.map((t, index) =>{\n            return (\n                <div  key={index} className=\"transformer-wrapper\">\n                    {`If `}\n                    <input style={{display: \"inline-block\", width: \"20rem\"}}\n                           ref=\"condition-${index}\"\n                           type=\"text\"\n                           defaultValue={t.condition}\n                           onChange={evt => this.updateConditionInputEvent(evt, index)}/>\n                    <br/>\n                    {`then run __${t.action}__ with params:`}\n                    <br/>\n                    <input ref=\"params-${index}\" type=\"text\" defaultValue={JSON.stringify(t.params)}\n                           style={{width: \"100%\"}}\n                           onChange={evt => this.updateParamsInputEvent(evt, index)}/>\n                </div>);\n        });\n\n        return listItems;\n    }\n\n    applyStack(){\n        const original_ast = new AST(this.props.input);\n\n        try{\n            this.astStack.push(this.transformer.runStack(original_ast, this.transformerStack));\n            this.transformerStack.push({\"action\": \"runStack\", \"params\": \"\", \"condition\": \"\"});\n            this.redrawAST();\n        }catch(error){\n            this.setState({\"status\": \"Error:\"+error.message});\n        }\n    }\n\n    applyLocal(action: string, params: {}){\n        const currentAST = this.astStack[this.astStack.length - 1];\n        const nodes = this.localSelectedNodeIDs;\n        console.log(params)\n        let t = {\"action\": action, \"params\": params, \"condition\": \"true\"};\n        try{\n            let [dirty, new_ast] = this.transformer.run(nodes, currentAST, t);\n            if(dirty){\n                this.astStack.push(new_ast);\n                //guess the condition\n                t.condition = this.transformer.getCondition(action, nodes, currentAST);\n                this.transformerStack.push(t);\n                this.redrawAST();\n            }\n        }catch(error){\n            this.setState({\"status\": \"Error:\"+error.message});\n        }\n    }\n    undo(){\n        if(this.astStack.length>1){\n            this.astStack.pop();\n            this.transformerStack.pop();\n            this.redrawAST();\n        }\n    }\n\n    addInputOutputExample(){\n        let inputAST = this.astStack[0];\n        let outputAST = this.astStack[this.astStack.length - 1];\n        console.log(\"transformer stack\", this.transformerStack);\n        const inputOutputExample: inOutExample = {\"input\": inputAST.toString(-1, inputAST.nodeList[0]),\n                                                  \"output\": outputAST.toString(-1, outputAST.nodeList[0]),\n                                                  \"tStack\": this.transformerStack,\n        }\n        this.props.onAddInputOutputExample(inputOutputExample);\n    }\n\n\n\n\n    updateTransformationSelected(e: React.ChangeEvent<HTMLInputElement>) {\n        this.setState({\n            transformationSelected: e.target.value\n        })\n    }\n    render() {\n        console.log(\"I'm TreeEditor. I got\", this.props.input);\n        console.log(\"I'm TreeEditor. My possibleTs:\", this.state.possibleTransformations);\n        let tStack = this.displayTransformers();\n        let possibleTs = this.state.possibleTransformations.map((transformation: ProseTransformation,key) => (\n            <div key={key}>\n                <input type=\"radio\" name={\"transformation\"} value={transformation.xmlAst}\n                       onChange={this.updateTransformationSelected!.bind(this)}/>{transformation.humanReadableAst}\n            </div>\n        ))\n\n        return (\n            <div className=\"tree-editor\">\n                <div className=\"editor-options-card\" id=\"graph-container\">\n                    <h4>{this.state.status}</h4>\n                    <div className=\"editor-menu\">\n                        {`Hint: Long click to select multiple nodes`}\n                        <br/>\n                        <button onClick={this.undo.bind(this)}>Undo</button>\n                        <button onClick={this.applyLocal.bind(this, \"flipCmp\", {})}>Flip Cmp</button>\n                        <button onClick={this.applyLocal.bind(this, \"toImp\", {})}>To Imp</button>\n                        <button onClick={this.applyLocal.bind(this, \"move\", {\"direction\": \"l\"})}>Move Left</button>\n                        <button onClick={this.applyLocal.bind(this, \"move\", {\"direction\": \"r\"})}>Move Right</button>\n                        <button onClick={this.applyLocal.bind(this, \"changeBreak\", {})}>\\n?</button>\n                        <button onClick={this.applyLocal.bind(this, \"changeBracket\", {})}>()?</button>\n                        <br/>\n                        <ReplaceDialog\n                            onApply = {this.applyLocal.bind(this)}\n                        />\n                        <br/>\n                        <button onClick={this.addInputOutputExample.bind(this)}>Add to Learn</button>\n                        <pre className=\"editor-string-rep\" dangerouslySetInnerHTML={{ __html: this.state.stringRep }} />\n                    </div>\n                    <div className= \"editor-component-graph\" ref = { this.graphContainer }>\n                        <canvas/>\n                    </div>\n                </div>\n                {this.props.isModal?\"\":\n                <div className=\"editor-options-card\" id=\"transformer-container\">\n                    {/* <h3>Transformer Queue</h3>\n                        <pre>{`\n                        Condition examples:\n                        - apply the transformation for all the node\n                        whose token pass the regex test \"ab+c\"\n                        /ab+c/.test(node.token)\n                        - apply the transformation for all the node\n                        whose token is either x, y, or z\n                        [\"x_\", \"y_\", \"z_\"].includes(node.token)\n                        - apply the transformation for all the node\n                        at depth 2\n                        ast.nodeDepth(node) === 2\n                        `}</pre>\n                        {tStack} */}\n                    {this.props.isModal?\"\"\n                     :<button onClick={this.props.onBlast!.bind(this, this.transformerStack)}>Blast</button>\n                    }\n                    <h3>Possible Transformations</h3>\n                    {possibleTs}\n                    {this.props.isModal?<button onClick={this.props.onTransformExprs!.bind(this, this.state.transformationSelected)}>Apply Everywhere</button>:''}\n                </div>\n                }\n            </div>\n        );\n    }\n}\n\nexport default TreeEditor;\n","import * as React from 'react';\nimport '../styles/Editor.css';\nimport TreeEditor from \"./TreeEditor\";\nimport { Transformer } from \"../helpers/transformers\";\nimport {inOutExample} from \"../helpers/datatypes\";\ntype Props = {\n    inputList: string[],\n    expName: string,\n    onTransformExprs?: (t: string)=> Promise<void>,\n    onAddInputOutputExample: (example: inOutExample)=>void,\n    onPushToMessageQ: (channel: string, msg: string)=>void,\n}\n\ntype State = {\n    selectedInput: string,\n}\nexport class EditorModal extends React.Component<Props, State> {\n    private isChromeOrFirefox = true;\n\n    state = {selectedInput: \"()\"};\n\n    openEditor(input: string){\n        console.log(\"click Apply\")\n\n        console.log(input)\n        /* getValue()!; */\n\n        this.setState({\n            selectedInput: input\n        });\n    }\n\n    getFormulas(input: string): string[]{\n        return input.split(/\\n\\s*\\n/);\n    }\n\n    blast(tStack: Transformer[]){\n        return;\n    }\n    \n    render() {\n        return (\n            <section className=\"formula-editor-modal\">\n                <section className=\"editor\">\n                    <div id=\"editor-wrapper\">\n                        <h2>Original</h2>\n                        {this.props.inputList.map((input, key) => (\n                        <button key={key} onClick={this.openEditor.bind(this, input)} className=\"formula-button\">\n                                <pre>\n                                    {input}\n                                </pre>\n\n                            </button>\n                        ))}\n                    </div>\n                    <TreeEditor\n                        expName ={this.props.expName}\n                        input = {this.state.selectedInput}\n                        onBlast = {this.blast.bind(this)}\n                        isModal = {true}\n                        onTransformExprs = {this.props.onTransformExprs!.bind(this)}\n                        onAddInputOutputExample ={this.props.onAddInputOutputExample.bind(this)}\n                        onPushToMessageQ={this.props.onPushToMessageQ}\n                    /> \n                </section>\n\n            </section>\n        );\n    }\n}\n\n","import * as React from 'react';\n\nimport '../styles/NodeDetails.css';\nimport '../styles/Editor.css';\nimport {toDiff} from \"../helpers/diff\";\nimport {lemmaColours} from \"../helpers/network\";\nimport {getCleanExprList} from \"../helpers/readable\";\nimport Modal from 'react-modal';\nimport { inOutExample, ITreeNode, IExprMap, IPobLemmasMap} from \"../helpers/datatypes\";\nimport {EditorModal} from './EditorModal';\ntype Props = {\n    nodes: ITreeNode[],\n    expName: string\n    PobLemmasMap: IPobLemmasMap,\n    ExprMap: IExprMap,\n    layout: string,\n    expr_layout: \"SMT\" | \"JSON\",\n    relatedExprMap: any,\n    solvingCompleted: boolean,\n    onAddInputOutputExample: (example: inOutExample)=>void,\n    onPushToMessageQ: (channel: string, msg: string)=>void,\n};\n\ntype State = {\n    learningFlag: boolean,\n    learningErrorFlag: boolean,\n    transformationFlag: boolean\n    transformationErrorFlag: boolean\n    possibleTransformations: {humanReadableAst: string, xmlAst: string}[]\n    transformationSelected: string,\n    editorIsOpen: boolean,\n    editorTextInputList: string[],\n}\n\nexport default class NodeDetails extends React.Component<Props, State> {\n\n    keep = false; // hack to skip each second event generated by Sortable\n    constructor(props: Props) {\n        super(props);\n        this.state = {\n            learningFlag: false,\n            learningErrorFlag: false,\n            transformationFlag: false,\n            transformationErrorFlag: false,\n            possibleTransformations: [],\n            transformationSelected: \"\",\n            editorIsOpen: false,\n            editorTextInputList: [],\n        }\n    }\n\n    type_map = {\n        \"EQUALS\": \"= \",\n        \"PLUS\": \"+ \",\n        \"TIMES\": \"* \",\n        \"LT\": \"< \",\n        \"LE\": \"<= \",\n        \"GT\": \"> \",\n        \"GE\": \">= \",\n        \"SYMBOL\": \"\",\n        \"0_REAL_CONSTANT\": \"\"\n    };\n\n    getLemmaExprs(node: ITreeNode): string[]{\n        /*\n        Convert all lemmas under a pob to input to Editor\n        */\n        let lemmaExprs = new Array<string>();\n        if (node.event_type === \"EType.EXP_POB\") {\n            if (node.exprID in this.props.PobLemmasMap){\n                let lemmas = this.props.PobLemmasMap[node.exprID];\n                for (const lemma of lemmas){\n                    const lemmaId = lemma[0];\n                    let expr = this.props.ExprMap[lemmaId];\n                    lemmaExprs.push(expr[\"raw\"]);\n                }\n            }\n        }\n        return lemmaExprs;\n    }\n\n    getLemmaList(node: ITreeNode) {\n        let lemma_list: JSX.Element[] = [];\n        if (node.event_type === \"EType.EXP_POB\") {\n            lemma_list.push(<h2 key =\"lemma-title\"> Lemmas summarization </h2>);\n            if (node.exprID in this.props.PobLemmasMap){\n                let lemmas = this.props.PobLemmasMap[node.exprID];\n                console.log(lemmas);\n                for (const lemma of lemmas){\n                    let colorIndex = lemmas.indexOf(lemma);\n                    let lemmaStyle = {\n                        color: lemmaColours[colorIndex]\n                    };\n                    lemma_list.push(<h3 style={lemmaStyle} key={\"lemma-header-\"+ lemma[0]}>ExprID: {lemma[0]}, From: {lemma[1]} to {lemma[2]}</h3>);\n                    const lemmaId = lemma[0];\n                    let expr = this.props.ExprMap[lemmaId].editedReadable;\n                    if (typeof expr === \"string\"){\n                        if (Object.keys(this.props.relatedExprMap).length > 0){\n                            let keys = Object.keys(this.props.relatedExprMap);\n                            for (let i = 0; i < keys.length; i++){\n                                let exprData = this.props.relatedExprMap[keys[i]];\n                               if (expr === exprData.editedReadable) {\n                                   expr = exprData.editedReadable;\n                                   break;\n                               }\n                            }\n                        }\n                        let exprList = getCleanExprList(expr, \"\\n\");\n                        let implies = -1;\n                        for (let i = 0; i < exprList.length; i++){\n                            if (exprList[i].includes(\"=>\")){\n                                implies = i;\n                                break;\n                            }\n                        }\n                        exprList.forEach((literal, key) => {\n                            let lemmaColour = {\n                                color: \"black\"\n                            }\n                            if (implies !== -1) {\n                                if (key > implies) {\n                                    lemmaColour.color = \"darkblue\";\n                                }\n                            }\n                            lemma_list.push(<pre style={lemmaColour} key={\"lemma-expr-\" + lemma[0] + key}>{literal}</pre>);\n                        });\n                    }\n                    else {\n                        lemma_list.push(<pre>{expr}</pre>);\n                    }\n                }\n            }\n        }\n        return lemma_list;\n    }\n    \n    async transformExprsFromText(t: string) {\n        //wrapper around transformExprs to take in a string instead of reading transformationSelected from state\n        this.setState({\n            transformationSelected: t\n        }, ()=>this.transformExprs());\n    }\n\n    async transformExprs() {\n        this.setState({\n            transformationFlag: false,\n            transformationErrorFlag: false\n        });\n        const response = await fetch(\"http://localhost:5000/spacer/apply_transformation\", {\n            method: 'POST',\n            mode :'cors',\n            headers: {\n                'Accept': 'application/json',\n                'Content-Type': 'application/json'\n            }, body : JSON.stringify({\n                expName: this.props.expName,\n                selectedProgram: this.state.transformationSelected\n            })\n        });\n\n        if (response.status === 200){\n            this.closeModal();\n            let responseData = await response.json();\n            try{\n            let tExprMap = responseData[\"response\"];\n            Object.keys(tExprMap).forEach((key) => {\n                //NHAM: ParseResult is broken in the prose side so we just use raw stuffs in here\n                const idx = parseInt(key);\n                this.props.ExprMap[idx].editedRaw = tExprMap[idx]['raw'];\n                this.props.ExprMap[idx].editedReadable = tExprMap[idx]['raw'];\n            });\n            this.setState({\n                transformationFlag: true,\n            });\n                this.forceUpdate();\n            }catch(error){\n                this.props.onPushToMessageQ(\"NodeDetails\", `Error: ${error[\"message\"]}` )\n            }\n        }\n        else {\n            this.setState({\n                transformationErrorFlag: true\n            });\n        }\n    }\n    \n    openModal() {\n        let editorTextInputList = this.getLemmaExprs(this.props.nodes[0]);\n        this.setState({editorIsOpen: true, editorTextInputList: editorTextInputList});\n    }\n\n    afterOpenModal() {\n        // references are now sync'd and can be accessed.\n    }\n\n    closeModal() {\n        this.setState({editorIsOpen: false});\n    }\n\n    render() {\n        console.log(this.props.PobLemmasMap);\n        let node1: ITreeNode, node2: ITreeNode;\n\n        let detailfDiffJSX: JSX.Element;\n\n        if (this.props.nodes.length > 1){\n            node1 = this.props.nodes[0];\n            node2 = this.props.nodes[1];\n\n            detailfDiffJSX = (\n                <section className='component-node-details details-diff'>\n                    <article>\n                        <h2>Diff (Node: <strong>{node1.nodeID}</strong> vs. Node: <strong>{node2.nodeID}</strong>)</h2>\n                        {toDiff(this.props.ExprMap[node1.exprID].editedReadable,\n                                this.props.ExprMap[node2.exprID].editedReadable).map((part, key) => (\n                                    <span key={key} className={part.added ? \"green\" : part.removed ? \"red\" : \"black\"}>\n                                        {part.value}\n                                    </span>\n                        ))}\n                    </article>\n                </section>\n            )\n\n        }else{\n            detailfDiffJSX = <div></div>;\n        }\n        return (\n            <div>\n                {/* Editor modal */}\n                <Modal\n                    isOpen={this.state.editorIsOpen}\n                    onRequestClose={this.closeModal.bind(this)}\n                    overlayClassName=\"editor-modal-overlay\"\n                    className=\"editor-modal\"\n                >\n                    <h2>Editor</h2>\n                    <button onClick={this.closeModal.bind(this)}>Close</button>\n                    <EditorModal\n                        expName={this.props.expName}\n                        inputList={this.state.editorTextInputList}\n                        onTransformExprs = {this.transformExprsFromText.bind(this)}\n                        onAddInputOutputExample ={this.props.onAddInputOutputExample.bind(this)}\n                        onPushToMessageQ={this.props.onPushToMessageQ.bind(this)}\n                    />\n                </Modal>\n\n                {detailfDiffJSX}\n                {this.props.nodes.map((node, key) => {\n                    let additional_info =\"type:\" + node.event_type + \" level:\" + node.level;\n                    let lemma_list = this.getLemmaList(node);\n\n                    let expr = this.props.ExprMap[node.exprID].editedReadable;\n                    console.log(\"top expr\", expr);\n                    const classNameTop = \"component-node-details details-top-\" + key;\n                    const classNameBottom = \"component-node-details details-bottom-\" + key;\n                    return (\n                        <div key = {key}>\n                            <section className={classNameTop}>\n                                <article>\n                                    <h2>Node <strong>{node.nodeID}, </strong>Expr <strong> {node.exprID} </strong>,\n                                        Parent <strong> {node.pobID}  </strong></h2>\n                                    <h3>{additional_info}</h3>\n                                    <pre className={this.props.nodes.length === 1 ? \"black\" : node === node1 ? \"red\" : \"green\" }>{expr}</pre>\n                                </article>\n                            </section>\n                            {lemma_list.length > 0 && <section className={classNameBottom}>\n                                <article>\n                                    {lemma_list}\n\n                                    {this.props.solvingCompleted?\n                                    <button onClick={this.openModal.bind(this)}>Open Editor</button>\n                                    : \"\"}\n                                </article>\n                            </section>}\n                        </div>\n                    );\n                })}\n            </div>\n        );\n    }\n}\n","import * as diff from 'diff';\nexport function toDiff(expr1: string, expr2: string){\n    let result : diff.Change[] = [];\n    let expr1List = expr1.split(\"\\n\");\n    let expr2List = expr2.split(\"\\n\");\n    for (let i = 0; i < Math.min(expr1List.length, expr2List.length); i++){\n        let lineDiff = diff.diffWords(expr1List[i], expr2List[i]);\n        lineDiff.push({\n            added: false,\n            removed: false, \n            value: \"\\n\"\n        });\n        result = result.concat(lineDiff);\n        console.log(result);\n    }\n    console.log(result);\n    return result;\n    \n} \n","import * as React from 'react';\n\nimport '../styles/NodeMenu.css';\nimport NodeDetails from './NodeDetails';\nimport { inOutExample, ITreeNode, IExprMap} from \"../helpers/datatypes\";\nconst icons = require('../resources/icons/all.svg') as string;\n\ntype Props = {\n    tree: {[nodeID: number]: ITreeNode},\n    nodeSelection: number[],\n    onUpdateNodeSelection: (selection: number[]) => void,\n    onPoke: () => void,\n    onOpenStarModal: () => void,\n    SatVisLayout: () => void,\n    PobVisLayout: () => void,\n    MultiSelectMode: () => void,\n    SMTLayout: () => void,\n    JSONLayout:() => void,\n    PobLemmasMap: {},\n    ExprMap: IExprMap,\n    layout: string,\n    expr_layout: \"SMT\"|\"JSON\",\n    expName: string,\n    solvingCompleted: boolean\n    onAddInputOutputExample: (example: inOutExample)=>void,\n    onPushToMessageQ: (channel: string, msg: string)=>void,\n};\n\ntype State = {\n    relatedExprMap: any\n}\n\nclass Aside extends React.Component<Props, State> {\n    constructor(props: Props){\n        super(props);\n        this.state = {\n            relatedExprMap: []\n        }\n    }\n\n    createButton(title: string, onClick: ()=>void, svg: string) {\n        return <button\n                   title={title}\n                   onClick = { onClick }\n               >\n            <svg viewBox=\"0 0 24 24\" className = \"icon big\" >\n                <use xlinkHref={ `${icons}#${svg}` } />\n            </svg>\n        </button>;\n    }\n    getNodeDetails() {\n        if (this.props.nodeSelection.length >= 1  && this.props.tree != null) {\n            let nodes: ITreeNode[] = [];\n            for (let node of this.props.nodeSelection){\n                nodes.push(this.props.tree[node]);\n            }\n            return <NodeDetails\n                       nodes={nodes}\n                       expName={this.props.expName}\n                       PobLemmasMap = { this.props.PobLemmasMap }\n                       ExprMap = { this.props.ExprMap }\n                       layout = { this.props.layout }\n                       expr_layout ={this.props.expr_layout}\n                       relatedExprMap = {this.state.relatedExprMap}\n                       solvingCompleted = {this.props.solvingCompleted}\n                       onAddInputOutputExample ={this.props.onAddInputOutputExample.bind(this)}\n                       onPushToMessageQ={this.props.onPushToMessageQ.bind(this)}\n            />;\n        } else {\n            return <section className={ 'component-node-details overview' }>\n                <small id=\"nodeInfo\" > <strong>{`${this.props.nodeSelection.length} nodes`\n                } </strong> selected</small >\n            </section>\n        }\n    }\n    updateRelatedExprMap(exprMap: IExprMap) {\n        this.setState({\n            relatedExprMap: exprMap \n        });\n    }\n\n    render() {\n        return(\n            <aside>\n                <article>\n                    <section className=\"component-node-menu\" >\n                        { this.createButton(\"Poke\", this.props.onPoke, \"graph-undo\") }\n                        { this.createButton(\"Star\", this.props.onOpenStarModal, \"star\") }\n                        { this.createButton(\"SatVis\", this.props.SatVisLayout, \"node-parents\") }\n                        { this.createButton(\"PobVis\", this.props.PobVisLayout, \"node-children\") }\n                        { this.createButton(\"MultiSelect\", this.props.MultiSelectMode, \"history-forward\") }\n                        {/* <button\n                            title = \"SMT\"\n                            onClick = { this.props.SMTLayout }\n                            >\n                            <svg viewBox=\"0 0 30 30\" className = \"icon big\" >\n                            <text x=\"50%\" alignmentBaseline=\"middle\" textAnchor=\"middle\" y=\"50%\" dominantBaseline=\"middle\" fontWeight=\"light\" stroke=\"none\" fill=\"black\" fontFamily=\"monospace\">Raw</text>\n                            </svg>\n                            </button>\n                            <button\n                            title = \"JSON\"\n                            onClick = { this.props.JSONLayout }\n                            >\n                            <svg viewBox=\"0 0 35 35\" className = \"icon big\" >\n                            <text x=\"50%\" alignmentBaseline=\"middle\" textAnchor=\"middle\" y=\"50%\" dominantBaseline=\"middle\" fontWeight=\"light\" stroke=\"none\" fill=\"black\" fontFamily=\"monospace\">Sort</text>\n                            </svg>\n                            </button> */}\n                    </section>\n                </article>\n                { this.getNodeDetails() }\n                   </aside>\n        );\n    }\n\n}\nexport default Aside; \n","import * as React from 'react';\nimport '../styles/StarModal.css';\nimport { IExprMap, IPobLemmasMap } from '../helpers/datatypes';\n\nconst _ = require(\"lodash\");\n\ntype Props = {\n    expName: string,\n    PobLemmasMap: IPobLemmasMap,\n    ExprMap: IExprMap,\n    onPushToMessageQ: (channel: string, msg: string)=>void,\n}\n\ntype State = {\n    input: string,\n    output: string,\n    finalLemmas: any[][],\n    debugMode: boolean,\n}\n\n\nexport class StarModal extends React.Component<Props, State> {\n    state: State = {\n        input: \"()\",\n        output: \"\",\n        finalLemmas: this.getFinalInvariant(),\n        debugMode: false\n    };\n\n    getFinalInvariant(){\n        let finalLemmas: Set<any[]> = new Set<any[]>();\n        for(const pob in this.props.PobLemmasMap){\n            /* console.log(pob); */\n            let lemmas = this.props.PobLemmasMap[pob];\n            for(const lemma of lemmas){\n                if(lemma[2]===Number.MAX_SAFE_INTEGER){\n                    finalLemmas.add(lemma);\n                }\n            }\n        }\n\n        return Array.from(finalLemmas.values());\n    }\n\n    getLemmaHeader(lemma: any[]): string{\n        const lemma_id = lemma[0];\n        const lemma_header = this.props.ExprMap[lemma_id].raw.split(\"\\n\")[0];\n        return lemma_header;\n    }\n\n    reset(){\n        this.setState({\n            finalLemmas: this.getFinalInvariant()\n        });\n    }\n\n    sortByLevel(){\n        const sorted = this.state.finalLemmas\n                           .sort((lem_a, lem_b)=> lem_a[1] > lem_b[1] ? 1 : -1);\n        this.setState({finalLemmas: sorted});\n    }\n\n    sortByHeader(){\n        const sorted = this.state.finalLemmas\n                           .sort((lem_a, lem_b) =>\n                               this.getLemmaHeader(lem_a)> this.getLemmaHeader(lem_b) ? 1 : -1)\n        this.setState({finalLemmas: sorted});\n    }\n\n    renderFinalInvariant(){\n        let lemRows: JSX.Element[] = [];\n\n        for (const lemma of this.state.finalLemmas){\n            const lemma_id = lemma[0];\n            let expr_raw = '';\n            let expr_edited = '';\n            if(this.props.ExprMap[lemma_id]){\n                expr_edited = this.props.ExprMap[lemma_id].editedReadable;\n                expr_raw = this.props.ExprMap[lemma_id].raw;\n            }\n            lemRows.push(<tr key={\"lemma-header-\"+ lemma_id}>\n                <td>\n                    <h4>ExprID: {lemma[0]}, From: {lemma[1]} to {lemma[2]}</h4>\n                </td>\n                <td>\n                </td>\n            </tr>)\n            lemRows.push(<tr key={\"lemma-content-\"+ lemma_id}>\n                <td><pre>{expr_edited}</pre></td>\n                {this.state.debugMode?\n                 <td><pre>{expr_raw}</pre></td>:\n                 <td></td>}\n            </tr>)\n        }\n\n        return <table><tbody>{lemRows}</tbody></table>;\n    }\n\n    handleDebugModeChange(e: React.ChangeEvent<HTMLInputElement>){\n        this.setState({\n            debugMode: e.target.checked\n        })\n    }\n\n\n    render() {\n        console.log(this.props.ExprMap);\n        const resJSX = this.renderFinalInvariant();\n        /* console.log(this.props.PobLemmasMap); */\n        return (\n\n            <section className=\"star-modal-wrapper\">\n                <div className=\"star-modal-menu\">\n                    <label>Debug mode:</label>\n                    <input type=\"checkbox\"\n                           defaultChecked={this.state.debugMode}\n                           onChange={this.handleDebugModeChange.bind(this)} \n                    />\n                    <button onClick={this.sortByHeader.bind(this)}>Order by header</button>\n                    <button onClick={this.sortByLevel.bind(this)}>Order by level</button>\n                    <button onClick={this.reset.bind(this)}>Reset</button>\n                </div> \n                <div className=\"star-modal-content\">\n                    <div className=\"lemma-table\">\n                        {resJSX}\n                    </div>\n\n                </div>\n            </section>\n        );\n    }\n}\n\n","import * as React from 'react';\nimport '../styles/NodeMenu.css';\nimport {Link} from 'react-router-dom';\nimport {replaceVarNames, toReadable} from \"../helpers/readable\";\nimport { IExprMap } from '../helpers/datatypes';\nconst _ = require(\"lodash\");\ntype Props = {\n    expName: string,\n    ExprMap: IExprMap,\n    onUpdateLocalExprMap: (exprMap: IExprMap) => void,\n    onPushToMessageQ: (channel: string, msg: string)=>void,\n    key: string\n};\ntype State = {\n    transformationFlag: boolean,\n    transformationErrorFlag: boolean,\n    transformationSelected: string,\n    isFetching: boolean,\n    progs: any[],\n}\n\nexport default class TransformerTable extends React.Component<Props, State> {\n    constructor(props: Props) {\n        super(props);\n        this.state = {\n            transformationFlag: false,\n            transformationErrorFlag: false,\n            transformationSelected: \"\",\n            isFetching: false,\n            progs: []\n        };\n    }\n\n\n    async componentDidMount() {\n        await this.fetchProgs();\n    }\n\n    render() {\n        return (\n            <div>\n                <div>\n                    <button className=\"ts-button-half\"\n                            onClick={this.multiTransformExprs.bind(this, \"to_readable\")}\n                    >To Readable</button>\n                    <button className=\"ts-button-half\"\n                            onClick={this.toRaw.bind(this)}\n                    >To Raw</button>\n                </div>\n                    {this.state.progs.map((item, index) => (\n                        <button className=\"ts-button\"\n                                key = {item.hash}\n                                onClick={this.multiTransformExprs.bind(this, item.xml_ast)}\n                        >\n                            {item.human_readable_ast}\n                        </button>\n                    ))}\n                <p>{this.state.isFetching ? 'Fetching transformer...' : ''}</p>\n                </div>\n        )\n    }\n\n    async multiTransformExprs(programs: string) {\n        let tmpExprMap = _.cloneDeep(this.props.ExprMap);\n\n        //NHAM: since I dont want to touch prose backend, and Prose expect input in the field \"raw\",\n        //we set the field raw in here to be the same as editedRaw\n        for(const key in tmpExprMap){\n            tmpExprMap[key].raw = tmpExprMap[key].editedRaw;\n        }\n\n        this.setState({\n            transformationFlag: false,\n            transformationErrorFlag: false\n        });\n        const response = await fetch(\"http://localhost:5000/spacer/apply_multi_transformation\", {\n            method: 'POST',\n            mode :'cors',\n            headers: {\n                'Accept': 'application/json',\n                'Content-Type': 'application/json'\n            }, body : JSON.stringify({\n                expName: this.props.expName,\n                selectedProgram: programs,\n                lemmas: tmpExprMap\n            })\n        });\n\n        if (response.status === 200){\n            tmpExprMap = null;\n            let localExprMap = _.cloneDeep(this.props.ExprMap);\n            let responseData = await response.json();\n            let tExprMap = responseData[\"response\"];\n            console.log(\"tExprMap\", tExprMap);\n            Object.keys(tExprMap).forEach((key) => {\n                localExprMap[key].editedRaw = tExprMap[key]['raw'];\n                //NHAM: editedReadable is set ONLY when the user explictly click on the 'To Readable' button\n                if(programs === \"to_readable\"){\n                    localExprMap[key].editedReadable = tExprMap[key]['readable'];\n                }else{\n                    localExprMap[key].editedReadable = tExprMap[key]['raw'];\n                }\n            });\n\n            this.setState({\n                transformationFlag: true,\n            });\n            this.props.onUpdateLocalExprMap(localExprMap);\n        }\n        else {\n            this.setState({\n                transformationErrorFlag: true\n            });\n            this.props.onPushToMessageQ(\"Error\", \"Failed to apply the transformation. Possibly not supported.\");\n        }\n    }\n\n    async toRaw(){\n        //simply overwritting editedReadable with editedRaw\n        let localExprMap = _.cloneDeep(this.props.ExprMap);\n        Object.keys(localExprMap).forEach((key) => {\n            localExprMap[key].editedReadable = localExprMap[key].editedRaw;\n        });\n\n        this.props.onUpdateLocalExprMap(localExprMap);\n    }\n\n\n\n    async fetchProgs() {\n        this.setState({\n            isFetching: true,\n        });\n\n        const fetchedJSON = await fetch('http://localhost:5000/spacer/fetch_progs', {\n            method: 'POST',\n            mode: 'cors',\n            headers: {\n                'Accept': 'application/json',\n                'Content-Type': 'application/json'\n            }, body : JSON.stringify({\n                \"expName\": this.props.expName\n            })\n        });\n\n        try {\n            const json = await fetchedJSON.json();\n            console.log(json)\n            this.setState({isFetching: false, progs: json.progs_list})\n        } catch (error) {\n            if (error.name === \"SatVisAssertionError\") {\n                throw error;\n            }\n            this.setState({\n                progs: []\n            });\n        }\n    }\n}\n","import * as React from 'react';\nimport {getProblemName} from \"../helpers/readable\";\nimport { IExprMap } from '../helpers/datatypes';\n\ntype Props = {\n    expName: string\n    updateRelatedExprMap: (exprMap: IExprMap) => void\n}\n\ntype State = {\n    matchingFiles: any[],\n    exps: any[],\n    selected: string\n}\n\nclass ExprMapSelector extends React.Component<Props, State> {\n    constructor(props: Props){\n        super(props);\n        this.state = {\n            matchingFiles: [],\n            exps: [],\n            selected: \"\"\n        }\n    }\n    \n    async componentDidMount() {\n        await this.fetchExps();\n        this.getMatchingFiles();\n        await this.getMatchingExprMap();\n    }\n\n    getMatchingFiles() {\n        //NHAM: allow same name expmap to appear in the list\n        let data = this.state.exps.filter(exp => exp[\"exp_name\"].includes(getProblemName(this.props.expName)));\n        \n        if (data.length > 0){\n            this.setState({\n                matchingFiles: data,\n                selected: data[0].name\n            });\n        }\n    }\n    \n    async getMatchingExprMap() {\n        const fetchedJSON = await fetch('http://localhost:5000/spacer/get_exprs', {\n            method: 'POST',\n            mode: 'cors',\n            headers: {\n                'Accept': 'application/json',\n                'Content-Type': 'application/json'\n            }, body : JSON.stringify({\n                exp_path: this.state.selected,\n            })\n        });\n\n        try {\n            const json = await fetchedJSON.json();\n            console.log(json);\n            this.props.updateRelatedExprMap(JSON.parse(json.expr_map));\n        } catch (error) {\n            if (error.name === \"SatVisAssertionError\") {\n                throw error;\n            }\n            this.setState({\n                exps: []\n            });\n        }\n    }\n\n    async fetchExps() {\n        const fetchedJSON = await fetch('http://localhost:5000/spacer/fetch_exps', {\n            method: 'POST',\n            mode: 'cors',\n            headers: {\n                'Accept': 'application/json',\n                'Content-Type': 'application/json'\n            }, body : \"\"\n        });\n\n        try {\n            const json = await fetchedJSON.json();\n            console.log(json);\n            this.setState({exps: json.exps_list})\n\n        } catch (error) {\n            if (error.name === \"SatVisAssertionError\") {\n                throw error;\n            }\n            this.setState({\n                exps: []\n            });\n        }\n    }\n    \n    updateSelected(e: React.ChangeEvent<HTMLSelectElement>) {\n        this.setState({\n            selected: e.target.value\n        });\n    } \n    \n    render() {\n        return (\n            <div>\n                <select id=\"exprs\" onChange={this.updateSelected.bind(this)}>\n                    {this.state.matchingFiles.length > 0 && this.state.matchingFiles.map((exp, key) => (\n                        <option key={key} value={exp[\"exp_name\"]}>{exp[\"exp_name\"]}</option>\n                    ))}\n                </select>\n                <button onClick={this.getMatchingExprMap.bind(this)}>Get Expr Map</button>\n            </div>\n        );\n    }\n}\n\nexport default ExprMapSelector\n","import * as React from 'react';\nimport {ChangeEvent} from \"react\";\nimport TransformerTable from './TransformerTable';\nimport '../styles/TransformerMenu.css';\nimport { inOutExample, IExprMap } from '../helpers/datatypes';\nimport { uuid } from 'uuidv4';\n\nimport ExprMapSelector from \"./ExprMapSelector\";\ntype Props = {\n    expName: string,\n    ExprMap: IExprMap,\n    dumbReplaceMap: {},\n    onApplyDumbReplaceMap:(newReplaceMap: string)=>void,\n    onSaveExprMap: () => void,\n    onUpdateExprMap: (exprMap: IExprMap) => void,\n    onPushToMessageQ: (channel: string, msg: string)=>void,\n    inputOutputExamples: inOutExample[],\n}\ntype State = {\n    localReplaceMap: string,\n    key: string //this is to trigger an update in TransformerTable. Whenever key is changed, TransformerTable will be updated\n}\nexport default class TransformerMenu extends React.Component<Props, State> {\n    state = {\n        localReplaceMap: JSON.stringify(this.props.dumbReplaceMap, null, 2),\n        key: uuid() \n    }\n\n    handleTextareaChange(e: ChangeEvent<HTMLTextAreaElement>){\n        this.setState({\n            localReplaceMap: e.target.value\n        })\n    }\n\n    handleKeyUp(event: React.KeyboardEvent<HTMLDivElement>) {\n        event.stopPropagation();\n    }\n\n    async learnTransformationFromInputOutput() {\n        let payload = {\n            \"inputOutputExamples\": this.props.inputOutputExamples,\n            \"expName\": this.props.expName,\n        };\n        console.log(\"payload\", payload);\n        const response = await fetch(\"http://localhost:5000/spacer/learn_transformation\", {\n            method: 'POST',\n            mode :'cors',\n            headers: {\n                'Accept': 'application/json',\n                'Content-Type': 'application/json'\n            }, body : JSON.stringify(payload)\n        });\n        if (response.status === 200){\n            const responseJson = await response.json();\n            let possiblePrograms = responseJson[\"response\"];\n            console.log(possiblePrograms);\n            if(possiblePrograms.length > 0){\n                this.setState({\n                    key: uuid()\n                });\n            }\n        }\n    }\n\n    updateRelatedExprMap(exprMap: IExprMap) {\n        this.props.onPushToMessageQ(\"TransformerMenu\", \"\")\n        /* this.setState({\n         *     relatedExprMap: exprMap \n         * }); */\n    }\n\n\n    render() {\n        return (\n            <div className =\"transformer-menu\" onKeyUp={this.handleKeyUp}>\n                <section className=\"dumb-replace-wrapper\">\n                    <button onClick={this.props.onSaveExprMap.bind(this)}>Save</button>\n                    \n                    <ExprMapSelector\n                        expName = {this.props.expName}\n                        updateRelatedExprMap = {this.updateRelatedExprMap.bind(this)}\n                    />\n\n                    <label>Replacement map:</label>\n                    <br/>\n                    <textarea value={this.state.localReplaceMap} onChange={this.handleTextareaChange.bind(this)}/>\n                    <br/>\n                    <button onClick={this.props.onApplyDumbReplaceMap.bind(this, this.state.localReplaceMap)}>Apply Text Replacement</button>\n                    <br/>\n                    <label>All input output examples:</label>\n                    <textarea value={JSON.stringify( this.props.inputOutputExamples, null, 2)} disabled={true} />\n                    <br/>\n                    <button onClick={this.learnTransformationFromInputOutput.bind(this, this.state.localReplaceMap)}>Learn new transformations</button>\n                 </section>\n                 <TransformerTable\n                     key={this.state.key}\n                     expName={this.props.expName}\n                     ExprMap ={this.props.ExprMap}\n                     onUpdateLocalExprMap = {this.props.onUpdateExprMap.bind(this)}\n                     onPushToMessageQ ={this.props.onPushToMessageQ.bind(this)}\n                 />\n            </div>\n        );\n    }\n}\n\n","import * as React from 'react';\nimport { Component } from 'react';\n\nimport Main from './Main';\nimport Aside from './Aside';\nimport {StarModal} from './StarModal';\nimport '../styles/App.css';\nimport { assert } from '../helpers/util';\nimport {buildExprMap, buildPobLemmasMap} from \"../helpers/network\";\nimport TransformerMenu from \"./DumbReplaceModal\";\nimport Modal from 'react-modal';\nimport { inOutExample, ITreeNode, IExprItem, IExprMap, ITree } from '../helpers/datatypes';\nconst _ = require(\"lodash\");\n\ntype Props = {\n    expName: string,\n};\n\ntype State = {\n    expName: string,\n    state: \"loaded\" | \"loaded iterative\" | \"waiting\" | \"layouting\" | \"error\",\n    tree: ITree,\n    runCmd: string,\n    messageQ: {string: string[]},\n    nodeSelection: number[],\n    currentTime: number,\n    layout: string,\n    expr_layout: \"SMT\" | \"JSON\",\n    PobLemmasMap: {},\n    ExprMap: IExprMap,\n    multiselect: boolean,\n    varNames: string,\n    starModalIsOpen: boolean,\n    solvingCompleted: boolean,\n    dumbReplaceMap: {[source: string]: string},\n    inputOutputExamples: inOutExample[],\n}\n\nclass App extends Component<Props, State> {\n\n    state: State = {\n        expName: this.props.expName,\n        state: \"waiting\",\n        tree: {} as ITree,\n        runCmd: \"Run command:\",\n        messageQ: {} as {string: string[]},\n        nodeSelection: [],\n        currentTime: 0,\n        layout: \"PobVis\",\n        expr_layout: \"SMT\",\n        PobLemmasMap: {},\n        ExprMap: {} as IExprMap,\n        multiselect: false,\n        varNames: \"\",\n        starModalIsOpen: false,\n        solvingCompleted: false,\n        dumbReplaceMap: {} as {string: string},\n        inputOutputExamples: []\n    };\n\n    async componentDidMount() {\n        await this.poke();\n    }\n\n    pushToMessageQ(channel: string, msg: string){\n        let current_messageQ = _.cloneDeep(this.state.messageQ);\n        if(channel in current_messageQ){\n            current_messageQ[channel].push(msg);\n        }else{\n            current_messageQ[channel] = [msg];\n        }\n        this.setState({messageQ: current_messageQ});\n    }\n\n\n\n    async poke() {\n        this.pushToMessageQ(\"App\", \"Poking Spacer...\");\n        this.setState({\n            state: \"waiting\",\n        });\n\n        const fetchedJSON = await fetch('http://localhost:5000/spacer/poke', {\n            method: 'POST',\n            mode: 'cors',\n            headers: {\n                'Accept': 'application/json',\n                'Content-Type': 'application/json'\n            }, body : JSON.stringify({\n                expName: this.state.expName,\n            })\n        });\n\n        try {\n            const json = await fetchedJSON.json();\n            console.log(\"backend response:\", json);\n            const tree = json[\"nodes_list\"];\n            const state = \"loaded\";\n            const PobLemmasMap = buildPobLemmasMap(tree, json.var_names);\n            // NOTE: use varNames in state, not in props. The one in state is returned by the backend.\n            let ExprMap:IExprMap;\n            if (Object.keys(json.expr_map).length === 0) {\n                ExprMap = buildExprMap(tree, json.var_names);\n            }\n            else {\n                ExprMap = json.expr_map;\n            }\n\n            this.setState({\n                tree: tree,\n                runCmd: json.run_cmd,\n                state: state,\n                PobLemmasMap: PobLemmasMap,\n                ExprMap: ExprMap,\n                varNames: json.var_names,\n                solvingCompleted: !(json.spacer_state === \"running\")\n            });\n            console.log(\"state is set\")\n            this.pushToMessageQ(\"SpacerStatus\", json.spacer_state);\n            this.pushToMessageQ(\"App\", \"Poking is done\");\n        } catch (error) {\n            if (error.name === \"SatVisAssertionError\") {\n                throw error;\n            }\n            this.setState({\n                state: \"error\",\n                solvingCompleted: false,\n            });\n            this.pushToMessageQ(\"App\", `Error: ${error[\"message\"]}`);\n        }\n    }\n\n    async saveExprMap() {\n        const fetchedJSON = await fetch('http://localhost:5000/spacer/save_exprs', {\n            method: 'POST',\n            mode: 'cors',\n            headers: {\n                'Accept': 'application/json',\n                'Content-Type': 'application/json'\n            }, body : JSON.stringify({\n                expName: this.state.expName,\n                expr_map: JSON.stringify(this.state.ExprMap)\n            })\n        });\n\n        try{\n            const json = await fetchedJSON.json();\n            this.pushToMessageQ(\"App\", \"ExprMap is saved successfully.\")\n            console.log(json);\n        }catch(error){\n            this.pushToMessageQ(\"App\", `Error in saveExprMap`);\n        }\n    }\n\n    applyDumbReplaceMap(newReplaceMap: string){\n        try{\n            var newReplaceMapJSON: {[source: string]: string};\n            newReplaceMapJSON = JSON.parse(newReplaceMap);\n\n            var newExprMap = _.cloneDeep(this.state.ExprMap);\n            for(let key in newExprMap) {\n                for (const source of Object.keys(newReplaceMapJSON)){\n                    const target:string = newReplaceMapJSON[source];\n                    newExprMap[key].editedReadable = newExprMap[key].editedReadable.replaceAll(source,\n                                                                                               target);\n                }\n            }\n\n            this.setState({dumbReplaceMap: newReplaceMapJSON, ExprMap: newExprMap});\n            this.pushToMessageQ(\"App\", `applyDumbReplaceMap ok!`);\n        }catch(error){\n            this.pushToMessageQ(\"App\", `Error in applyDumbReplaceMap: ${error[\"message\"]}`);\n        }\n    }\n    updateExprMap(newExprMap: IExprMap){\n        console.log(\"newExprMap\", newExprMap);\n        try{\n            this.setState({ExprMap: newExprMap});\n        }catch(error){\n            this.pushToMessageQ(\"App\", `Error in updateExprMap: ${error[\"message\"]}`);\n        }\n    }\n\n\n\n\n\n    updateNodeSelection(nodeSelection: number[]) {\n        if (this.state.multiselect) {\n            let tempNodeSelection = this.state.nodeSelection.slice(this.state.nodeSelection.length-1).concat(nodeSelection);\n            this.setState({nodeSelection: tempNodeSelection});\n        } else {\n            this.setState({nodeSelection: nodeSelection});\n        }\n    }\n    \n    updateCurrentTime(currentTime: number) {\n        /* assert(this.state.tree); */\n        this.setState({\n            currentTime: currentTime\n        });\n    }\n\n    setPobVisLayout(){\n        this.setState({ layout: \"PobVis\" })\n    }\n    setSatVisLayout(){\n        this.setState({ layout: \"SatVis\" })\n    }\n    setMultiSelect() {\n        if (this.state.multiselect) {\n            if (this.state.nodeSelection.length > 0) {\n                this.setState({\n                    nodeSelection: [this.state.nodeSelection[this.state.nodeSelection.length - 1]]\n                });\n            }\n        }\n        this.setState({\n            multiselect: !this.state.multiselect\n        });\n    }\n    setSMTLayout(){\n        this.setState({ expr_layout: \"SMT\" })\n    }\n    setJSONLayout(){\n        this.setState({ expr_layout: \"JSON\" })\n    }\n\n    openStarModal(){\n        this.setState({starModalIsOpen: true});\n    }\n\n    closeStarModal(){\n        this.setState({starModalIsOpen: false});\n    }\n\n\n    addInputOutputExample(example: inOutExample){\n        this.setState({inputOutputExamples: [...this.state.inputOutputExamples, example]});\n        this.pushToMessageQ(\"App\", \"Example added to inputOutputExamples\");\n    }\n\n    render() {\n\n        const hL = Object.keys(this.state.tree).length;\n\n        return (\n            <div className= \"app\" >\n                <Modal\n                    isOpen={this.state.starModalIsOpen}\n                    onRequestClose={this.closeStarModal.bind(this)}\n                    overlayClassName=\"star-modal-overlay\"\n                    className=\"star-modal\"\n                    shouldCloseOnOverlayClick={false}\n                >\n                    <h2>Final invariant</h2>\n                    <button onClick={this.closeStarModal.bind(this)}>Close</button>\n                    <StarModal\n                        expName = {this.props.expName}\n                        PobLemmasMap = {this.state.PobLemmasMap}\n                        ExprMap = {this.state.ExprMap}\n                        onPushToMessageQ={this.pushToMessageQ.bind(this)}\n                    />\n                </Modal>\n                <Main\n                    appState = {this.state.state}\n                    messageQ = {this.state.messageQ}\n                    runCmd = {this.state.runCmd}\n                    tree = { this.state.tree }\n                    onNodeSelectionChange = { this.updateNodeSelection.bind(this) }\n                    nodeSelection = { this.state.nodeSelection }\n                    historyLength = { hL }\n                    currentTime = { this.state.currentTime }\n                    onCurrentTimeChange = { this.updateCurrentTime.bind(this) }\n                    layout = { this.state.layout }\n                    PobLemmasMap = { this.state.PobLemmasMap }\n                    solvingCompleted = {this.state.solvingCompleted}\n                    onPushToMessageQ={this.pushToMessageQ.bind(this)}\n                />\n                <TransformerMenu\n                    dumbReplaceMap ={this.state.dumbReplaceMap}\n                    onApplyDumbReplaceMap={this.applyDumbReplaceMap.bind(this)}\n                    expName={this.props.expName}\n                    ExprMap ={this.state.ExprMap}\n                    onUpdateExprMap={this.updateExprMap.bind(this)}\n                    inputOutputExamples={this.state.inputOutputExamples}\n                    onSaveExprMap={this.saveExprMap.bind(this)}\n                    onPushToMessageQ={this.pushToMessageQ.bind(this)}\n                />\n                <Aside\n                    tree = { this.state.tree }\n                    nodeSelection = { this.state.nodeSelection }\n                    onUpdateNodeSelection = { this.updateNodeSelection.bind(this) }\n                    onPoke = {this.poke.bind(this)}\n                    onOpenStarModal = {this.openStarModal.bind(this)}\n                    SatVisLayout = { this.setSatVisLayout.bind(this) }\n                    PobVisLayout = { this.setPobVisLayout.bind(this) }\n                    MultiSelectMode= { this.setMultiSelect.bind(this) }\n                    SMTLayout = { this.setSMTLayout.bind(this) }\n                    JSONLayout = { this.setJSONLayout.bind(this) }\n                    PobLemmasMap = { this.state.PobLemmasMap }\n                    ExprMap = { this.state.ExprMap }\n                    layout = { this.state.layout }\n                    expr_layout ={this.state.expr_layout}\n                    expName = {this.state.expName}\n                    solvingCompleted = {this.state.solvingCompleted}\n                    onAddInputOutputExample ={this.addInputOutputExample.bind(this)}\n                    onPushToMessageQ={this.pushToMessageQ.bind(this)}\n                />\n                </div>\n        );\n\n    }\n\n}\n\nexport default App;\n","import * as React from 'react';\nimport '../styles/ExpTable.css';\nimport {Link} from 'react-router-dom';\n\ntype Props = {\n};\ntype State = {\n    isFetching: boolean,\n    exps: any[],\n}\n\nexport default class ExpTable extends React.Component<Props, State> {\n    constructor(props: Props) {\n        super(props);\n        this.state = {\n            isFetching: false,\n            exps: []\n        };\n    }\n\n    async componentDidMount() {\n        await this.fetchExps();\n        // this.timer = setInterval(() => this.fetchUsers(), 5000);\n    }\n\n    render() {\n        return (\n                <div className=\"exp-table\">\n                    {this.state.exps.map((item, index) => (\n                        <div className=\"exp\" key = {item.exp_name}>\n                            <h5><Link to={{pathname: `/replay/${item.exp_name}`}} >{item.exp_name}</Link></h5>\n                            <button onClick={this.deleteExp.bind(this, item.exp_name)}>X</button>\n                        </div>\n                ))}\n                <p>{this.state.isFetching ? 'Fetching experiments...' : ''}</p>\n                </div>\n        )\n    }\n    async deleteExp(expName: string) {\n        this.setState({\n            isFetching: true,\n        });\n\n        const fetchedJSON = await fetch('http://localhost:5000/spacer/delete_exp', {\n            method: 'POST',\n            mode: 'cors',\n            headers: {\n                'Accept': 'application/json',\n                'Content-Type': 'application/json'\n            }, body : JSON.stringify({\"expName\": expName})\n        });\n\n        try {\n            const json = await fetchedJSON.json();\n            console.log(json)\n            this.setState({isFetching: false, exps: json.exps_list})\n        } catch (error) {\n            if (error.name === \"SatVisAssertionError\") {\n                throw error;\n            }\n            this.setState({\n                exps: []\n            });\n        }\n    }\n\n    async fetchExps() {\n        this.setState({\n            isFetching: true,\n        });\n\n        const fetchedJSON = await fetch('http://localhost:5000/spacer/fetch_exps', {\n            method: 'POST',\n            mode: 'cors',\n            headers: {\n                'Accept': 'application/json',\n                'Content-Type': 'application/json'\n            }, body : \"\"\n        });\n\n        try {\n            const json = await fetchedJSON.json();\n            console.log(json)\n            this.setState({isFetching: false, exps: json.exps_list})\n        } catch (error) {\n            if (error.name === \"SatVisAssertionError\") {\n                throw error;\n            }\n            this.setState({\n                exps: []\n            });\n        }\n    }\n\n\n}\n","import * as React from 'react';\nimport eye from \"./../resources/icons/singles/eye.svg\"\n\ntype Props = {\n    spacerUserOptions: string,\n    onChangeVariables: (e: React.ChangeEvent<HTMLInputElement>) => void,\n    changeSpacerUserOptions: (spacerUserOptions: string) => void,\n}\n\ntype State = {\n    optionTypeHTML: JSX.Element,\n    optionValue: string,\n    optionName: string,\n    optionType: string,\n    allOptions: {type:string, name: string, value:string}[],\n    showOptions: boolean,\n    options: any[]\n}\n\nclass MenuOptions extends React.Component<Props, State> {\n    state = {\n        optionTypeHTML: <div />,\n        optionType: \"\",\n        optionValue: \"\",\n        optionName: \"\",\n        allOptions: [],\n        showOptions: true,\n        options: []\n    };\n    \n    async componentDidMount() {\n        await this.fetchOptions()\n    }\n    \n    \n    async fetchOptions() {\n\n        const fetchedJSON = await fetch('http://localhost:5000/spacer/fetch_options', {\n            method: 'POST',\n            mode: 'cors',\n            headers: {\n                'Accept': 'application/json',\n                'Content-Type': 'application/json'\n            }, body : \"\"\n        });\n\n        try {\n            const json = await fetchedJSON.json();\n            console.log(json)\n            this.setState({\n                options: json\n            })\n        } catch (error) {\n            console.error(error);\n        }\n    }\n\n    updateSpacerOptions() {\n        let allOptions: any[] = this.state.allOptions;\n        let fullOptionString = \"\";\n        for (let option of allOptions) {\n            if (option.type === \"flag\" || option.dash) {\n                fullOptionString += \"-\" + option.name + \" \";\n            }\n            else {\n                fullOptionString += option.name + \"=\" + option.value + \" \";\n            }\n        }\n        this.props.changeSpacerUserOptions(fullOptionString);\n    }\n\n    storeSpacerOptions(e: React.ChangeEvent<HTMLFormElement>) {\n        e.preventDefault();\n        e.target.reset();\n        if (this.state.optionName === \"\" || (this.state.optionType !== \"custom\" && this.state.optionValue === \"\")) return;\n        let allOptions: any[] = this.state.allOptions;\n        allOptions.push({\n            name: this.state.optionName,\n            value: this.state.optionValue,\n            type: this.state.optionValue === \"\" ? \"flag\" : this.state.optionType\n        });\n        this.setState({\n            allOptions: allOptions\n        });\n        this.setState({\n            optionName: \"\",\n            optionValue: \"\",\n            optionType: \"\"\n        });\n        this.updateSpacerOptions();\n    }\n\n    displaySpacerOptions() {\n        if (this.props.spacerUserOptions !== \"\") {\n            return this.props.spacerUserOptions.trim().split(\" \");\n        }\n        return []\n    }\n\n    updateOptionValue(e: React.ChangeEvent<HTMLInputElement>){\n        this.setState({\n            optionValue: e.target.value\n        });\n    }\n\n    getOptions(name:string, type:string) {\n        if (type === \"bool\") {\n            this.setState({\n                optionTypeHTML:\n                    <React.Fragment>\n                        <input type=\"radio\" name={name} value=\"true\" onChange={this.updateOptionValue.bind(this)}/>True\n                        <input type=\"radio\" name={name} value=\"false\" onChange={this.updateOptionValue.bind(this)}/>False\n                        <button className=\"fake-button\" type=\"submit\" value=\"Submit\">+</button>\n                    </React.Fragment>\n            });\n        } else {\n            this.setState({\n                optionTypeHTML:\n                    <React.Fragment>\n                        <input type=\"text\" name={name} placeholder={type} defaultValue={this.state.optionValue} onChange={this.updateOptionValue.bind(this)}/>\n                        <button className=\"fake-button\" type=\"submit\" value=\"Submit\">+</button>\n                    </React.Fragment>\n            });\n        }\n    }\n\n    changeOptionType(e: React.ChangeEvent<HTMLInputElement>){\n        let tempList = this.state.options.filter(option => option[\"name\"] === e.target.value);\n        let type = \"custom\";\n        if (tempList.length > 0) {\n            type = tempList[0][\"type\"];\n        }\n        this.setState({\n            optionName: e.target.value,\n            optionType: type\n        });\n        this.getOptions(e.target.value, type);\n    }\n\n    removeOption(name:string, value:string){\n        let allOptions: {type:string, name: string, value:string}[] = this.state.allOptions;\n        let rIndex = -1;\n        if (value === undefined){\n            name = name.replace(\"-\", \"\");\n            value = \"\";\n        }\n        for (let i = 0; i < allOptions.length; i++){\n            if (allOptions[i].name === name && allOptions[i].value === value){\n                rIndex = i;\n                break;\n            }\n        }\n        if (rIndex === -1) return;\n        allOptions.splice(rIndex, 1);\n        this.updateSpacerOptions();\n    }\n    changeSpacerManualUserOptions(event: React.ChangeEvent<HTMLInputElement>) {\n        const newValue = event.target.value;\n        this.props.changeSpacerUserOptions(newValue);\n    }\n\n    showHideOptions() {\n        this.setState({\n            showOptions: !this.state.showOptions\n        });\n    }\n    render() {\n        console.log(this.state);\n        let selectedOptions = this.displaySpacerOptions();\n        return (\n            <aside>\n                <fieldset className=\"options-card\">\n                    <h3>Z3 Options</h3>\n                    <ul>\n                        <li>\n                            <label htmlFor=\"userOptions\" className=\"form-label\">Additional Spacer options</label>\n                            <button onClick={this.showHideOptions.bind(this)} className=\"showHideButton\" title={\"showHide\"}><img className=\"eyeImage\" src={eye} alt=\"eye\"/></button>\n                            {selectedOptions.length !== 0 && this.state.showOptions && selectedOptions.map((option, key) => {\n                                if (option !== \"\") {\n                                    let kvp = option.split(\"=\");\n                                    let name = kvp[0];\n                                    let value = kvp[1];\n                                    let displayValue = value ? name + \": \" + value : name;\n                                    return (\n                                        <div className=\"displaySpacerOption\" key={key}>\n                                            <span>{displayValue}</span>\n                                            <button className=\"fake-button\" type=\"button\" onClick={this.removeOption.bind(this, name, value)}>x</button>\n                                        </div>\n                                    );\n                                }\n                                return \"\";\n                            })}\n                            <form className=\"tfradio\" name=\"tfradio\" onSubmit={this.storeSpacerOptions.bind(this)}>\n                                <input type=\"text\" className=\"optionsList\" list=\"spacerOptions\" name=\"spacerOptions\" onChange={this.changeOptionType.bind(this)}/>\n                                <datalist id=\"spacerOptions\">\n                                    {this.state.options && this.state.options.length !== 0 && this.state.options.map((option, key) => (\n                                        <option value={option[\"name\"]} key={key}/>\n                                    ))}\n                                </datalist>\n                                {this.state.optionTypeHTML}\n                            </form>\n                        </li>\n                        <label>Or using manual run parameters</label>\n                        <input type=\"text\" name=\"manualRun\" onChange={this.changeSpacerManualUserOptions.bind(this)}/>\n                        <li>\n                            <label htmlFor=\"varOptions\" className=\"form-label\">Variable Designation</label>\n                            <p>Enter a single space separated list of your chosen variables in the order they appear (var1 var2 var3 ..)</p>\n                            <input type=\"text\" name=\"variables\" onChange={this.props.onChangeVariables}/>\n                        </li>\n                    </ul>\n                </fieldset>\n            </aside>\n        );\n    }\n}\n\nexport default MenuOptions;\n","import * as React from 'react';\nimport {ChangeEvent} from \"react\";\nconst icons = require('../resources/icons/all.svg') as string;\n\n\ntype Props = {\n}\ntype State = {\n    inputProblem: string,\n    spacerLog: string,\n    expName: string\n}\nexport class UploadSpacerLogModal extends React.Component<Props, State> {\n    private runCmd = \"\";\n    state = {\n        inputProblem: \"\",\n        spacerLog: \"\",\n        expName: \"\"\n    }\n\n    handleExpNameChange(e: ChangeEvent<HTMLInputElement>) {\n        this.setState({\n            expName: e.target.value\n        })\n    }\n\n    uploadInputFile(event: React.ChangeEvent<HTMLInputElement>) {\n        if (event.target.files !== null && event.target.files.length > 0) {\n            const file = event.target.files[0];\n\n            const reader = new FileReader();\n            // callback which will be executed when readAsText is called\n            reader.onloadend = () => {\n                const text = (reader.result ? reader.result : '') as string;\n                this.setState({inputProblem: text});\n\n            };\n            reader.readAsText(file);\n        }\n    }\n\n    uploadSpacerLog(event: React.ChangeEvent<HTMLInputElement>) {\n        if (event.target.files !== null && event.target.files.length > 0) {\n            const file = event.target.files[0];\n\n            const reader = new FileReader();\n            // callback which will be executed when readAsText is called\n            reader.onloadend = () => {\n                const text = (reader.result ? reader.result : '') as string;\n                this.setState({spacerLog: text});\n\n            };\n            reader.readAsText(file);\n        }\n    }\n\n    async uploadFiles(){\n        const fetchedJSON = await fetch(\"http://localhost:5000/spacer/upload_files\", {\n            method: 'POST',\n            mode: 'cors',\n            headers: {\n                'Accept': 'application/json',\n                'Content-Type': 'application/json'\n            },\n            body: JSON.stringify({\n                expName: this.state.expName,\n                inputProblem: this.state.inputProblem,\n                spacerLog: this.state.spacerLog,\n                spacerState: \"uploaded\"\n            })\n        })\n\n        try{\n            const json = await fetchedJSON.json();\n            console.log(\"backend response:\", json);\n            window.location.reload(false);\n        }catch(error){\n            console.log(error);\n        }\n\n    }\n\n\n\n    render() {\n        return (\n            <section className=\"upload-log-wrapper\">\n\n                <label>Upload smt2 file</label>\n                <input\n                    type=\"file\"\n                    onChange={this.uploadInputFile.bind(this)}\n                />\n                <br/>\n                <label>Upload spacer.log</label>\n                <input\n                    type=\"file\"\n                    onChange={this.uploadSpacerLog.bind(this)}\n                />\n                <br/>\n                <label>Exp Name:</label>\n                <input type=\"text\" onChange={this.handleExpNameChange.bind(this)}/>\n                <button onClick={this.uploadFiles.bind(this)}>Submit</button>\n            </section>\n\n        );\n    }\n}\n\n","import * as React from 'react';\nimport '../styles/Menu.css';\nimport * as Monaco from 'monaco-editor'\nimport ExpTable from './ExpTable';\nimport { assert } from '../helpers/util';\nimport MenuOptions from \"./MenuOptions\";\nimport {UploadSpacerLogModal} from \"./UploadSpacerLogModal\";\nimport Modal from 'react-modal';\nimport { RouteComponentProps } from 'react-router';\nimport { withRouter } from 'react-router-dom';\n\nconst icons = require('../resources/icons/all.svg') as string;\n\n\ntype State = {\n    uploadModalIsOpen: boolean,\n    problem: string,\n    problemName: string,\n    spacerUserOptions: string,\n    varNames: string,\n    messagesQ: string[],\n    newProblemUploaded: boolean\n}\n\nclass Menu extends React.Component<{} & RouteComponentProps<{}>, State>{\n    state = {\n        uploadModalIsOpen: false,\n        problem: \"\",\n        problemName: \"\",\n        spacerUserOptions: \"\",\n        varNames: \"\",\n        messagesQ: [],\n        newProblemUploaded: false\n    }\n    // private isChromeOrFirefox = navigator.userAgent.indexOf('Chrome') > -1 || navigator.userAgent.indexOf('Firefox') > -1;\n    private isChromeOrFirefox = true;\n    private fileUpload = React.createRef<HTMLInputElement>();\n    monacoDiv = React.createRef<HTMLDivElement>();\n    monaco: Monaco.editor.IStandaloneCodeEditor | null = null\n\n    componentDidMount() {\n        if (!this.isChromeOrFirefox) {\n            return;\n        }\n        // generate instance of Monaco Editor\n        this.monaco = Monaco.editor.create(this.monacoDiv.current!, {\n            lineNumbers: 'off',\n            roundedSelection: false,\n            scrollBeyondLastLine: false,\n            scrollBeyondLastColumn: 0,\n            minimap: {\n                enabled: false\n            },\n            renderLineHighlight: 'none',\n            hideCursorInOverviewRuler: true,\n            links: false,\n            overviewRulerBorder: false,\n            automaticLayout: true,\n            lineDecorationsWidth: 0,\n            lineNumbersMinChars: 0,\n            wordWrap: 'wordWrapColumn'\n            // fontFamily: \"Monaco\" TODO: decide which font to use. By default, multiple fonts are loaded, which is quite slow\n        });\n        this.monaco.setValue(this.state.problem);\n        this.monaco.getModel()!.onDidChangeContent(() => {\n            this.changeProblem(this.monaco!.getModel()!.getValue());\n        });\n    }\n\n    componentWillUnmount(){\n        this.monaco = null;\n    }\n\n\n    componentDidUpdate() {\n        assert(this.isChromeOrFirefox);\n        if (this.state.newProblemUploaded) {\n            this.monaco!.setValue(this.state.problem);\n            this.setState({newProblemUploaded: false});\n        }\n    }\n    openUploadModal(){\n        this.setState({uploadModalIsOpen: true});\n    }\n\n    closeUploadModal(){\n        this.setState({uploadModalIsOpen: false});\n    }\n\n    async runSpacer() {\n        const fetchedJSON = await fetch('http://localhost:5000/spacer/start_iterative', {\n            method: 'POST',\n            mode: 'cors',\n            headers: {\n                'Accept': 'application/json',\n                'Content-Type': 'application/json'\n            },\n            body: JSON.stringify({\n                expName: this.state.problemName,\n                file: this.state.problem,\n                spacerUserOptions: this.state.spacerUserOptions,\n                varNames: this.state.varNames\n            })\n        });\n\n        try {\n            const json = await fetchedJSON.json();\n            console.log(\"backend response:\", json);\n            if (json.status === \"success\") {\n                //Redirect when success\n                const newPath = \"/replay/\"+json.exp_name;\n                console.log(\"redirect to \", newPath)\n                console.log(this.props.history);\n                this.props.history.push(newPath);\n            } else {\n                assert(json.status === \"error\");\n                const errorMess = json.message;\n                assert(errorMess !== undefined && errorMess !== null);\n                this.setState({\n                    messagesQ: [errorMess],\n                });\n            }\n        } catch (error) {\n            if (error.name === \"SatVisAssertionError\") {\n                throw error;\n            }\n            this.setState({\n                messagesQ: [`Error: ${error[\"message\"]}`],\n            });\n        }\n    }\n\n\n    render() {\n        if (!this.isChromeOrFirefox) {\n            return (\n                <section className=\"unsupported-message\">\n                    <svg viewBox=\"0 0 24 24\" className=\"icon\">\n                        <use xlinkHref={`${icons}#alert-triangle`}/>\n                    </svg>\n                    <span>Your current browser is not supported. Please use Chrome or Firefox!</span>\n                </section>\n            );\n        }\n\n        return (\n            <section className=\"component-menu\">\n                <h1>Spacer Visualization</h1>\n                <Modal\n                    isOpen={this.state.uploadModalIsOpen}\n                    onRequestClose={this.closeUploadModal.bind(this)}\n                    className =\"upload-modal\"\n                    overlayClassName =\"upload-modal-overlay\"\n                >\n                    <button onClick={this.closeUploadModal.bind(this)}>Close</button>\n                    <UploadSpacerLogModal/>\n                </Modal>\n                <section className=\"editor\">\n                    <div className=\"editor-spacer\">\n                        <main>\n                            <div className=\"headline-wrapper\">\n                                <h2>Input</h2>\n                                <small className=\"file-name\">{this.state.problemName}</small>\n\n                                <button title=\"Upload Spacer log \" onClick={this.openUploadModal.bind(this)}>\n                                    <svg viewBox=\"0 0 24 24\" className=\"icon big\">\n                                        <use xlinkHref={`${icons}#graph-s`}/>\n                                    </svg>\n                                </button>\n                                <button title=\"Pick a new file\" onClick={this.chooseFile.bind(this)}>\n                                    <svg viewBox=\"0 0 24 24\" className=\"icon big\">\n                                        <use xlinkHref={`${icons}#graph-upload`}/>\n                                    </svg>\n                                </button>\n                            </div>\n\n                            <input\n                                ref={this.fileUpload}\n                                type=\"file\"\n                                onChange={this.uploadEncoding.bind(this)}\n                            />\n                            <div ref={this.monacoDiv} className=\"monaco\"></div>\n                        </main>\n\n                        <aside>\n                            <MenuOptions \n                                spacerUserOptions = {this.state.spacerUserOptions}\n                                onChangeVariables = {this.changeVariables.bind(this)}\n                                changeSpacerUserOptions={this.changeSpacerUserOptions.bind(this)}\n                            />\n                            <ExpTable/>\n                        </aside>\n                    </div>\n                </section>\n\n                <section className=\"run-menu\">\n                    <button onClick={this.runSpacer.bind(this)}>Hit and Run</button>\n                </section>\n            </section>\n        );\n    }\n\n    chooseFile() {\n        if (this.fileUpload.current) {\n            this.fileUpload.current.click();\n        }\n    }\n    changeProblem(problem: string) {\n        this.setState({problem: problem});\n    }\n    changeProblemName(problemName: string) {\n        this.setState({problemName: problemName});\n    }\n    changeSpacerUserOptions(spacerUserOptions: string) {\n        this.setState({spacerUserOptions: spacerUserOptions});\n    }\n    changeVariables(e: React.ChangeEvent<HTMLInputElement>){\n        this.setState({\n            varNames: e.target.value\n        });\n    }\n\n    uploadEncoding(event: React.ChangeEvent<HTMLInputElement>) {\n        if (event.target.files !== null && event.target.files.length > 0) {\n            const file = event.target.files[0];\n\n            const reader = new FileReader();\n            // callback which will be executed when readAsText is called\n            reader.onloadend = () => {\n                const text = (reader.result ? reader.result : '') as string;\n                this.changeProblem(text);\n                this.changeProblemName(file.name);\n                this.setState({newProblemUploaded: true});\n            };\n            reader.readAsText(file);\n        }\n    }\n}\nexport default withRouter(Menu);\n","// @ts-nocheck\nimport * as React from 'react';\nimport * as d3 from 'd3';\nimport SunburstChart, {Node} from \"sunburst-chart\";\nimport {timeDetailedItem} from \"../dashboardTypes\";\n\ntype Props = {\n    data: timeDetailedItem | {},\n    height: number,\n    width: number,\n    className: string,\n    type: string,\n    index: string\n}\n\ntype State = {}\n\nclass TimeChart extends React.Component<Props, State> {\n    private totalTime: number;\n    private readonly palette: string[];\n    constructor(props) {\n        super(props);\n        this.totalTime = -1;\n        this.palette = [\"#023FA5\", \"#7D87B9\", \"#BEC1D4\", \"#D6BCC0\", \"#BB7784\", \"#8E063B\", \"#4A6FE3\", \"#8595E1\", \"#B5BBE3\",\n                \"#E6AFB9\", \"#E07B91\", \"#D33F6A\", \"#11C638\", \"#8DD593\", \"#C6DEC7\", \"#EAD3C6\", \"#F0B98D\", \"#EF9708\",\n                \"#0FCFC0\", \"#9CDED6\", \"#D5EAE7\", \"#F3E1EB\", \"#F6C4E1\", \"#F79CD4\"]\n    }\n    componentDidMount() {\n        this.createSunburst();\n    }\n    componentDidUpdate(prevProps: Readonly<any>, prevState: Readonly<any>, snapshot?: any): void {\n        this.createSunburst();\n    }\n\n    prepareData() {\n        let tmp:Object[] = [];\n        let keys = Object.keys(this.props.data);\n        \n        for (let i = 0; i < keys.length; i++){\n            tmp.push({\n                name: keys[i], \n                size: this.props.data[keys[i]],\n                children: []\n            });\n        }\n        \n        return tmp;\n    }\n    \n    getData(input): Node[] {        \n        let result = {};\n        let last = \"zzzzzzz\";\n        \n        for (let i = 0; i < input.length; i++){\n            let key = input[i].name;\n            let value = input[i].size;\n            \n            if (key.includes(last)){\n                result[last].children.push({\n                    name: key,\n                    size: value,\n                    children: []\n                });\n            }\n            else {\n                result[key] = {\n                    name: key,\n                    size: value,\n                    children: []\n                };\n                last = key\n            }\n        }\n        \n        let resultKeys = Object.keys(result);\n        for (let i = 0; i < resultKeys.length; i++){\n            if (result[resultKeys[i]].children){\n                result[resultKeys[i]].children = this.getData(result[resultKeys[i]].children);\n            }\n        }\n        \n        return Object.values(result);\n    }\n    \n    createSunburst() {\n        if (this.props.type === \"\") d3.select(\".sunburst-viz\").remove();\n        if (this.props.type !== \"\") d3.select(\".\" + this.props.className + \" .sunburst-viz\").remove();\n        let colour = d3.scaleOrdinal()\n            .domain(Object.keys(this.props.data))\n            .range(this.palette);\n        let data: Node[] = this.getData(this.prepareData());\n        const myChart = SunburstChart();\n        myChart.data(data[0])(document.getElementById(this.props.className)!)\n               .width(this.props.width)\n               .height(this.props.height)\n               .color(x => colour(x.name))\n               .label(x => x.name!)\n               .size('size')\n               .tooltipTitle(x => x.name!);\n        \n        if (this.props.type !== \"\"){\n            myChart.showLabels(false);\n        }\n    }\n\n\n    render() {\n        this.totalTime = this.props.data[\"time\"];\n        return (\n          <div className={this.props.className} id={this.props.className}>\n              {this.props.type === \"\" && <h2>Total Time: {this.totalTime}</h2>}\n              {this.props.type !== \"\" && <p>{this.props.index}</p>}\n              \n          </div>  \n        );\n    }\n}\n\nexport default TimeChart;\n","//@ts-nocheck\n\nexport function potholeToNormal(input) {\n    let words = input.split(\"_\");\n    for (let i = 0; i < words.length; i++){\n        words[i] = words[i][0].toUpperCase() + words[i].substring(1);\n    }\n    \n    return words.join(\" \");\n    \n}\n","// @ts-nocheck\nimport * as React from 'react';\nimport TimeChart from \"./TimeChart\";\nimport {potholeToNormal} from \"../../helpers/naming\";\nimport {dataItem} from \"../dashboardTypes\";\n\ntype Props = {\n    data: dataItem\n}\n\ntype State = {}\n\nclass IndividualBenchmark extends React.Component<Props, State> {\n    componentDidMount() {\n        console.log(this.props.data);\n    }\n    componentDidUpdate(prevProps: Readonly<any>, prevState: Readonly<any>, snapshot?: any): void {\n        console.log(this.props.data);\n    }\n\n    filterTimeData() {\n        return Object.keys(this.props.data)\n            .filter(function(d) {return d.includes(\"time\")})\n            .reduce((obj, key) => {\n                obj[key] = this.props.data[key];\n                return obj;\n            }, {});\n    }\n    render() {\n        let dataDisplay = [\"result\",\"depth\", \"memory\", \"max_memory\", \"SPACER_num_invariants\", \"SPACER_num_lemmas\",\n            \"SPACER_num_propagations\", \"SPACER_num_active_lemmas\"];\n        let timeData = this.filterTimeData();\n        return (\n          <div className=\"overview\">\n              <div className=\"details\">\n                  <h1>{this.props.data.index}</h1>\n                  {dataDisplay.map((dataKey, key) => (\n                      <p className=\"data-details\" key={key}>{potholeToNormal(dataKey)}: {this.props.data[dataKey]}</p>\n                  ))}\n              </div>\n              <TimeChart \n                  data={timeData}\n                  height={600}\n                  width={600}\n                  className={\"time\"}\n                  type={\"\"}\n                  index={\"\"}\n              />\n          </div>  \n        );\n    }\n}\n\nexport default IndividualBenchmark;\n","// @ts-nocheck\nimport * as React from 'react';\nimport * as d3 from 'd3';\nimport {dashboardConfig, resultItem} from \"../dashboardTypes\";\n\ntype Props = {\n    key: number,\n    data: resultItem [],\n    config: dashboardConfig,\n    selectBenchmark: (e: resultItem) => void\n}\n\ntype State = {}\n\nclass ResultsOverview extends React.Component<Props, State> {\n    componentDidMount() {\n        this.createResultsOverview();\n    }\n    componentDidUpdate(prevProps: Readonly<any>, prevState: Readonly<any>, snapshot?: any): void {\n        this.createResultsOverview();\n    }\n\n    createResultsOverview() {\n        d3.select(\".results-overview svg\").remove();\n        let data = this.props.data;\n        \n        let results = d3.map(data, function(d) {return d.result;}).keys();\n        \n        let colour = d3.scaleOrdinal()\n            .domain(results)\n            .range(d3.schemeCategory10);\n        \n        let xValue = function(d) {\n            return d.index;\n        };\n        let index = d3.map(data,function(d) {return d.index;}).keys();\n        let xScale = d3.scaleBand()\n            .domain(index)\n            .range([this.props.config.margin.left, this.props.config.width - this.props.config.margin.right]);\n\n        let xMap = function(d) {\n            return xScale(xValue(d))\n        };\n\n        let xAxis = d3.axisBottom(xScale).tickValues([]);\n\n        let yValue = function(d) {\n            return d.SPACER_num_invariants;\n        };\n        let yScale = d3.scaleLinear()\n            .domain([d3.min(data, yValue), d3.max(data, yValue)])\n            .range([this.props.config.graphHeight - this.props.config.margin.top, this.props.config.margin.bottom]);\n\n        let yMap = function(d) {\n            return yScale(yValue(d))\n        };\n\n        let yAxis = d3.axisLeft(yScale);\n\n        let svg = d3.select(\".results-overview\")\n            .append(\"svg\")\n            .attr(\"width\", this.props.config.width)\n            .attr(\"height\", this.props.config.height);\n        svg.append(\"text\")\n            .attr(\"x\", this.props.config.width / 2)\n            .attr(\"y\", this.props.config.margin.top)\n            .attr(\"text-anchor\", \"middle\")\n            .style(\"font-size\", this.props.config.font.title)\n            .style(\"text-decoration\", \"underline\")\n            .text(\"Index x Result x Num of Invariants\");\n        svg.append(\"g\")\n            .attr(\"class\", \"x-axis\")\n            .attr(\"transform\", \"translate(0,\" + (this.props.config.graphHeight - this.props.config.margin.top) + \")\")\n            .call(xAxis);\n        svg.append(\"g\")\n            .attr(\"class\", \"y-axis\")\n            .attr(\"transform\", \"translate(\" + this.props.config.margin.left + \",0)\")\n            .style(\"font-size\", this.props.config.font.axis)\n            .call(yAxis);\n        let g = svg.append(\"g\");\n        g.selectAll(\".dot\")\n            .data(data)\n            .enter()\n            .append('circle')\n            .attr('r', 10)\n            .attr('cx', function(d) {return xMap(d) + xScale.bandwidth() /2})\n            .attr('cy', yMap)\n            .on(\"mouseenter\", function(d) {\n                d3.select(\".overview-tooltip\")\n                    .append(\"text\")\n                    .text(d.index);\n            })\n            .on(\"mouseout\", function(d) {\n                d3.select(\".overview-tooltip\")\n                    .select(\"text\")\n                    .remove();\n            })\n            .on(\"click\", this.props.selectBenchmark)\n            .style(\"fill\", function(d) {return colour(d.result)});\n        g.selectAll(\".result-text\")\n            .data(data)\n            .enter()\n            .append(\"text\")\n            .attr(\"class\", \"label\")\n            .style(\"font-size\", this.props.config.font.label)\n            .attr(\"x\", function(d) {return xMap(d) + (xScale.bandwidth() / 4)})\n            .attr(\"y\", function(d) {return yMap(d) - 25})\n            .attr(\"dy\", \".75em\")\n            .text(function(d) {return d.SPACER_num_invariants});\n        g.selectAll(\"legendDots\")\n            .data(results)\n            .enter()\n            .append(\"circle\")\n            .attr(\"cx\", function(this,d,i) {return this.props.config.margin.left + i*100}.bind(this))\n            .attr(\"cy\", this.props.config.graphHeight + 15)\n            .attr(\"r\", 5)\n            .style(\"fill\", function(d){return colour(d)});\n        g.selectAll(\"legendText\")\n            .data(results)\n            .enter()\n            .append(\"text\")\n            .attr(\"x\", function(this,d,i){return this.props.config.margin.left + 10 + i*100}.bind(this))\n            .attr(\"y\", this.props.config.graphHeight + 20)\n            .text(function(d){return d})\n\n\n\n    }\n\n    render() {\n        return (\n            <div className=\"results-overview\">\n            </div>\n        );\n    }\n}\n\nexport default ResultsOverview\n","import * as React from 'react';\nimport TimeChart from \"./TimeChart\";\nimport {timeDetailedItem} from \"../dashboardTypes\";\n\ntype State = {}\n\ntype Props = {\n    data: timeDetailedItem[]\n}\n\nclass TimeZoom extends React.Component<Props, State> {\n    render() {\n        return (\n            <div>\n                {this.props.data.map((instance, key) => {\n                    return (\n                        <TimeChart\n                            key={key}\n                            data={instance}\n                            height={200}\n                            width={200}\n                            className={\"timezoom\" + key}\n                            type={\"timezoom\"}\n                            index={instance[\"index\"]!}\n                        />\n                    );\n                })}\n                \n            </div>\n        );\n    }\n}\n\nexport default TimeZoom;\n","// @ts-nocheck\nimport * as React from 'react';\nimport * as d3 from 'd3';\nimport {potholeToNormal} from \"../../helpers/naming\";\nimport {dashboardConfig, depthItem, memoryItem, timeItem} from \"../dashboardTypes\";\n\ntype Props = {\n    key: number,\n    data: (depthItem | memoryItem | timeItem) [],\n    config: dashboardConfig,\n    className: string,\n    classText: string,\n    yValue: string,\n    updateZoomView: (type:string) => void\n}\n\ntype State = {}\n\nclass GeneralGraphOverview extends React.Component<Props, State> {\n    componentDidMount() {\n        this.createGraph();\n    }\n    componentDidUpdate(prevProps: Readonly<any>, prevState: Readonly<any>, snapshot?: any): void {\n        this.createGraph();\n    }\n    \n    createGraph() {\n        d3.select(\".\" + this.props.className + \" svg\").remove();\n        \n        if (this.props.data.length === 0) return;\n        let data = this.props.data;\n        let xValue = function(d) {\n            return d.index;\n        };\n        let index = d3.map(data,function(d) {return d.index;}).keys();\n        let xScale = d3.scaleBand()\n            .domain(index)\n            .range([this.props.config.margin.left, this.props.config.width - this.props.config.margin.right]);\n        let xMap = function(d) {\n            return xScale(xValue(d))\n        };\n        let xAxis = d3.axisBottom(xScale).tickValues([]);\n\n        let yValue = function(this,d) {\n            return d[this.props.yValue];\n        }.bind(this);\n        let yScale = d3.scaleLinear()\n            .domain([d3.min(data, yValue), d3.max(data, yValue)])\n            .range([this.props.config.graphHeight - this.props.config.margin.top, this.props.config.margin.bottom]);\n        let yMap = function(d) {\n            return yScale(yValue(d))\n        };\n        let yAxis = d3.axisLeft(yScale);\n\n        let svg = d3.select(\".\" + this.props.className)\n            .append(\"svg\")\n            .attr(\"width\", this.props.config.width)\n            .attr(\"height\", this.props.config.height)\n            .on (\"click\", this.props.updateZoomView);\n        svg.append(\"text\")\n            .attr(\"x\", this.props.config.width / 2)\n            .attr(\"y\", this.props.config.margin.top)\n            .attr(\"text-anchor\", \"middle\")\n            .style(\"font-size\", this.props.config.font.title)\n            .style(\"text-decoration\", \"underline\")\n            .text(\"Index x \" + potholeToNormal(this.props.yValue));\n        svg.append(\"g\")\n            .attr(\"class\", \"x-axis\")\n            .attr(\"transform\", \"translate(0,\" + (this.props.config.graphHeight - this.props.config.margin.top) + \")\")\n            .call(xAxis);\n        svg.append(\"g\")\n            .attr(\"class\", \"y-axis\")\n            .attr(\"transform\", \"translate(\" + this.props.config.margin.left + \",0)\")\n            .style(\"font-size\", this.props.config.font.axis)\n            .call(yAxis);\n        let g = svg.append(\"g\");\n        \n        g.selectAll(\".bar\")\n            .data(data)\n            .enter()\n            .append(\"rect\")\n            .attr(\"class\", \"bar\")\n            .attr(\"x\", xMap)\n            .attr(\"y\", yMap)\n            .attr(\"width\", xScale.bandwidth() - 1)\n            .attr(\"height\", function(this,d) {return (this.props.config.graphHeight - this.props.config.margin.top - yScale(d[this.props.yValue]))}.bind(this));\n\n        g.selectAll(\".\" + this.props.classText)\n            .data(data)\n            .enter()\n            .append(\"text\")\n            .style(\"font-size\", this.props.config.font.label)\n            .attr(\"class\", \"label\")\n            .attr(\"x\", function(d) {return xMap(d)})\n            .attr(\"y\", function(d) {return yMap(d) - 15})\n            .attr(\"dy\", \".75em\")\n            .text(function(this,d) {return d[this.props.yValue]}.bind(this));\n    }\n    render() {\n        return (\n            <div className={this.props.className}>\n            </div>\n\n        );\n    }\n}\n\nexport default GeneralGraphOverview;\n","// @ts-nocheck\nimport * as React from 'react';\nimport './../styles/Dashboard.css';\nimport * as d3 from 'd3';\nimport IndividualBenchmark from \"./DashboardComponents/IndividualBenchmark\";\nimport ResultsOverview from \"./DashboardComponents/ResultsOverview\";\nimport arrow from './../resources/icons/singles/angle-arrow-down.svg'\nimport TimeZoom from \"./DashboardComponents/TimeZoom\";\nimport GeneralGraphOverview from \"./DashboardComponents/GeneralGraphOverview\";\nimport {dashboardConfig, dataItem, depthItem, memoryItem, resultItem, timeItem} from \"./dashboardTypes\";\n\ntype State = {\n    data: dataItem[]\n    selectedBenchmark: string,\n    graphMin: number,\n    graphMax: number,\n    customMode: boolean,\n    customData: {\n        depth: depthItem[],\n        result: resultItem[], \n        memory: memoryItem[], \n        time: timeItem[]\n    },\n    zoomMode: string,\n    dashboardConfig: dashboardConfig\n}\n\ntype Props = {\n    rawData: string\n}\n\nclass Dashboard extends React.Component<Props, State> {\n    private readonly overviewMetrics: string[];\n    constructor(props: Props) {\n        super(props);\n        this.overviewMetrics = [\"depth\", \"memory\", \"time\", \"result\"];\n            this.state = {\n            data: [],\n            selectedBenchmark: \"\",\n            graphMin: 0,\n            graphMax: 30,\n            customMode: false,\n            customData: {\n                depth: [],\n                result: [],\n                memory: [],\n                time: []\n            },\n            zoomMode: \"\",\n            dashboardConfig: {\n                height: 450,\n                width: 1600,\n                graphHeight: 400,\n                margin: {\n                    top: 20,\n                    right: 20,\n                    bottom: 50,\n                    left: 60\n                },\n                font: {\n                    title: \"20px\",\n                    axis: \"20px\",\n                    label: \"14px\"\n                },\n                barNum: 10\n            }\n        };\n    }\n    componentDidMount() {\n        this.loadData();\n        document.addEventListener(\"keydown\", this.handleGraphTranslationKeyboard.bind(this));\n    }\n    \n\n    loadData() {\n        let file = this.props.rawData;\n        let parsedData = d3.csvParse(file, function (d) {\n            d.SPACER_cluster_out_of_gas = +d.SPACER_cluster_out_of_gas;\n            d.SPACER_expand_pob_undef = +d.SPACER_expand_pob_undef;\n            d.SPACER_inductive_level = +d.SPACER_inductive_level;\n            d.SPACER_max_cluster_size = +d.SPACER_max_cluster_size;\n            d.SPACER_max_cvx_reduced_dim = +d.SPACER_max_cvx_reduced_dim;\n            d.depth = +d.depth;\n            d.SPACER_max_query_lvl = +d.SPACER_max_query_lvl;\n            d.SPACER_need_sage = +d.SPACER_need_sage;\n            d.SPACER_num_abstractions = +d.SPACER_num_abstractions;\n            d.SPACER_num_abstractions_failed = +d.SPACER_num_abstractions_failed;\n            d.SPACER_num_abstractions_success = +d.SPACER_num_abstractions_success;\n            d.SPACER_num_active_lemmas = +d.SPACER_num_active_lemmas;\n            d.SPACER_num_cant_abstract = +d.SPACER_num_cant_abstract;\n            d.SPACER_num_ctp_blocked = +d.SPACER_num_ctp_blocked;\n            d.SPACER_num_dim_reduction_success = +d.SPACER_num_dim_reduction_success;\n            d.SPACER_num_invariants = +d.SPACER_num_invariants;\n            d.SPACER_num_is_invariant = +d.SPACER_num_is_invariant;\n            d.SPACER_num_lemma_jumped = +d.SPACER_num_lemma_jumped;\n            d.SPACER_num_lemmas = +d.SPACER_num_lemmas;\n            d.SPACER_num_mbp_failed = +d.SPACER_num_mbp_failed;\n            d.SPACER_num_merge_gen = +d.SPACER_num_merge_gen;\n            d.SPACER_num_merge_gen_failed = +d.SPACER_num_merge_gen_failed;\n            d.SPACER_num_merge_gen_success = +d.SPACER_num_merge_gen_success;\n            d.SPACER_num_no_over_approximate = +d.SPACER_num_no_over_approximate;\n            d.SPACER_num_non_lin = +d.SPACER_num_non_lin;\n            d.SPACER_num_pobs = +d.SPACER_num_pobs;\n            d.SPACER_num_propagations = +d.SPACER_num_propagations;\n            d.SPACER_num_queries = +d.SPACER_num_queries;\n            d.SPACER_num_reach_queries = +d.SPACER_num_reach_queries;\n            d.SPACER_num_refinements = +d.SPACER_num_refinements;\n            d.SPACER_num_reuse_reach_facts = +d.SPACER_num_reuse_reach_facts;\n            d.SPACER_num_sync_cvx_cls = +d.SPACER_num_sync_cvx_cls;\n            d.SPACER_num_under_approximations = +d.SPACER_num_under_approximations;\n            d.SPACER_pob_out_of_gas = +d.SPACER_pob_out_of_gas;\n            d.SPACER_wide_attmpts = +d.SPACER_wide_attmpts;\n            d.SPACER_wide_success = +d.SPACER_wide_success;\n            d.max_memory = +d.max_memory;\n            d.memory = +d.memory;\n            d.time = +d.time;\n            d.time_iuc_solver_get_iuc = +d.time_iuc_solver_get_iuc;\n            d.time_iuc_solver_get_iuc_hyp_reduce1 = +d.time_iuc_solver_get_iuc_hyp_reduce1;\n            d.time_iuc_solver_get_iuc_hyp_reduce2 = +d.time_iuc_solver_get_iuc_hyp_reduce2;\n            d.time_iuc_solver_get_iuc_learn_core = +d.time_iuc_solver_get_iuc_learn_core;\n            d.time_pool_solver_proof = +d.time_pool_solver_proof;\n            d.time_pool_solver_smt_total = +d.time_pool_solver_smt_total;\n            d.time_pool_solver_smt_total_sat = +d.time_pool_solver_smt_total_sat;\n            d.time_pool_solver_smt_total_undef = +d.time_pool_solver_smt_total_undef;\n            d.time_spacer_ctp = +d.time_spacer_ctp;\n            d.time_spacer_init_rules = +d.time_spacer_init_rules;\n            d.time_spacer_init_rules_pt_init = +d.time_spacer_init_rules_pt_init;\n            d.time_spacer_mbp = +d.time_spacer_mbp;\n            d.time_spacer_solve = +d.time_spacer_solve;\n            d.time_spacer_solve_propagate = +d.time_spacer_solve_propagate;\n            d.time_spacer_solve_pt_must_reachable = +d.time_spacer_solve_pt_must_reachable;\n            d.time_spacer_solve_reach = +d.time_spacer_solve_reach;\n            d.time_spacer_solve_reach_children = +d.time_spacer_solve_reach_children;\n            d.time_spacer_solve_reach_cluster = +d.time_spacer_solve_reach_cluster;\n            d.time_spacer_solve_reach_gen_bool_ind = +d.time_spacer_solve_reach_gen_bool_ind;\n            d.time_spacer_solve_reach_gen_merge = +d.time_spacer_solve_reach_gen_merge;\n            d.time_spacer_solve_reach_gen_merge_cvx_cls = +d.time_spacer_solve_reach_gen_merge_cvx_cls;\n            d.time_spacer_solve_reach_gen_wide = +d.time_spacer_solve_reach_gen_wide;\n            d.time_spacer_solve_reach_is_reach = +d.time_spacer_solve_reach_is_reach;\n            return d;\n        });\n        this.setState({\n            data: parsedData\n        })\n        \n    }\n    \n    handleSidebarClick(e:React.MouseEvent<HTMLLIElement>) {\n        let event = e.target as HTMLElement;\n        this.setState({\n            selectedBenchmark: event.innerText\n        });\n    }\n    \n    handleSidebarClickDot(e: resultItem){\n        this.setState({\n            selectedBenchmark: e.index\n        });\n    }\n    \n    handleHomeClick() {\n        this.setState({\n            selectedBenchmark: \"\",\n            customMode: false,\n            customData: {\n                depth: [],\n                time: [],\n                memory: [],\n                result: []\n            },\n            zoomMode: \"\", \n            graphMin: 0,\n            graphMax: 30\n        });\n    }\n    \n    handleClearClick() {\n        this.setState({\n            customData: {\n                depth: [],\n                time: [],\n                memory: [],\n                result: []\n            }\n        });\n    }\n    \n    moveGraphLeft() {\n        if (this.state.graphMin > 0){\n            this.setState({\n                graphMin: this.state.graphMin - 1,\n                graphMax: this.state.graphMax - 1\n            });\n        }\n    }\n    \n    moveGraphRight() {\n        if (this.state.graphMax < this.state.data.length - 1 ){\n            this.setState({\n                graphMin: this.state.graphMin + 1,\n                graphMax: this.state.graphMax + 1\n            });\n        }\n    }\n    \n    moveGraphUp() {\n        if (this.state.graphMin - 10 >= 0 ){\n            this.setState({\n                graphMin: this.state.graphMin - 10,\n                graphMax: this.state.graphMax - 10\n            });\n        }\n    }\n\n    moveGraphDown() {\n        if (this.state.graphMax + 10 < this.state.data.length){\n            this.setState({\n                graphMin: this.state.graphMin + 10,\n                graphMax: this.state.graphMax + 10\n            });\n        }\n    }\n\n    handleGraphTranslationClick(e:React.MouseEvent) {\n        e.preventDefault();\n        let clickEvent = e.target as HTMLImageElement;\n        if (clickEvent.alt === \"left-arrow\"){\n            this.moveGraphLeft();\n        }\n        else if (clickEvent.alt === \"right-arrow\"){\n            this.moveGraphRight();\n        }\n    }\n    \n    handleGraphTranslationKeyboard(e:KeyboardEvent) {\n        e.preventDefault();\n        if  (e.key === \"ArrowLeft\"){\n            this.moveGraphLeft();\n        }\n        else if (e.key === \"ArrowRight\") {\n            this.moveGraphRight();\n        }\n        else if (e.key === \"ArrowDown\") {\n            this.moveGraphDown();\n        }\n        else if (e.key === \"ArrowUp\") {\n            this.moveGraphUp();\n        }\n        \n    }\n    \n    handleCustomClick() {\n        this.setState({\n            customMode: !this.state.customMode\n        });\n        if (this.state.customMode){\n            this.setState({\n                customData: {\n                    depth: [],\n                    time: [],\n                    memory: [],\n                    result: []\n                }\n            });\n        }\n    }\n\n    filterDictionary(keys, custom:boolean=false, index:string=\"\"){\n        let data = this.state.data.slice(this.state.graphMin, this.state.graphMax);\n        if (custom) {\n            data = this.state.data.filter(function(d) {return d.index === index})\n        }\n        let result:Object[] = [];\n        for (let i = 0; i < data.length; i++){\n            result.push({});\n            for (let j = 0; j < keys.length; j ++){\n                result[i][keys[j]] = data[i][keys[j]];\n            }\n        }\n        return result;\n    }\n    \n    addToCustomData(e: React.MouseEvent) {\n        let event = e.target as HTMLLIElement;\n        for (let i = 0; i < this.overviewMetrics.length; i++){\n            let metric = this.overviewMetrics[i];\n            let metricDataKeys = [metric].concat([\"index\"]);\n            if (metric === \"result\") {\n                metricDataKeys.push(\"SPACER_num_invariants\");\n            }\n            let totalData = this.state.customData[metric].concat(this.filterDictionary(metricDataKeys, true, event.innerHTML));\n            \n            if (totalData.length > (this.state.graphMax - this.state.graphMin)){\n                totalData.splice(0,1);\n            }\n            let customDataCopy = this.state.customData;\n            customDataCopy[metric] = totalData;\n            this.setState({\n                customData: customDataCopy\n            });\n        }\n    }\n    \n    setZoomView(type: string) {\n        this.setState({\n            zoomMode: type, \n            graphMin: 0,\n            graphMax: 49\n        });\n    }\n    \n    render() {\n        let benchmarks = d3.map(this.state.data, function(d) {return d.index;}).keys();\n        let selectedBenchmark = this.state.selectedBenchmark;\n        let timeZoomData;\n        if (this.state.zoomMode === \"time\") {\n            let timeKeys = Object.keys(this.state.data[0]).filter(x => x.includes(\"time\"));\n            timeKeys.push(\"index\");\n            timeZoomData = this.filterDictionary(timeKeys);\n        }\n        return (\n          <div className=\"page\">\n                  <div className=\"sidebar\" id=\"sidebar\">\n                  {benchmarks.map((name, key ) => {\n                      if (this.state.customMode){\n                          if (this.state.customData.depth.filter(d => d.index === name).length > 0){\n                              return (<li className=\"selected\" key={key} onClick={this.addToCustomData.bind(this)}>{name}</li>);\n                          }\n                          return (<li key={key} onClick={this.addToCustomData.bind(this)}>{name}</li>);\n                      }\n                      else if (selectedBenchmark) {\n                          if (name === selectedBenchmark) {\n                              return (<li className=\"selected\" key={key}\n                                          onClick={this.handleSidebarClick.bind(this)}>{name}</li>);\n                          }\n                          return (<li key={key} onClick={this.handleSidebarClick.bind(this)}>{name}</li>);\n                          \n                      }\n                      else {\n                          if (key >= this.state.graphMin && key < this.state.graphMax) {\n                              return (<li className=\"selected\" key={key}\n                                          onClick={this.handleSidebarClick.bind(this)}>{name}</li>);\n                          }\n                          return (<li key={key} onClick={this.handleSidebarClick.bind(this)}>{name}</li>);\n                      }\n                  })}\n              </div>\n              <div className=\"visual\">\n                  {this.state.selectedBenchmark !== \"\" &&\n                  <IndividualBenchmark \n                      data={this.state.data.filter(function(d) {return d.index === selectedBenchmark})[0]}\n                  />}\n                  {this.state.selectedBenchmark === \"\" && this.state.zoomMode === \"\" &&\n                  <div className=\"dashboard\">\n                      {this.overviewMetrics.map((type, key) => {\n                          let data;\n                          if (this.state.customMode) {\n                              data = this.state.customData[type];\n                              if (type === \"result\"){\n                                  return (\n                                      <ResultsOverview\n                                          key={key}\n                                          data={data}\n                                          config={this.state.dashboardConfig}\n                                          selectBenchmark={this.handleSidebarClickDot.bind(this)}\n                                      />\n                                  );\n                                  \n                              }\n                          }\n                          else if (type === \"result\"){\n                              data = this.filterDictionary([type].concat([\"index\", \"SPACER_num_invariants\"]));\n                              return (\n                                  <ResultsOverview\n                                      key={key}\n                                      data={data}\n                                      config={this.state.dashboardConfig}\n                                      selectBenchmark={this.handleSidebarClickDot.bind(this)}\n                                  />\n                              );\n                          }\n                          else {\n                              data = this.filterDictionary([\"index\"].concat([type]));\n                          }\n                          return (\n                              <GeneralGraphOverview\n                                  key={key}\n                                  data={data}\n                                  config={this.state.dashboardConfig}\n                                  className={type + \"-overview\"}\n                                  classText={type + \"-text\"}\n                                  yValue={type}\n                                  updateZoomView={this.setZoomView.bind(this, type === \"time\" ? \"time\" : \"\")}\n                              />\n                          );\n                      })}\n                      <img className=\"left-arrow\" src={arrow} alt=\"left-arrow\" onClick={this.handleGraphTranslationClick.bind(this)}/>\n                      <img className=\"right-arrow\" src={arrow} alt=\"right-arrow\" onClick={this.handleGraphTranslationClick.bind(this)}/>\n                  </div>}\n                  {this.state.zoomMode === \"time\" &&\n                  <TimeZoom\n                      data={timeZoomData}\n                      \n                  />}\n              </div>\n              \n              <button className=\"home-button\" onClick={this.handleHomeClick.bind(this)}>Home</button>\n              <button className=\"custom-button\" onClick={this.handleCustomClick.bind(this)}>Custom</button>\n              {this.state.customMode && <button className=\"clear-button\" onClick={this.handleClearClick.bind(this)}>Clear</button>}\n          </div>  \n        );\n    }\n}\n\nexport default Dashboard;\n","// @ts-nocheck\nimport * as React from 'react';\n\ntype Props = {\n    rawData: {name: string, id: string, content: string}[],\n    updateData: (newValue: {name:string, id:string, content:string}) => void\n}\n\ntype State = {\n    rawData: [],\n    file: File | null\n}\n\nclass DashboardLanding extends React.Component<Props, State> {\n    private fileReader: FileReader | undefined;\n    constructor(props) {\n        super(props);\n        this.state = {\n            rawData: [],\n            file: null\n        }\n    }\n    \n    handleFileRead(file: File) {\n        const content = this.fileReader!.result!.toString();\n        let returnObject = {\n            name: file.name,\n            id: Date.now().toString(),\n            content: content!\n        };\n        \n        this.props.updateData(returnObject);\n    }\n    \n    handleFileChosen(e: React.MouseEvent<HTMLButtonElement>) {\n        e.preventDefault();\n        let file = this.state.file;\n        this.fileReader = new FileReader();\n        this.fileReader.onloadend = this.handleFileRead.bind(this, file!);\n        this.fileReader.readAsText(file!);\n    }\n    \n    updateFile(e: React.ChangeEvent<HTMLInputElement>) {\n        this.setState({\n            file: e.target.files![0]\n        });\n    }\n    \n    render() {\n        return (\n            <div className=\"dashboard-menu\">\n                <h1>Spacer Dashboard</h1>\n                <form>\n                <input type=\"file\" accept=\".csv\" onChange={this.updateFile.bind(this)}/>\n                <button type=\"submit\" className=\"fake-button\" onClick={this.handleFileChosen.bind(this)}>Upload</button>\n                </form>\n                <div className=\"file-list\">\n                    <h2>Uploaded Files</h2>\n                    {this.props.rawData.length > 0 && this.props.rawData.map((dataItem, key) => (\n                        <li key={key}>\n                            <span>{dataItem.name}</span><a href={\"#/dashboard/\" + dataItem.id}>Analysis</a>\n                        </li>\n                    ))}\n                </div>\n            </div>\n        );\n    }\n}\n\nexport default DashboardLanding;\n","import * as React from 'react';\nimport '../styles/Editor.css';\nimport * as Monaco from 'monaco-editor'\nimport TreeEditor from \"./TreeEditor\";\nimport { AST, ASTTransformer, Transformer} from \"../helpers/transformers\";\nimport {inOutExample} from \"../helpers/datatypes\";\nconst icons = require('../resources/icons/all.svg') as string;\n\ntype Props = {\n    input: string,\n    expName: string,\n    onTransformExprs?: (t: string)=> Promise<void>,\n}\n\ntype State = {\n    input: string,\n    output: string,\n    inputOutputExamples: inOutExample[]\n}\n\n\nexport class EditorPage extends React.Component<Props, State> {\n    private isChromeOrFirefox = true;\n    monacoDiv = React.createRef<HTMLDivElement>();\n    monaco: Monaco.editor.IStandaloneCodeEditor | null = null\n\n    state: State = {\n        input: \"()\",\n        output: \"\",\n        inputOutputExamples: []\n    };\n\n\n    componentDidMount() {\n        if (!this.isChromeOrFirefox) {\n            return;\n        }\n\n        // generate instance of Monaco Editor\n        this.monaco = Monaco.editor.create(this.monacoDiv.current!, {\n            lineNumbers: 'off',\n            roundedSelection: false,\n            scrollBeyondLastLine: false,\n            scrollBeyondLastColumn: 0,\n            minimap: {\n                enabled: false\n            },\n            renderLineHighlight: 'none',\n            hideCursorInOverviewRuler: true,\n            links: false,\n            overviewRulerBorder: false,\n            automaticLayout: false,\n            lineDecorationsWidth: 0,\n            lineNumbersMinChars: 0,\n            wordWrap: 'wordWrapColumn'\n            // fontFamily: \"Monaco\" TODO: decide which font to use. By default, multiple fonts are loaded, which is quite slow\n        });\n\n        this.monaco.setValue(this.props.input);\n\n        /* this.monaco.setValue(this.props.problem);\n         * this.monaco.getModel()!.onDidChangeContent(() => {\n         *     console.log(this.monaco!.getModel()!.getValue());\n         *     this.props.onChangeProblem(this.monaco!.getModel()!.getValue());\n         * }); */\n    }\n    addInputOutputExample(example: inOutExample){\n        this.setState({inputOutputExamples: [...this.state.inputOutputExamples, example]});\n    }\n    openEditor(){\n        console.log(\"click Apply\")\n\n        let input = this.monaco!.getModel()!.getValueInRange(this.monaco!.getSelection()!);\n        console.log(input)\n        /* getValue()!; */\n\n        this.setState({\n            input: input\n        });\n    }\n\n    getFormulas(input: string): string[]{\n        return input.split(/\\n\\s*\\n/);\n    }\n\n    blast(tStack: Transformer[]){\n        let all_formulas = this.getFormulas(this.monaco?.getModel()!.getValue()!);\n        let transformer = new ASTTransformer();\n\n\n        console.log(all_formulas);\n        console.log(tStack);\n        console.log(\"pew pew !\");\n\n        let output=\"\"\n        for(var f of all_formulas){\n            let ast = new AST(f);\n            let new_ast = transformer.runStack(ast, tStack);\n            let new_f = new_ast.toString(-1, new_ast.nodeList[0]);\n            output+=new_f+\"\\n\\n\";\n        }\n        this.setState({output: output});\n    }\n\n    pushToMessageQ(channel: string, msg: string){\n    }\n\n    render() {\n        if (!this.isChromeOrFirefox) {\n            return (\n                <section className=\"unsupported-message\">\n                    <svg viewBox=\"0 0 24 24\" className=\"icon\">\n                        <use xlinkHref={`${icons}#alert-triangle`}/>\n                    </svg>\n                    <span>Your current browser is not supported. Please use Chrome or Firefox!</span>\n                </section>\n            );\n        }\n\n        return (\n            <section className=\"component-menu\">\n                <section className=\"editor\">\n                    <div id=\"editor-wrapper\">\n                        <h2>Original</h2>\n                        <div ref={this.monacoDiv} className=\"monaco\" id=\"input\"></div>\n                        <button onClick={this.openEditor.bind(this)}>Open Editor</button>\n                        <h2>Transformed</h2>\n                        <textarea ref=\"output\" id=\"output\" rows={30} value={this.state.output} readOnly></textarea>\n                    </div>\n                     <TreeEditor\n                         expName ={this.props.expName}\n                         input = {this.state.input}\n                         onBlast = {this.blast.bind(this)}\n                         isModal = {false}\n                         onAddInputOutputExample ={this.addInputOutputExample.bind(this)}\n                         onPushToMessageQ={this.pushToMessageQ.bind(this)}\n                     />\n                </section>\n\n            </section>\n        );\n    }\n}\n\n","import * as React from 'react';\nimport { HashRouter, Route} from \"react-router-dom\";\nimport App from './App';\nimport Menu from './Menu';\nimport { RouteComponentProps } from 'react-router';\nimport Dashboard from \"./Dashboard\";\nimport DashboardLanding from \"./DashboardLanding\";\nimport { EditorPage } from \"./EditorPage\";\nimport '../styles/AppWrapper.css';\ntype State = {\n    rawData: {name: string, id: string, content: string}[]\n}\n\nexport class AppRouter extends React.Component<{} & RouteComponentProps<{}>, State> {\n    state: State = {\n        rawData: []\n    };\n\n    render() {\n        return (\n            <HashRouter>\n                <Route path=\"/\" exact render={() => \n                    <Menu />\n                }/>\n                <Route path=\"/replay/:expName\" render={({match}) => \n                    this.appComponent(match.params.expName)\n                }/>\n                <Route exact path=\"/dashboard/\" render={() =>\n                    <DashboardLanding \n                        rawData={this.state.rawData}\n                        updateData={this.changeRawData.bind(this)}\n                    />\n                }/>\n                <Route path=\"/dashboard/:fileId\" render={({match}) => \n                    this.displayVisualization(match.params.fileId)\n                }/>\n                <Route exact path=\"/editor/\" render={() =>\n                    <EditorPage\n                        expName=\"\"\n                        input=\"\"\n                    />\n                }/>\n            </HashRouter>\n        );\n    }\n\n    appComponent(expName: string) {\n        return (\n            <div id=\"appWrapper\">\n            <App \n            expName = {expName}\n            />\n        </div>\n        )\n    }\n    \n    displayVisualization(fileId: string) {\n        let rawData = this.state.rawData.filter(x => x.id === fileId)[0];\n        if (rawData) {\n            return (\n                <Dashboard\n                    rawData={rawData.content}\n                />\n            );\n        }\n    }\n    \n    changeRawData(newValue: {name:string, id:string, content:string}){\n        let currentList = this.state.rawData;\n        let newList = currentList.concat([newValue]);\n        this.setState({\n            rawData: newList\n        });\n    }\n}\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.1/8 is considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl)\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready.then(registration => {\n      registration.unregister();\n    });\n  }\n}\n","//@ts-nocheck\nimport * as React from 'react';\nimport * as ReactDOM from 'react-dom';\nimport './index.css';\nimport { AppRouter } from './components/Router';\nimport * as serviceWorker from './serviceWorker';\n\nReactDOM.render(\n  <AppRouter/>,\n  document.getElementById('root')\n);\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.unregister();\n","module.exports = __webpack_public_path__ + \"static/media/all.496082da.svg\";","// export interface SExp extends Array<string | SExp> {}\nexport interface SExpNode {\n  token: string,\n  startLine: number,\n  startOffset: number,\n  endLine: number,\n  endOffset: number\n}\nexport interface SExp extends Array<SExpNode | SExp> {}\nexport function parse(input: string): SExp {\n  console.log(\"**\"+input+\"//\");\n  let i = 0;\n  let line_number = 0;\n  let offset = 0;\n  const impl = () => {\n    while (input[i].match(/\\r\\n|\\r|\\n/)) {\n      line_number++; // skip newlines\n      i++;\n    }\n    while (input[i].match(/\\s/)) {\n      i++; // skip whitespaces\n      offset++;\n    }\n    if (input[i] === \"(\") {\n      // drop '('\n      i++;\n    } else {\n      throw new Error(\n        `Input is not valid: unexpected '${input[i]}' at the beginning`\n      );\n    }\n\n    const result: SExp = [];\n    let node = \"\";\n    let startLine = line_number;\n    let startOffset = offset;\n    let endLine = line_number;\n    let endOffset = offset;\n    while (true) {\n      offset++;\n      let c = input[i++];\n\n      if (!c) {\n        if (!node) {\n          break;\n        } else {\n          throw new Error(\n            `Input is not valid: unexpected '${node}' at the end`\n          );\n        }\n      }\n\n      if (c === \")\") {\n        if (node) result.push({\n          \"token\": node, \n          \"startLine\": startLine,\n          \"startOffset\": startOffset,\n          \"endLine\": line_number,\n          \"endOffset\": offset,\n        });\n        break;\n      } else if (c === \"\\\\\") {\n        c += input[i++];\n        node += c;\n      } else if (c.match(/\\r\\n|\\r|\\n/)) {\n        if (node) {\n          result.push({\n          \"token\": node, \n          \"startLine\": startLine,\n          \"startOffset\": startOffset,\n          \"endLine\": line_number,\n          \"endOffset\": offset,\n          });\n          node = \"\";\n        }\n        line_number++;\n        offset = 0;\n      } else if (c.match(/\\s/)) {\n        if (node) result.push({\n          \"token\": node, \n          \"startLine\": startLine,\n          \"startOffset\": startOffset,\n          \"endLine\": line_number,\n          \"endOffset\": offset,\n        });\n        node = \"\";\n        startLine = line_number;\n        startOffset = offset;\n      } else if (c === \"(\") {\n        i--;\n        offset--;\n        result.push(impl());\n      } else if (c === '\"') {\n        node += c;\n        // parse string\n        while ((c = input[i++])) {\n          // skip \\\"\n          if (c === \"\\\\\" && input[i] === '\"') {\n            c += input[i++];\n          }\n          node += c;\n          if (c === '\"') break;\n        }\n      } else {\n        node += c;\n      }\n    }\n\n    return result;\n  };\n\n  return impl();\n}\n\nfunction isString(node: any): node is string {\n  return typeof node === \"string\";\n}\n\n//dump checker since typescript doesnt have fancy typechecker api\nexport function isSExpNode(node: any): node is SExpNode {\n  return \"startOffset\" in node;\n}\n\n// export function beautify(input: string | SExp): string {\n//   const sExp = isString(input) ? parse(input) : input;\n\n//   const stack: Array<{ idx: number; exp: SExp }> = [{ idx: 0, exp: sExp }];\n//   let indent = 0;\n\n//   let result = \"\";\n//   const print = (str: string) => {\n//     result += \"  \".repeat(indent) + str + \"\\n\";\n//   };\n\n//   while (stack.length) {\n//     const node = stack.pop()!;\n\n//     if (node.idx === 0 && node.exp.length < 5 && node.exp.every(isSExpNode)) {\n//       // very short case, just print and it's done\n//       print(`(${node.exp.join(\" \")})`);\n//       continue;\n//     }\n\n//     let done = false;\n\n//     while (true) {\n//       if (node.idx >= node.exp.length) {\n//         done = true;\n//         break;\n//       }\n\n//       const child = node.exp[node.idx++];\n\n//       if (node.idx === 1) {\n//         print(`(${child}`);\n//         indent++;\n//       } else if (isSExpNode(child)) {\n//         print(child.token);\n//       } else {\n//         stack.push(node);\n//         stack.push({ idx: 0, exp: child });\n//         break;\n//       }\n//     }\n\n//     if (done) {\n//       indent--;\n//       print(\")\");\n//     }\n//   }\n\n//   return result.trim();\n// }\n","module.exports = __webpack_public_path__ + \"static/media/angle-arrow-down.412f3289.svg\";","// @ts-nocheck\nclass SatVisAssertionError extends Error {\n    constructor(message) {\n      super(message);\n      this.name = \"SatVisAssertionError\";\n    }\n  }\n\nexport function assert(condition, message=\"\") {\n    if (!condition)\n        throw new SatVisAssertionError('Assertion failed: ' + (message || ''));\n};\n"],"sourceRoot":""}