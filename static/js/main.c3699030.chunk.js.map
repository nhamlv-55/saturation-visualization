{"version":3,"sources":["resources/icons/singles/eye.svg","components/Slider.tsx","helpers/network.ts","components/Graph.tsx","helpers/navigation.ts","components/Main.tsx","helpers/readable.ts","components/NodeDetails.tsx","helpers/diff.ts","components/ExprMapSelector.tsx","components/Aside.tsx","components/App.tsx","components/AppWrapper.tsx","components/ExpTable.tsx","helpers/spacerOptions.ts","components/MenuOptions.tsx","components/Menu.tsx","components/DashboardComponents/TimeChart.tsx","helpers/naming.ts","components/DashboardComponents/IndividualBenchmark.tsx","components/DashboardComponents/ResultsOverview.tsx","components/DashboardComponents/TimeZoom.tsx","components/DashboardComponents/GeneralGraphOverview.tsx","components/Dashboard.tsx","components/DashboardLanding.tsx","components/ReplaceDialog.tsx","components/TreeEditor.tsx","components/Editor.tsx","components/Router.tsx","serviceWorker.js","index.tsx","helpers/transformers.ts","resources/icons/all.svg","model/util.ts","resources/icons/singles/angle-arrow-down.svg"],"names":["module","exports","icons","require","Slider","React","slider","render","this","props","historyLength","currentTime","onCurrentTimeChange","console","log","className","disabled","enabled","onClick","viewBox","xlinkHref","ref","type","min","max","value","onChange","getSliderValue","current","parseInt","styleTemplates","lemmaColours","buildPobLemmasMap","tree","varList","ExprMap","Map","nodeID","node","exprID","expr","PobLemmasMap","event_type","lemmaExprID","level","pobID","Array","existPrevLemma","lemma","prev_min","push","buildExprMap","exprMapItem","raw","readable","lhs","edited","changed","toVisNode","style","nodeSelection","finalInv","color","styleData","isMarked","includes","finalColor","border","markedStyle","defaultStyle","background","highlight","highlightStyle","id","shape","fixed","Graph","state","metaPressed","network","networkNodes","DataSet","networkEdges","graphContainer","boundKeyupHandler","keyupHandler","bind","componentDidMount","generateNetwork","updateNetwork","layout","fit","window","addEventListener","componentWillUnmount","removeEventListener","componentDidUpdate","prevProps","assert","Network","nodes","edges","physics","interaction","multiselect","hierarchical","direction","sortMethod","on","clickEvent","a","length","clickedNodeId","onNodeSelectionChange","onlyUpdateStyles","visLayout","PobVisTree","treeCloned","JSON","parse","stringify","parent","siblings","children","same_as_sibl","identical_sibl","sibl","to_be_vis","childID","new_children","PobVisLayout","ATree","nodeHasBeenSelected","currentNodeExprID","Number","MIN_SAFE_INTEGER","InvList","map","exprInfo","start","end","visNodes","visEdges","edgeId","visNode","filter","x","findIndex","visEdge","parentNodeId","hidden","arrows","from","to","smooth","toVisEdge","clear","add","event","closest_node","nodeId","currentNode","body","closestNode","min_distance","MAX_SAFE_INTEGER","idx","distance","y","edge","fromId","toId","closestNodes","findClosestNode","key","ReactModal","setAppElement","Main","runCmd","readOnly","negateMap","logSym","toReadable","parseResult","lst","sep","splice","indexOf","isArray","replaceVarNames","newList","split","i","regex","RegExp","replace","negate","compOp","keys","Object","getCompOp","getOp","getCleanExprList","exprList","resultExprList","trim","NodeDetails","constructor","super","keep","type_map","learningFlag","learningErrorFlag","transformationFlag","transformationErrorFlag","possibleTransformations","transformationSelected","node_to_string","n","is_root","args","nl","arg","getLemmaList","lemma_list","lemmas","colorIndex","lemmaStyle","relatedExprMap","exprData","implies","forEach","literal","lemmaColour","addLemma","lemmaId","e","cleanExprOperators","target","innerText","index","getIndexOfLiteral","op","lhsFinal","rhsFinal","result","reorder","saveExprs","forceUpdate","learnTransformation","setState","fetch","method","mode","headers","exp_path","name","response","status","json","responseJson","possiblePrograms","transformExprs","selectedProgram","responseData","tExprMap","updateTransformationSelected","node1","node2","expr1","expr2","expr1List","expr2List","Math","lineDiff","diff","added","removed","concat","toDiff","part","additional_info","expr_layout","ast_json","classNameTop","classNameBottom","transformation","xmlAst","humanReadableAst","ExprMapSelector","matchingFiles","exps","selected","fetchExps","getMatchingFiles","getMatchingExprMap","data","exp","match","fetchedJSON","updateRelatedExprMap","expr_map","exps_list","updateSelected","Aside","createButton","title","svg","getNodeDetails","exprMap","messages_q","mess","onPoke","SatVisLayout","MultiSelectMode","SMTLayout","alignmentBaseline","textAnchor","dominantBaseline","fontWeight","stroke","fill","fontFamily","JSONLayout","App","Component","trees","varNames","runSpacer","problem","spacerUserOptions","poke","message_q","nodes_list","rawWithVars","var_names","run_cmd","spacer_state","saveExprMap","file","exp_name","errorMess","message","undefined","updateNodeSelection","tempNodeSelection","slice","updateCurrentTime","setPobVisLayout","setSatVisLayout","setMultiSelect","setSMTLayout","setJSONLayout","main","hL","onUpdateNodeSelection","AppWrapper","hideBracketsAssoc","nonStrictForNegatedStrictInequalities","orientClauses","ExpTable","isFetching","item","pathname","done","options","MenuOptions","optionTypeHTML","optionType","optionValue","optionName","allOptions","showOptions","updateSpacerOptions","fullOptionString","option","changeSpacerUserOptions","storeSpacerOptions","preventDefault","reset","displaySpacerOptions","updateOptionValue","getOptions","placeholder","defaultValue","changeOptionType","tempList","removeOption","rIndex","changeSpacerManualUserOptions","newValue","showHideOptions","selectedOptions","htmlFor","src","eye","alt","kvp","displayValue","onSubmit","list","onChangeVariables","Menu","isChromeOrFirefox","fileUpload","monacoDiv","monaco","Monaco","create","lineNumbers","roundedSelection","scrollBeyondLastLine","scrollBeyondLastColumn","minimap","renderLineHighlight","hideCursorInOverviewRuler","links","overviewRulerBorder","automaticLayout","lineDecorationsWidth","lineNumbersMinChars","wordWrap","setValue","getModel","onDidChangeContent","onChangeProblem","getValue","problemName","chooseFile","uploadEncoding","onChangeSpacerUserOptions","click","files","reader","FileReader","onloadend","text","onChangeProblemName","readAsText","TimeChart","totalTime","palette","createSunburst","prevState","snapshot","prepareData","tmp","size","getData","input","last","resultKeys","values","d3","remove","colour","domain","range","myChart","SunburstChart","document","getElementById","width","height","label","tooltipTitle","showLabels","potholeToNormal","words","toUpperCase","substring","join","IndividualBenchmark","filterTimeData","d","reduce","obj","timeData","dataKey","ResultsOverview","createResultsOverview","results","xScale","config","margin","left","right","xMap","xValue","xAxis","tickValues","yValue","SPACER_num_invariants","yScale","graphHeight","top","bottom","yMap","yAxis","append","attr","font","call","axis","g","selectAll","enter","bandwidth","select","selectBenchmark","TimeZoom","instance","GeneralGraphOverview","createGraph","updateZoomView","classText","Dashboard","overviewMetrics","selectedBenchmark","graphMin","graphMax","customMode","customData","depth","memory","time","zoomMode","dashboardConfig","barNum","loadData","handleGraphTranslationKeyboard","rawData","parsedData","SPACER_cluster_out_of_gas","SPACER_expand_pob_undef","SPACER_inductive_level","SPACER_max_cluster_size","SPACER_max_cvx_reduced_dim","SPACER_max_query_lvl","SPACER_need_sage","SPACER_num_abstractions","SPACER_num_abstractions_failed","SPACER_num_abstractions_success","SPACER_num_active_lemmas","SPACER_num_cant_abstract","SPACER_num_ctp_blocked","SPACER_num_dim_reduction_success","SPACER_num_is_invariant","SPACER_num_lemma_jumped","SPACER_num_lemmas","SPACER_num_mbp_failed","SPACER_num_merge_gen","SPACER_num_merge_gen_failed","SPACER_num_merge_gen_success","SPACER_num_no_over_approximate","SPACER_num_non_lin","SPACER_num_pobs","SPACER_num_propagations","SPACER_num_queries","SPACER_num_reach_queries","SPACER_num_refinements","SPACER_num_reuse_reach_facts","SPACER_num_sync_cvx_cls","SPACER_num_under_approximations","SPACER_pob_out_of_gas","SPACER_wide_attmpts","SPACER_wide_success","max_memory","time_iuc_solver_get_iuc","time_iuc_solver_get_iuc_hyp_reduce1","time_iuc_solver_get_iuc_hyp_reduce2","time_iuc_solver_get_iuc_learn_core","time_pool_solver_proof","time_pool_solver_smt_total","time_pool_solver_smt_total_sat","time_pool_solver_smt_total_undef","time_spacer_ctp","time_spacer_init_rules","time_spacer_init_rules_pt_init","time_spacer_mbp","time_spacer_solve","time_spacer_solve_propagate","time_spacer_solve_pt_must_reachable","time_spacer_solve_reach","time_spacer_solve_reach_children","time_spacer_solve_reach_cluster","time_spacer_solve_reach_gen_bool_ind","time_spacer_solve_reach_gen_merge","time_spacer_solve_reach_gen_merge_cvx_cls","time_spacer_solve_reach_gen_wide","time_spacer_solve_reach_is_reach","handleSidebarClick","handleSidebarClickDot","handleHomeClick","handleClearClick","moveGraphLeft","moveGraphRight","moveGraphUp","moveGraphDown","handleGraphTranslationClick","handleCustomClick","filterDictionary","custom","j","addToCustomData","metric","metricDataKeys","totalData","innerHTML","customDataCopy","setZoomView","timeZoomData","benchmarks","timeKeys","arrow","DashboardLanding","fileReader","handleFileRead","content","toString","returnObject","Date","now","updateData","handleFileChosen","updateFile","accept","dataItem","href","ReplaceDialog","source","defaultChecked","checked","onApply","TreeEditor","selectedNodeID","stringRep","astStack","transformerStack","transformer","ASTTransformer","redrawAST","ast","redraw","toHTML","nodeList","AST","updateConditionInputEvent","evt","condition","updateParamsInputEvent","params","displayTransformers","t","display","action","applyStack","original_ast","runStack","error","applyLocal","currentAST","run","dirty","new_ast","getCondition","undo","pop","tStack","dangerouslySetInnerHTML","__html","onBlast","Editor","output","openEditor","getValueInRange","getSelection","getFormulas","blast","all_formulas","f","rows","AppRouter","path","exact","changeProblem","changeProblemName","onChangeHideBracketsAssoc","changeHideBracketsAssoc","onChangeNonStrictForNegatedStrictInequalities","changeNonStrictForNegatedStrictInequalities","onChangeOrientClauses","changeOrientClauses","changeVariables","appComponent","exp_id","changeRawData","displayVisualization","fileId","Boolean","location","hostname","ReactDOM","navigator","serviceWorker","ready","then","registration","unregister","_","ASTNode","token","parentID","shouldBreak","shouldInBracket","transformers","isOpt","cloneDeep","t_index","current_token","current_break","node_depth","nodeDepth","current_in_bracket","squashNegation","cloned_ast","cloned_node","eval","cloned_child","grandchild","current_parent","current_child_index","deleteNode","buildVis","move","movable","nodePosition","flipCmp","new_node","toImp","newHead","newTail","newParent","old_token","changeBreak","changeBracket","formula","null_node","lstToAST","_i","selectedID","add_highlight","repeat","SatVisAssertionError","Error"],"mappings":"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","file":"static/js/main.c3699030.chunk.js","sourcesContent":["module.exports = __webpack_public_path__ + \"static/media/eye.bf3c357b.svg\";","import * as React from 'react';\n\nimport '../styles/Slider.css';\n\n\nconst icons = require('../resources/icons/all.svg') as string;\n\ntype Props = {\n  historyLength: number,\n  currentTime: number,\n  onCurrentTimeChange: (newState: number) => void,\n  enabled: boolean\n};\nexport default class Slider extends React.Component<Props, {}> {\n\n  private slider = React.createRef<HTMLInputElement>();\n\n  render() {\n    const {historyLength, currentTime, onCurrentTimeChange} = this.props;\n      console.log(\"historyLength\", historyLength)\n    return (\n      <section className=\"component-slider\">\n\n        <button disabled={!this.props.enabled || currentTime <= 0} onClick={() => onCurrentTimeChange(currentTime - 1)}>\n          <svg viewBox=\"0 0 24 24\" className=\"icon\">\n            <use xlinkHref={`${icons}#history-back`}/>\n          </svg>\n        </button>\n\n        <section className=\"wrapper\">\n          <input\n            ref={this.slider}\n            type=\"range\"\n            min={0}\n            max={historyLength}\n            value={currentTime}\n            disabled={!this.props.enabled}\n            onChange={() => onCurrentTimeChange(this.getSliderValue())}\n          />\n        </section>\n\n        <button disabled={!this.props.enabled || currentTime >= historyLength} onClick={() => onCurrentTimeChange(currentTime + 1)}>\n          <svg viewBox=\"0 0 24 24\" className=\"icon\">\n            <use xlinkHref={`${icons}#history-forward`}/>\n          </svg>\n        </button>\n\n      </section>\n    );\n  }\n\n  // HELPERS ///////////////////////////////////////////////////////////////////////////////////////////////////////////\n\n  getSliderValue(): number {\n    return this.slider.current ? parseInt(this.slider.current.value, 10) : 0;\n  }\n\n}\n","const styleTemplates = require('../resources/styleTemplates');\n\nexport const lemmaColours = [\n    \"#e6194B\",\n    \"#f58231\",\n    \"#3cb44b\",\n    \"#42d4f4\",\n    \"#000075\",\n    \"#469990\",\n    \"#911eb4\",\n    \"#f032e6\",\n    \"#fabebe\",\n    \"#800000\",\n];\n\n//BUILD POB LEMMAS MAP////////////////////\nexport function buildPobLemmasMap(tree: any, varList: string[]): any{\n    // construct exprID->expr map\n    let ExprMap = new Map<number, string>();\n    for (const nodeID in tree) {\n        const node = tree[nodeID];\n        ExprMap[node.exprID] = node.expr;\n    }\n\n    // construct PobExprID->a list of lemmas\n    let PobLemmasMap = {};\n    for (const nodeID in tree) {\n        let node = tree[nodeID];\n        if (node.event_type !== \"EType.ADD_LEM\") {\n            continue\n        }\n        const lemmaExprID = node.exprID;\n        const level = node.level;\n        const pobID = node.pobID;\n        if (!(pobID in PobLemmasMap)) {\n            PobLemmasMap[pobID] = new Array<{}>();\n        }\n\n        //traverse the list, if lemmaExprID is already in the list, update its min max\n        let existPrevLemma = false;\n        for (const lemma of PobLemmasMap[pobID]) {\n            if (lemma[0] === lemmaExprID) {\n                existPrevLemma = true;\n                let prev_min = lemma[1];\n                let prev_max = lemma[2];\n\n                if (level > prev_max || level === \"oo\") {\n                    lemma[2] = level\n                }\n                if (level < prev_min) {\n                    lemma[1] = level\n                }\n                break\n            }\n        }\n\n        if (!existPrevLemma) {\n            PobLemmasMap[node.pobID].push([lemmaExprID, level, level])\n        }\n    }\n    return PobLemmasMap\n}\n\n\n//BUILD EXPR MAP////////////////////////\nexport function buildExprMap(tree: any, varList: string[]): any{\n    let ExprMap = new Map<number, Object>();\n    for (const nodeID in tree) {\n        const node = tree[nodeID];\n        const exprMapItem = {\n            raw: node.expr.raw,\n            readable: node.expr.readable,\n            lhs: [], \n            edited: node.expr.readable,\n            changed: false\n        };\n        ExprMap[node.exprID] = exprMapItem;\n    }\n    return ExprMap\n\n}\n\nexport function PobVisLayout(tree): any{\n    let treeCloned = JSON.parse(JSON.stringify(tree));\n\n    for (const nodeID in treeCloned){\n        let node = treeCloned[nodeID];\n        if(node.event_type !== \"EType.EXP_POB\"){\n            node.to_be_vis = false;\n            continue\n        }\n\n        let parent = treeCloned[node.parent];\n        let siblings = parent.children;\n        let same_as_sibl = false;\n        let identical_sibl;\n        for(const siblID of siblings){\n\n            const sibl = treeCloned[siblID];\n            if(sibl.nodeID !== node.nodeID && sibl.exprID === node.exprID){\n                same_as_sibl = true;\n                identical_sibl = sibl;\n                break\n            }\n\n        }\n        if(same_as_sibl){\n            // I will disappear\n            node.to_be_vis = false;\n\n            // point all my children to my sibling\n            for(const childID of node.children){\n                treeCloned[childID].parent = identical_sibl.nodeID;\n                identical_sibl.children.push(childID)\n            }\n            //change my parent's children\n            let new_children = new Array<number>();\n            for (const childID of siblings){\n                if(childID !== node.nodeID){\n                    new_children.push(childID)\n                }\n            }\n            parent.children = new_children\n        }\n    }\n\n    return treeCloned\n}\n\nexport function toVisNode(node: any, style: string, nodeSelection, finalInv: number, color:number = -1): any {\n    const styleData = styleTemplates[style];\n    const isMarked = nodeSelection.includes(node.nodeID);\n\n    let finalColor  = {\n        border : isMarked ? styleData.markedStyle.border : styleData.defaultStyle.border,\n            background : isMarked ? styleData.markedStyle.background : styleData.defaultStyle.background,\n            highlight : {\n            border : styleData.highlightStyle.border,\n                background : styleData.highlightStyle.background\n        }\n    };\n    \n    if (style === \"lemma\" && color !== -1) {\n        finalColor = {\n            border: lemmaColours[color],\n            background: lemmaColours[color],\n            highlight: {\n                border: lemmaColours[color],\n                background: lemmaColours[color]\n            }\n        }\n    }\n    return {\n        id: node.nodeID,\n        shape: finalInv > 0 ? finalInv > 1 ? \"hexagon\" : \"star\" : styleData.shape,\n        fixed: true,\n        color: finalColor\n    };\n}\n\n\nexport function toVisEdge(edgeId: number, parentNodeId: number, nodeID: number, hidden: boolean) {\n    return {\n        id: edgeId,\n        arrows: \"to\",\n        color: {\n            color: \"#dddddd\",\n            highlight: \"#f8cfc1\",\n        },\n        from: parentNodeId,\n        to: nodeID,\n        smooth: false,\n        hidden: hidden\n    }\n}\n\nexport function getSliderValue(slider): number {\n    return slider.current ? parseInt(slider.current.value, 10) : 0;\n}\n\n","import * as React from 'react';\nimport { DataSet, Network, Node, Edge } from 'vis'\n\nimport '../styles/Graph.css'\nimport { assert } from '../model/util';\nimport {PobVisLayout, toVisEdge, toVisNode} from \"../helpers/network\";\nimport {findClosestNode} from \"../helpers/navigation\";\n\n\ntype Props = {\n    tree: any,\n    onNodeSelectionChange: (selection: number[]) => void,\n    nodeSelection: number[],\n    currentTime: number,\n    layout: string,\n    PobLemmasMap: any,\n};\n\ntype State = {\n    metaPressed: boolean,\n};\n\nexport default class Graph extends React.Component<Props, {}> {\n\n    state: State = {\n        metaPressed: false,\n    };\n\n    network: Network | null = null;\n    networkNodes = new DataSet<Node>([]);\n    networkEdges = new DataSet<Edge>([]);\n    graphContainer = React.createRef<HTMLDivElement>();\n    boundKeyupHandler =  this.keyupHandler.bind(this);\n   \n    componentDidMount() {\n        this.generateNetwork();\n        this.updateNetwork(false, this.props.layout);\n        this.network!.fit();\n        window.addEventListener(\"keyup\", this.boundKeyupHandler, false);\n    }\n\n    componentWillUnmount() {\n        window.removeEventListener(\"keyup\", this.boundKeyupHandler, false);\n    }\n\n    componentDidUpdate(prevProps: Props) {\n        this.updateNetwork(false, this.props.layout);\n    }\n\n    render() {\n        return (\n            <section className= \"component-graph\" ref = { this.graphContainer } >\n                <canvas/>\n            </section>\n        );\n    }\n\n    generateNetwork() {\n        console.log(\"I am Graph. I receive:\", this.props)\n        assert(this.graphContainer.current);\n        assert(!this.network); // should only be called once\n\n        this.network = new Network(this.graphContainer.current!, {\n            nodes: this.networkNodes,\n            edges: this.networkEdges\n        }, {\n            physics: false,\n            interaction: {\n                multiselect: false\n            },layout: {\n                hierarchical: {\n                    direction: 'UD',\n                    sortMethod: 'directed',\n                },\n            }\n\n        });\n\n        this.network.on('click', async (clickEvent) => {\n            if (clickEvent.nodes.length > 0) {\n\n                assert(clickEvent.nodes.length === 1);\n                const clickedNodeId = clickEvent.nodes[0];\n                console.log(\"clickEvent.nodes\", clickEvent.nodes);\n                console.log(\"clickedNodeId\", this.props.tree[clickedNodeId]);\n                this.props.onNodeSelectionChange(clickEvent.nodes);\n            } else {\n                this.props.onNodeSelectionChange([]);\n            }\n        });\n\n    }\n\n    // updates the network displayed by Vis.js\n    updateNetwork(onlyUpdateStyles: boolean, layout: string) {\n        if (layout === \"SatVis\"){\n            this.visLayout(this.props.tree);\n        } else if(layout === \"PobVis\"){\n            const PobVisTree =  PobVisLayout(this.props.tree);\n            this.visLayout(PobVisTree);\n        }\n    }\n\n    visLayout(ATree){\n        let nodeHasBeenSelected = this.props.nodeSelection.length > 0;\n        let currentNodeExprID = Number.MIN_SAFE_INTEGER;\n        let InvList:{id: string, start: string, end: string}[] = [];\n        if(nodeHasBeenSelected) {\n            currentNodeExprID = ATree[this.props.nodeSelection[0]].exprID;\n            InvList = currentNodeExprID in this.props.PobLemmasMap ? this.props.PobLemmasMap[currentNodeExprID].map((exprInfo) => {\n                return {\n                    id: exprInfo[0],\n                    start: exprInfo[1],\n                    end: exprInfo[2]\n                }\n            }): [];\n        }\n        const visNodes = new Array<Node>();\n        const visEdges = new Array<Edge>();\n        let edgeId = 0;\n        \n\n\n        for (const nodeID in ATree){\n            let node = ATree[nodeID];\n            if(!node.to_be_vis) continue;\n            let visNode;\n            let FinalInvList = node.exprID in this.props.PobLemmasMap ? this.props.PobLemmasMap[node.exprID].filter(exprInfo => exprInfo[2] === \"oo\") : [];\n            let finalInv = (FinalInvList.filter(x => x[1] === node.level || x[1] === \"oo\").length);\n            //Prioritize related nodes\n            if (node.exprID === currentNodeExprID) {\n                visNode = toVisNode(node, \"sameExprID\", this.props.nodeSelection, finalInv)\n            } else if (InvList.length > 0 && InvList.filter(exprInfo => exprInfo.id === node.exprID).length > 0){\n                visNode = toVisNode(node, \"lemma\", this.props.nodeSelection, finalInv, InvList.findIndex(x => x.id === node.exprID) % 10);\n            } else if (node.nodeID > this.props.currentTime) {\n                visNode = toVisNode(node, \"activated\", this.props.nodeSelection, finalInv);\n            } else {\n                visNode = toVisNode(node, \"passive\", this.props.nodeSelection, finalInv);\n            }\n\n            visNodes.push(visNode);\n            const visEdge = toVisEdge(edgeId, node.parent, node.nodeID, false);\n            visEdges.push(visEdge);\n            edgeId++;\n        }\n        this.networkNodes.clear();\n        this.networkNodes.add(visNodes);\n        this.networkEdges.clear();\n        this.networkEdges.add(visEdges);\n\n    }\n\n    keyupHandler(event) {\n        if(this.props.nodeSelection.length !== 1 ) return;\n        const selected_node = this.props.nodeSelection[0];\n        let closest_node = findClosestNode(selected_node, event.key, this.network);\n        this.props.onNodeSelectionChange([closest_node]);\n    }\n}\n","import {assert} from \"../model/util\";\n\nexport function findClosestNode(nodeId: number, direction, network){\n    assert(network);\n    assert(\"body\" in network!);\n    const currentNode = network!.body.nodes[nodeId];\n    let closestNode = currentNode.id;\n    let min_distance = Number.MAX_SAFE_INTEGER;\n\n    if (direction === \"ArrowLeft\"){\n        for(const idx in network!.body.nodes){\n            const node = network!.body.nodes[idx];\n            let distance = currentNode.x - node.x;\n            if (node.y !== currentNode.y) {continue}\n            if (distance > 0 && distance < min_distance){\n                closestNode = node.id;\n                min_distance = distance;\n            }\n        }\n    }\n    else if (direction === \"ArrowRight\"){\n        for (let idx in network!.body.nodes){\n            const node = network!.body.nodes[idx];\n            let distance = node.x - currentNode.x;\n            if (node.y !== currentNode.y) {continue}\n            if (distance > 0 && distance < min_distance){\n                closestNode = node.id;\n                min_distance = distance;\n            }\n        }\n    }\n    else if (direction === \"ArrowDown\" && currentNode.edges.length >= 2){\n        closestNode = currentNode.edges.filter(edge => edge.fromId === currentNode.id)[0].toId;\n    }\n    else if (direction === \"ArrowUp\" && currentNode.edges.length >= 1){\n        let closestNodes = currentNode.edges.filter(edge => edge.toId === currentNode.id);\n        if (closestNodes.length > 0){\n            closestNode = closestNodes[0].fromId;\n        }\n    }\n    return closestNode;\n\n}\n","import * as React from 'react';\n\nimport Slider from './Slider';\nimport Graph from './Graph';\nimport ReactModal from 'react-modal';\nReactModal.setAppElement('#root');\n\ntype Props = {\n    mode: \"proof\" | \"replay\" | \"iterative\",\n    tree: any,\n    runCmd: string,\n    onNodeSelectionChange: (selection: number[]) => void,\n    nodeSelection: number[],\n    historyLength: number,\n    currentTime: number,\n    onCurrentTimeChange: (newState: number) => void,\n    layout: string,\n    PobLemmasMap: any,\n};\nexport default class Main extends React.Component<Props, {}> {\n\n    // TODO: remove this, after supporting button clicks in Aside while the modal is active\n    componentDidMount() {\n    }\n\n    render() {\n        return (\n            <main>\n                    <input type=\"text\" value = {this.props.runCmd} readOnly></input>\n                    <Graph\n                        tree= { this.props.tree }\n                        onNodeSelectionChange={this.props.onNodeSelectionChange}\n                        nodeSelection={this.props.nodeSelection}\n                        currentTime = {this.props.currentTime}\n                        layout = {this.props.layout}\n                        PobLemmasMap = {this.props.PobLemmasMap}\n                    />\n                    <Slider\n                        historyLength={this.props.historyLength}\n                        currentTime={this.props.currentTime}\n                        onCurrentTimeChange={this.props.onCurrentTimeChange}\n                        enabled={true}\n                    />\n                </main>\n        );\n    }\n\n}\n","import {parse} from \"s-exify\";\n\nconst negateMap = {\n    \"<=\": \">\",\n    \">=\": \"<\",\n    \"!=\": \"=\",\n    \"<\": \">=\",\n    \">\": \"<=\",\n    \"=\": \"!=\",\n    \"&&\": \"||\",\n    \"||\": \"&&\",\n    \"not\": \"\"\n};\n\nconst logSym = [\"&&\", \"||\", \"=>\"];\n\nexport function toReadable(expr) {\n    if (expr[0] !== \"(\"){\n        expr = \"(\" + expr + \")\";\n    }\n    return parseResult(parse(expr), \"\");\n}\n\nfunction parseResult(lst, sep) {\n    //symbols for logical relations\n    let logSym = {\n        \"and\": \"&&\",\n        \"or\": \"||\"\n    };\n\n    //symbols for mathematical operations\n    //Note: \"-\" is not included because negative numbers are in the form (- x)\n    let logOp = [\"!=\", \"=\", \"<=\", \">=\", \">\", \"<\", \"+\", \"*\", \"/\"];\n\n    //empty list should return empty string\n    if (lst.length < 1){\n        return \"\";\n    }\n\n    //logical symbol should be inserted between each child clause\n    if (lst[0] in logSym) {\n        return parseResult(lst.splice(1), logSym[lst[0]]);\n    }\n\n    //reorders to put operators between operands\n    //Note: accounts for \"-\" denoting the subtraction of 2 numbers, (- x y)\n    if (logOp.indexOf(lst[0]) >= 0 || (lst[0] === \"-\" && lst.length === 3)){\n        return \"(\" + parseResult(lst[1], \"\") + \" \" + lst[0] + \" \" + parseResult(lst[2], \"\") + \")\";\n    }\n\n    //handles indexing into an array\n    if (lst[0] === \"select\") {\n        return lst[1] + \"[\" + lst[2] + \"]\";\n    }\n\n    //Adds not symbol (!) to beginning of clause\n    if (lst[0] === \"not\") {\n        if (lst[1][0] in negateMap){\n            lst[1][0] = negateMap[lst[1][0]];\n        }\n        return parseResult(lst[1], \"\")\n    }\n\n    //prevents trailing logical symbol\n    if (sep !== \"\" && lst.length === 1){\n        return parseResult(lst[0], \"\");\n    }\n\n    //actual place where logical symbol gets placed between clauses\n    if (sep !== \"\") {\n        return parseResult(lst[0], \"\") + \" \" + sep + \"\\n\" + parseResult(lst.splice(1), sep);\n    }\n\n    //handler for negative numbers which come in the form (- x)\n    if (lst[0] === \"-\"){\n        return lst[0] + lst[1];\n    }\n\n    //handler for denoting invariants. Ex. Inv (...)\n    if (typeof(lst[0]) === 'string' && Array.isArray(lst) && lst.length > 1){\n        return lst[0] + \": (\" + parseResult(lst[1], \"\") + \")\";\n    }\n\n    return lst;\n}\n\nexport function replaceVarNames(expr, varList) {\n    if (varList === \"\") return expr;\n    if (typeof expr === \"string\") {\n        let newList = varList.split(\" \");\n        for (let i = 0; i < newList.length; i++) {\n            let regex = new RegExp( \"[a-zA-z0-9@$:!]+_\"+ i + \"_n\", \"gi\");\n            expr = expr.replace(regex, newList[i]);\n        }\n    }\n    return expr;\n}\n\nexport function reorder(expr, lhs, op){\n    if (typeof expr !== \"string\") return expr;\n    let lhsFinal:Number[] = [];\n    let rhsFinal:Number[] = [];\n    let exprList = getCleanExprList(expr, op);\n    let result = \"\";\n    for (let i = 0; i < exprList.length; i++){\n        if (lhs.indexOf(i) > -1) {\n            if (lhsFinal.length === 0){\n                result = negate(exprList[i]) + result;\n            }\n            else {\n                result = negate(exprList[i]) + \" \" + negateMap[op] + \"\\n\" + result;\n            }\n            lhsFinal.push(i);\n            \n        }\n        else {\n            if (rhsFinal.length === 0) {\n                result = result + \" =>\\n\" + exprList[i];\n            }\n            else {\n                result = result + \" \" + op + \"\\n\" + exprList[i]\n            }\n           rhsFinal.push(i); \n        }\n        \n        if (i === exprList.length - 1) {\n            if (lhsFinal.length === 0) {\n                result = \"true \" + result\n            }\n            if (rhsFinal.length === 0) {\n                result = result + \" =>\\nfalse\"\n            }\n        }\n    }\n    return result;\n}\n\nfunction negate(expr) {\n    let compOp = getCompOp(expr);\n    if (compOp === \"not\"){\n        return compOp + \" \" + expr\n    }\n    return expr.replace(compOp, negateMap[compOp]);\n}\n\nfunction getCompOp(expr: string) {\n    let keys = Object.keys(negateMap);\n    for (let i = 0; i < keys.length; i++){\n        if (expr.includes(keys[i])){\n            return keys[i];\n        } \n    }\n    \n    return \"not\";\n}\n\nexport function getOp(expr) {\n    for (let i = 0; i < logSym.length; i++) {\n        if (expr.includes(logSym[i])) return logSym[i];\n    }\n}\n\nexport function getIndexOfLiteral(exprList, literal){\n    for (let i = 0; i < exprList.length; i++){\n        if (literal === exprList[i] || literal === negate(exprList[i])){\n            return i;            \n        }\n    }\n    return -1;\n}\n\nexport function getCleanExprList(expr, sep) {\n    let exprList = expr.split(sep);\n    let resultExprList:string[] = [];\n    for (let i = 0; i < exprList.length; i++){\n        if (exprList[i] !== \"\") {\n            resultExprList.push(exprList[i].trim());\n        }\n    }\n    \n    return resultExprList;\n}\n\nexport function getVariables(literal) {\n    let regex = /([a-zA-Z])+/g;\n    return literal.match(regex);\n}\n\nexport function getProcesses(literal) {\n    let regex = /(\\[[0-9]+\\])/g;\n    return literal.match(regex);\n}\n\nexport function getProcessVariables(literal) {\n    let regex = /([a-zA-Z]+\\[[0-9]+\\])/g;\n    return literal.match(regex);\n}\n\nexport function cleanExprOperators(expr) {\n    for (let i = 0; i < logSym.length; i++){\n       expr = expr.replace(logSym[i], \"\"); \n    }\n    return expr;\n}\n\nexport function getVarIndices(varList: string[], exprList: string[]) {\n    let result:number[] = [];\n    for (let i = 0; i < varList.length; i++){\n        for (let j = 0; j < exprList.length; j++){\n            if (exprList[j].includes(varList[i])){\n                result.push(j);\n            }\n        }\n    }\n    return result;\n}\n\n\nexport function getProblemName(fileName) {\n    let regex = /.*.smt2/\n    return fileName.match(regex);\n}\n","import * as React from 'react';\n\nimport '../styles/NodeDetails.css';\nimport {toDiff} from \"../helpers/diff\";\nimport {lemmaColours} from \"../helpers/network\";\nimport {cleanExprOperators, getCleanExprList, getIndexOfLiteral, getOp, reorder} from \"../helpers/readable\";\n\ntype Props = {\n    nodes: any,\n    name: string\n    PobLemmasMap: {},\n    ExprMap: {},\n    layout: string,\n    expr_layout: \"SMT\" | \"JSON\",\n    saveExprs: () => void,\n    relatedExprMap: any\n};\n\ntype State = {\n    learningFlag: boolean,\n    learningErrorFlag: boolean,\n    transformationFlag: boolean\n    transformationErrorFlag: boolean\n    possibleTransformations: {humanReadableAst: string, xmlAst: string}[]\n    transformationSelected: string\n}\n\nexport default class NodeDetails extends React.Component<Props, State> {\n\n    keep = false; // hack to skip each second event generated by Sortable\n    constructor(props) {\n        super(props);\n        this.state = {\n            learningFlag: false,\n            learningErrorFlag: false,\n            transformationFlag: false,\n            transformationErrorFlag: false,\n            possibleTransformations: [],\n            transformationSelected: \"\"\n        }\n    }\n\n    type_map = {\n        \"EQUALS\": \"= \",\n        \"PLUS\": \"+ \",\n        \"TIMES\": \"* \",\n        \"LT\": \"< \",\n        \"LE\": \"<= \",\n        \"GT\": \"> \",\n        \"GE\": \">= \",\n        \"SYMBOL\": \"\",\n        \"0_REAL_CONSTANT\": \"\"\n    };\n\n    node_to_string(n: Object, is_root: Boolean):string{\n        let result = \"\";\n        let args = \"\";\n        const nl = is_root?\"\\n\":\"\";\n        //build args \n        if (Array.isArray(n[\"content\"])){\n            for(const arg of n[\"content\"]){\n                args+=this.node_to_string(arg, false)+nl\n            }\n        }else{\n            args+=n[\"content\"]\n        }\n        //build node\n        if (n[\"type\"] in this.type_map){\n            if(this.type_map[n[\"type\"]]===\"\"){\n                result = \" \"+ args\n            }else{\n                result = \"(\" + this.type_map[n[\"type\"]] + args + \")\"\n            }\n        }else{\n            result = \"(\" + n[\"type\"] + nl + args + \")\"\n        }\n        return result\n    }\n    getLemmaList(node) {\n        let lemma_list: JSX.Element[] = [];\n        if (node.event_type === \"EType.EXP_POB\") {\n            lemma_list.push(<h2 key =\"lemma-title\"> Lemmas summarization </h2>);\n            if (node.exprID in this.props.PobLemmasMap){\n                let lemmas = this.props.PobLemmasMap[node.exprID];\n                for (const lemma of lemmas){\n                    let colorIndex = lemmas.indexOf(lemma);\n                    let lemmaStyle = {\n                        color: lemmaColours[colorIndex]\n                    };\n                    lemma_list.push(<h3 style={lemmaStyle} key={\"lemma-header-\"+ lemma[0]}>ExprID: {lemma[0]}, From: {lemma[1]} to {lemma[2]}</h3>);\n                    let expr = this.props.ExprMap[lemma[0]].edited;\n                    if (typeof expr === \"string\"){\n                        if (Object.keys(this.props.relatedExprMap).length > 0){\n                            let keys = Object.keys(this.props.relatedExprMap);\n                            for (let i = 0; i < keys.length; i++){\n                                let exprData = this.props.relatedExprMap[keys[i]];\n                               if (expr === exprData.readable) {\n                                   expr = exprData.edited;\n                                   break;\n                               }\n                            }\n                        }\n                        let exprList = getCleanExprList(expr, \"\\n\");\n                        let implies = -1;\n                        for (let i = 0; i < exprList.length; i++){\n                            if (exprList[i].includes(\"=>\")){\n                                implies = i;\n                                break;\n                            }\n                        }\n                        exprList.forEach((literal, key) => {\n                            let lemmaColour = {\n                                color: \"black\"\n                            }\n                            if (implies !== -1){\n                                if (key > implies){\n                                    lemmaColour.color = \"darkblue\";\n                                }\n                            }\n                            if (key !== exprList.length - 1) {\n                                lemma_list.push(<pre style={lemmaColour} onClick={this.addLemma.bind(this, lemma[0])} key={\"lemma-expr-\"+lemma[0] + key}>{literal}</pre>);\n                            }\n                            else {\n                                lemma_list.push(<pre style={lemmaColour} onClick={this.addLemma.bind(this, lemma[0])}\n                                                     key={\"lemma-expr-\" + lemma[0] + key}>{literal}</pre>);\n                            }\n                        });\n                    }\n                    else {\n                        lemma_list.push(<pre>{expr}</pre>);\n                    }\n                }\n            }\n        }\n        return lemma_list;\n    }\n    \n    addLemma(lemmaId, e) {\n        let expr = this.props.ExprMap[lemmaId].readable;\n        let exprList = getCleanExprList(expr, getOp(expr));\n        let literal = (cleanExprOperators(e.target.innerText));\n        literal = literal.trim();\n        let index = getIndexOfLiteral(exprList, literal);\n        let lhs = this.props.ExprMap[lemmaId].lhs;\n        if (lhs.includes(index)){\n            lhs.splice(lhs.indexOf(index), 1);\n        }\n        else {\n            lhs.push(index)\n        }\n        \n        this.props.ExprMap[lemmaId].lhs = lhs;\n        this.props.ExprMap[lemmaId].edited = reorder(expr, lhs, getOp(expr));\n        this.props.ExprMap[lemmaId].changed = lhs.length !== 0;\n        this.props.saveExprs();\n        this.forceUpdate();\n        \n    }\n    \n    async learnTransformation() {\n        this.setState({\n            learningFlag: false,\n            learningErrorFlag: false,\n            transformationFlag: false,\n            transformationErrorFlag: false,\n            possibleTransformations: []\n        });\n\n        const response = await fetch(\"http://localhost:5000/spacer/learn_transformation\", {\n            method: 'POST',\n            mode :'cors',\n            headers: {\n                'Accept': 'application/json',\n                'Content-Type': 'application/json'\n            }, body : JSON.stringify({\n                exp_path: this.props.name\n            })\n        });\n        if (response.status === 200){\n            let responseJson = await response.json();\n            let possiblePrograms = responseJson[\"response\"];\n            this.setState({\n                learningFlag: true,\n                possibleTransformations: possiblePrograms\n            });\n            this.forceUpdate();\n        }\n        else {\n            this.setState({\n                learningErrorFlag: true\n            });\n        }\n        \n    }\n\n    async transformExprs() {\n        this.setState({\n            transformationFlag: false,\n            transformationErrorFlag: false\n        });\n        const response = await fetch(\"http://localhost:5000/spacer/apply_transformation\", {\n            method: 'POST',\n            mode :'cors',\n            headers: {\n                'Accept': 'application/json',\n                'Content-Type': 'application/json'\n            }, body : JSON.stringify({\n                exp_path: this.props.name,\n                selectedProgram: this.state.transformationSelected\n            })\n        });\n\n        if (response.status === 200){\n            let responseData = await response.json();\n            let tExprMap = responseData[\"response\"];\n            Object.keys(tExprMap).forEach((key) => {\n                this.props.ExprMap[key].edited = tExprMap[key]['Edited'];\n                this.props.ExprMap[key].lhs = tExprMap[key]['Lhs'];\n            });\n            this.props.saveExprs();\n            this.setState({\n                transformationFlag: true,\n            });\n            this.forceUpdate();\n        }\n        else {\n            this.setState({\n                transformationErrorFlag: true\n            });\n        }\n    }\n    \n    updateTransformationSelected(e) {\n        this.setState({\n            transformationSelected: e.target.value\n        })\n    }\n    \n\n    render() {\n        let node1, node2;\n        \n        if (this.props.nodes.length > 1){\n            node1 = this.props.nodes[0];\n            node2 = this.props.nodes[1];\n        }\n        return (\n            <div>\n                {this.props.nodes.length > 1 && <section className='component-node-details details-diff'>\n                    <article>\n                        <h2>Diff (Node: <strong>{node1.nodeID}</strong> vs. Node: <strong>{node2.nodeID}</strong>)</h2>\n                        {toDiff(node1.expr.readable, node2.expr.readable).map((part, key) => (\n                            <span key={key} className={part.added ? \"green\" : part.removed ? \"red\" : \"black\"}>\n                                {part.value}\n                            </span>\n                        ))}\n                    </article>\n                </section>}\n                {this.props.nodes.map((node, key) => {\n                    let additional_info =\"type:\" + node.event_type + \" level:\" + node.level;\n                    let lemma_list = this.getLemmaList(node);\n\n                    let expr = node.expr.readable;\n                    if (this.props.expr_layout===\"SMT\") {\n                        console.log(node.expr);\n                    }\n                    else {\n                        /* expr = JSON.stringify(this.props.node.ast_json, null, 2); */\n                        if (node.ast_json) {\n                            expr += this.node_to_string(node.ast_json, true);\n                        }\n                    }\n                    const classNameTop = \"component-node-details details-top-\" + key;\n                    const classNameBottom = \"component-node-details details-bottom-\" + key;\n                    return (\n                        <div key = {key}>\n                            <section className={classNameTop}>\n                                <article>\n                                    <h2>Node <strong>{node.nodeID}, </strong>Expr <strong> {node.exprID} </strong>,\n                                        Parent <strong> {node.pobID}  </strong></h2>\n                                    <h3>{additional_info}</h3>\n                                    <pre className={this.props.nodes.length === 1 ? \"black\" : node === node1 ? \"red\" : \"green\" }>{expr}</pre>\n                                </article>\n                            </section>\n                            {lemma_list.length > 0 && <section className={classNameBottom}>\n                                <article>\n                                    {lemma_list}\n                                    <button onClick={this.learnTransformation.bind(this)}>Learn Transform</button>\n                                    {this.state.learningFlag && <p>Possible Transformations: </p>}\n                                    {this.state.possibleTransformations.length !== 0 && this.state.possibleTransformations.map((transformation,key) => (\n                                        <div key={key}>\n                                            <input type=\"radio\" name={\"transformation\"} value={transformation.xmlAst} onClick={this.updateTransformationSelected.bind(this)}/>{transformation.humanReadableAst}\n                                        </div>\n                                    ))}\n                                    {this.state.learningErrorFlag && <p style={{color: \"red\"}}>Internal Server Error: Please Try Again</p>}\n                                    <button onClick={this.transformExprs.bind(this)}>Apply Transform</button>\n                                    {this.state.transformationFlag && <p>Transformation Complete</p>}\n                                    {this.state.transformationErrorFlag && <p style={{color: \"red\"}}>Internal Server Error: Please Try Again</p>}\n                                </article>\n                            </section>}\n                        </div>\n                    );\n                })}\n            </div>\n);\n\n\n\n\n        /* let additional_info =\"type:\" + this.props.node.event_type + \" level:\" + this.props.node.level */\n        /* let lemma_list = new Array(); */\n\n        //if(this.props.node.event_type == \"EType.EXP_POB\"){\n        //    lemma_list.push(<h2 key =\"lemma-title\"> Lemmas summarization </h2>)\n        //    if(this.props.node.exprID in this.props.PobLemmasMap){\n        //        let lemmas = this.props.PobLemmasMap[this.props.node.exprID]\n        //        for (const lemma of lemmas){\n        //            lemma_list.push(<h3 key={\"lemma-header-\"+ lemma[0]}>ExprID: {lemma[0]}, From: {lemma[1]} to {lemma[2]}</h3>)\n        //            lemma_list.push(<pre key={\"lemma-expr-\"+lemma[0]}>{this.props.ExprMap[lemma[0]]}</pre>)\n        //        }\n        //    }\n        //}\n\n        //let expr = \"\"\n        //if(this.props.expr_layout==\"SMT\"){\n        //    expr = this.props.node.expr\n        //}else{\n        //    /* expr = JSON.stringify(this.props.node.ast_json, null, 2); */\n        //    if(this.props.node.ast_json){\n        //        expr += this.node_to_string(this.props.node.ast_json, true);\n        //    }\n        //}\n\n        //return (\n        //    <div >\n        //        <section className= { 'component-node-details details-top'} >\n        //        <article>\n        //        <h2>Node <strong>{this.props.node.nodeID}, </strong>Expr < strong > { this.props.node.exprID } </strong>, Parent <strong> {this.props.node.pobID}  </strong></h2 >\n        //        <h3>{additional_info}</h3>\n        //        <pre>{expr}</pre>\n        //        </article>\n        //        </section>\n        //        <section className= { 'component-node-details details-bottom'} >\n        //            <article>\n        //                {lemma_list}\n        //            </article>\n        //        </section>\n        //    </div>\n        //);\n\n    }\n\n}\n","import * as diff from 'diff';\nexport function toDiff(expr1, expr2){\n    let result : {value:string, added:boolean, removed:boolean}[] = [];\n    let expr1List = expr1.split(\"\\n\");\n    let expr2List = expr2.split(\"\\n\");\n    for (let i = 0; i < Math.min(expr1List.length, expr2List.length); i++){\n        let lineDiff = diff.diffWords(expr1List[i], expr2List[i]);\n        lineDiff.push({\n            added: false,\n            removed: false, \n            value: \"\\n\"\n        });\n        result = result.concat(lineDiff);\n        console.log(result);\n    }\n    console.log(result);\n    return result;\n    \n} ","import * as React from 'react';\nimport {getProblemName} from \"../helpers/readable\";\n\ntype Props = {\n    name: string\n    updateRelatedExprMap: (exprMap) => void\n}\n\ntype State = {\n    matchingFiles: any[],\n    exps: any[],\n    selected: string\n}\n\nclass ExprMapSelector extends React.Component<Props, State> {\n    constructor(props: Props){\n        super(props);\n        this.state = {\n            matchingFiles: [],\n            exps: [],\n            selected: \"\"\n        }\n    }\n    \n    async componentDidMount() {\n        await this.fetchExps();\n        this.getMatchingFiles();\n        await this.getMatchingExprMap();\n    }\n\n    getMatchingFiles() {\n        let data = this.state.exps.filter(exp => exp.name.includes(getProblemName(this.props.name)) && exp.name !== this.props.name);\n        \n        if (data.length > 0){\n            this.setState({\n                matchingFiles: data,\n                selected: data[0].name\n            });\n        }\n    }\n    \n    async getMatchingExprMap() {\n        const fetchedJSON = await fetch('http://localhost:5000/spacer/get_exprs', {\n            method: 'POST',\n            mode: 'cors',\n            headers: {\n                'Accept': 'application/json',\n                'Content-Type': 'application/json'\n            }, body : JSON.stringify({\n                exp_path: this.state.selected,\n            })\n        });\n\n        try {\n            const json = await fetchedJSON.json();\n            this.props.updateRelatedExprMap(JSON.parse(json.expr_map));\n        } catch (error) {\n            if (error.name === \"SatVisAssertionError\") {\n                throw error;\n            }\n            this.setState({\n                exps: []\n            });\n        }\n    }\n\n    async fetchExps() {\n        const fetchedJSON = await fetch('http://localhost:5000/spacer/fetch_exps', {\n            method: 'POST',\n            mode: 'cors',\n            headers: {\n                'Accept': 'application/json',\n                'Content-Type': 'application/json'\n            }, body : \"\"\n        });\n\n        try {\n            const json = await fetchedJSON.json();\n            this.setState({exps: json.exps_list})\n        } catch (error) {\n            if (error.name === \"SatVisAssertionError\") {\n                throw error;\n            }\n            this.setState({\n                exps: []\n            });\n        }\n    }\n    \n    updateSelected(e) {\n        this.setState({\n            selected: e.target.value\n        });\n    } \n    \n    render() {\n        return (\n            <section className={\"component-node-details details-top-right\"}>\n                <select id=\"exprs\" onChange={this.updateSelected.bind(this)}>\n                {this.state.matchingFiles.length > 0 && this.state.matchingFiles.map((exp, key) => (\n                    <option key={key} value={exp.name}>{exp.name}</option>\n                ))}\n                </select>\n                <button onClick={this.getMatchingExprMap.bind(this)}>Get Expr Map</button>\n            </section>\n\n        );\n    }\n}\n\nexport default ExprMapSelector","import * as React from 'react';\n\nimport '../styles/NodeMenu.css';\nimport NodeDetails from './NodeDetails';\nimport ExprMapSelector from \"./ExprMapSelector\";\nconst icons = require('../resources/icons/all.svg') as string;\n\ntype Props = {\n    messages_q: string[],\n    mode: \"proof\" | \"replay\" | \"iterative\",\n    tree: any | null,\n    nodeSelection: number[],\n    onUpdateNodeSelection: (selection: number[]) => void,\n    onPoke: () => void,\n    SatVisLayout: () => void,\n    PobVisLayout: () => void,\n    MultiSelectMode: () => void,\n    SMTLayout: () => void,\n    JSONLayout:() => void,\n    PobLemmasMap: {},\n    ExprMap: {},\n    layout: string,\n    expr_layout: \"SMT\"|\"JSON\",\n    saveExprs: () => void,\n    name: string\n};\n\ntype State = {\n    relatedExprMap: any\n}\n\nclass Aside extends React.Component<Props, State> {\n    constructor(props: Props){\n        super(props);\n        this.state = {\n            relatedExprMap: []\n        }\n    }\n\n    createButton(title, onClick, svg) {\n        return <button\n                   title={title}\n                   onClick = { onClick }\n               >\n            <svg viewBox=\"0 0 24 24\" className = \"icon big\" >\n                <use xlinkHref={ `${icons}#${svg}` } />\n            </svg>\n        </button>;\n    }\n    getNodeDetails() {\n        if (this.props.nodeSelection.length >= 1  && this.props.tree != null) {\n            let nodes: any[] = [];\n            for (let node of this.props.nodeSelection){\n                nodes.push(this.props.tree[node]);\n            }\n            return <NodeDetails\n                       nodes={nodes}\n                       name={this.props.name}\n                       PobLemmasMap = { this.props.PobLemmasMap }\n                       ExprMap = { this.props.ExprMap }\n                       layout = { this.props.layout }\n                       expr_layout ={this.props.expr_layout}\n                       saveExprs = {this.props.saveExprs}\n                       relatedExprMap = {this.state.relatedExprMap}\n                       \n            />;\n        } else {\n            return <section className={ 'component-node-details overview' }>\n                <small id=\"nodeInfo\" > <strong>{`${this.props.nodeSelection.length} nodes`\n                } </strong> selected</small >\n            </section>\n        }\n        \n    }\n    \n    updateRelatedExprMap(exprMap) {\n        this.setState({\n            relatedExprMap: exprMap \n        });\n    }\n\n    render() {\n        console.log(this.props.mode);\n        return(\n            <aside>\n                <article>\n                    {this.props.messages_q.map((mess, key) => (\n                        <section  key={key} className=\"component-node-menu\">{mess}</section>\n                    ))}\n                    <section className=\"component-node-menu\" >\n                        { this.createButton(\"Poke\", this.props.onPoke, \"graph-undo\") }\n                        { this.createButton(\"SatVis\", this.props.SatVisLayout, \"node-parents\") }\n                        { this.createButton(\"PobVis\", this.props.PobVisLayout, \"node-children\") }\n                        { this.createButton(\"MultiSelect\", this.props.MultiSelectMode, \"history-forward\") }\n                        <button\n                            title = \"SMT\"\n                            onClick = { this.props.SMTLayout }\n                        >\n                            <svg viewBox=\"0 0 30 30\" className = \"icon big\" >\n                                <text x=\"50%\" alignmentBaseline=\"middle\" textAnchor=\"middle\" y=\"50%\" dominantBaseline=\"middle\" fontWeight=\"light\" stroke=\"none\" fill=\"black\" fontFamily=\"monospace\">Raw</text>\n                            </svg>\n                        </button>\n                        <button\n                            title = \"JSON\"\n                            onClick = { this.props.JSONLayout }\n                        >\n                            <svg viewBox=\"0 0 35 35\" className = \"icon big\" >\n                                <text x=\"50%\" alignmentBaseline=\"middle\" textAnchor=\"middle\" y=\"50%\" dominantBaseline=\"middle\" fontWeight=\"light\" stroke=\"none\" fill=\"black\" fontFamily=\"monospace\">Sort</text>\n                            </svg>\n                        </button>\n                    </section>\n                </article>\n                { this.getNodeDetails() }\n                <ExprMapSelector\n                    name = {this.props.name}\n                    updateRelatedExprMap = {this.updateRelatedExprMap.bind(this)}\n                />\n            </aside>\n        );\n    }\n\n}\nexport default Aside; \n","import * as React from 'react';\nimport { Component } from 'react';\n\nimport Main from './Main';\nimport Aside from './Aside';\nimport '../styles/App.css';\nimport { assert } from '../model/util';\nimport {buildExprMap, buildPobLemmasMap} from \"../helpers/network\";\nimport {replaceVarNames, toReadable} from \"../helpers/readable\";\n\ntype Props = {\n    name: string,\n    exp_path: string,\n    mode: \"proof\" | \"replay\" | \"iterative\",\n    problem: string,\n    spacerUserOptions: string,\n    hideBracketsAssoc: boolean,\n    nonStrictForNegatedStrictInequalities: boolean,\n    orientClauses: boolean,\n    varNames: string\n};\n\ntype State = {\n    exp_path: string,\n    state: \"loaded\" | \"loaded iterative\" | \"waiting\" | \"layouting\" | \"error\",\n    trees: any[],\n    runCmd: string,\n    messages_q: string[],\n    nodeSelection: number[],\n    currentTime: number,\n    layout: string,\n    expr_layout: \"SMT\" | \"JSON\",\n    PobLemmasMap: {},\n    ExprMap: {},\n    multiselect: boolean,\n    varNames: string\n}\n\nclass App extends Component<Props, State> {\n\n    state: State = {\n        exp_path: this.props.exp_path,\n        state: \"waiting\",\n        trees: [],\n        runCmd: \"Run command:\",\n        messages_q: [\"\"],\n        nodeSelection: [],\n        currentTime: 0,\n        layout: \"PobVis\",\n        expr_layout: \"SMT\",\n        PobLemmasMap: {},\n        ExprMap: {},\n        multiselect: false,\n        varNames: \"\"\n    };\n\n    async componentDidMount() {\n        if(this.props.mode === \"iterative\"){\n            // call Spacer on given input problem\n            await this.runSpacer(this.props.problem, this.props.spacerUserOptions, this.props.mode);\n        }\n        else {\n            await this.poke();\n        }\n    }\n\n    async poke() {\n        let message_q = [\"Poking Spacer...\"];\n\n        console.log(\"poking...\")\n        this.setState({\n            state: \"waiting\",\n            messages_q: message_q,\n        });\n\n        const fetchedJSON = await fetch('http://localhost:5000/spacer/poke', {\n            method: 'POST',\n            mode: 'cors',\n            headers: {\n                'Accept': 'application/json',\n                'Content-Type': 'application/json'\n            }, body : JSON.stringify({\n                exp_path: this.state.exp_path,\n            })\n        });\n\n        try {\n            const json = await fetchedJSON.json();\n            console.log(\"backend response:\", json);\n            message_q = [\"Get response from Backend.\"]\n            let tree = json.nodes_list;\n            for (let i = 0; i < Object.keys(tree).length; i++){\n                let rawWithVars = replaceVarNames(tree[i].expr, json.var_names);\n                let readable = toReadable(rawWithVars);\n                tree[i].expr = {\n                    raw: rawWithVars,\n                    readable: readable,\n                };\n            }\n            const state = \"loaded\";\n            const PobLemmasMap = buildPobLemmasMap(tree, json.var_names);\n            // NOTE: use varNames in state, not in props. The one in state is returned by the backend.\n            let ExprMap;\n            if (json.expr_map === \"\") {\n                ExprMap = buildExprMap(tree, json.var_names);\n            }\n            else {\n                ExprMap = JSON.parse(json.expr_map);\n            }\n\n            this.setState({\n                trees: [tree],\n                runCmd: json.run_cmd,\n                messages_q: [\"Spacer is \"+json.spacer_state],\n                state: state,\n                PobLemmasMap: PobLemmasMap,\n                ExprMap: ExprMap,\n                varNames: json.var_names\n            });\n            console.log(\"state is set\")\n        } catch (error) {\n            if (error.name === \"SatVisAssertionError\") {\n                throw error;\n            }\n            this.setState({\n                state: \"error\",\n                messages_q: [`Error: ${error[\"message\"]}`],\n            });\n        }\n    }\n\n    async saveExprMap() {\n        await fetch('http://localhost:5000/spacer/save_exprs', {\n            method: 'POST',\n            mode: 'cors',\n            headers: {\n                'Accept': 'application/json',\n                'Content-Type': 'application/json'\n            }, body : JSON.stringify({\n                exp_path: this.state.exp_path,\n                expr_map: JSON.stringify(this.state.ExprMap)\n            })\n        });\n    }\n\n    async runSpacer(problem: string, spacerUserOptions: string, mode: \"proof\" | \"replay\" | \"iterative\") {\n        this.setState({\n            state: \"waiting\",\n            messages_q: [\"Waiting for Spacer...\"],\n        });\n\n        const fetchedJSON = await fetch('http://localhost:5000/spacer/start_iterative', {\n            method: 'POST',\n            mode: 'cors',\n            headers: {\n                'Accept': 'application/json',\n                'Content-Type': 'application/json'\n            },\n            body: JSON.stringify({\n                name: this.props.name,\n                file: problem,\n                spacerUserOptions: spacerUserOptions,\n                varNames: this.props.varNames\n            })\n        });\n\n        try {\n            const json = await fetchedJSON.json();\n            console.log(\"backend response:\", json);\n            if (json.status === \"success\") {\n                const state = (mode === \"iterative\" && json.spacer_state === \"running\") ? \"loaded iterative\" : \"loaded\";\n                const messages_q = [\"Hit Poke to update graph\"];\n                this.setState({\n                    exp_path: json.exp_name,\n                    messages_q: messages_q,\n                    state: state,\n                });\n            } else {\n                assert(json.status === \"error\");\n                const errorMess = json.message;\n                assert(errorMess !== undefined && errorMess !== null);\n                this.setState({\n                    state: \"error\",\n                    messages_q: [errorMess],\n                });\n            }\n        } catch (error) {\n            if (error.name === \"SatVisAssertionError\") {\n                throw error;\n            }\n            this.setState({\n                state: \"error\",\n                messages_q: [`Error: ${error[\"message\"]}`],\n            });\n        }\n    }\n\n    updateNodeSelection(nodeSelection: number[]) {\n        if (this.state.multiselect) {\n            let tempNodeSelection = this.state.nodeSelection.slice(this.state.nodeSelection.length-1).concat(nodeSelection);\n            this.setState({nodeSelection: tempNodeSelection});\n        } else {\n            this.setState({nodeSelection: nodeSelection});\n        }\n    }\n    \n    updateCurrentTime(currentTime: number) {\n        const trees = this.state.trees;\n        assert(trees.length > 0);\n        this.setState({\n            currentTime: currentTime\n        });\n    }\n\n    setPobVisLayout(){\n        this.setState({ layout: \"PobVis\" })\n    }\n    setSatVisLayout(){\n        this.setState({ layout: \"SatVis\" })\n    }\n    setMultiSelect() {\n        if (this.state.multiselect) {\n            if (this.state.nodeSelection.length > 0) {\n                this.setState({\n                    nodeSelection: [this.state.nodeSelection[this.state.nodeSelection.length - 1]]\n                });\n            }\n            else {\n                this.setState({\n                    messages_q: [\"Hit Poke to update graph\"]\n                })\n            }\n        } else {\n            this.setState({\n                messages_q: [\"Select Up to 2 nodes\"]\n            });\n        }\n        this.setState({\n            multiselect: !this.state.multiselect\n        });\n    }\n    setSMTLayout(){\n        this.setState({ expr_layout: \"SMT\" })\n    }\n    setJSONLayout(){\n        this.setState({ expr_layout: \"JSON\" })\n    }\n    render() {\n        const {\n            state,\n            trees,\n            runCmd,\n            messages_q,\n            nodeSelection,\n            currentTime,\n            layout,\n            expr_layout,\n            PobLemmasMap,\n            ExprMap\n        } = this.state;\n        let tree;\n        let main;\n        if (state === \"loaded\") {\n            assert(trees.length > 0);\n            tree = trees[trees.length - 1];\n            const hL = Object.keys(tree).length;\n            main = (\n                <Main\n                    mode = { this.props.mode }\n                    runCmd = {runCmd}\n                    tree = { tree }\n                    onNodeSelectionChange = { this.updateNodeSelection.bind(this) }\n                    nodeSelection = { nodeSelection }\n                    historyLength = { hL }\n                    currentTime = { currentTime }\n                    onCurrentTimeChange = { this.updateCurrentTime.bind(this) }\n                    layout = { layout }\n                    PobLemmasMap = { PobLemmasMap }\n                />\n            );\n        } else {\n            main = (\n                <main>\n                    <section className= \"slider-placeholder\" />\n                </main>\n            );\n        }\n        return (\n                <div className= \"app\" >\n                { main }\n                <Aside\n                    messages_q = {messages_q}\n                    mode = { this.props.mode }\n                    tree = { tree }\n                    nodeSelection = { nodeSelection }\n                    onUpdateNodeSelection = { this.updateNodeSelection.bind(this) }\n                    onPoke = {this.poke.bind(this)}\n                    SatVisLayout = { this.setSatVisLayout.bind(this) }\n                    PobVisLayout = { this.setPobVisLayout.bind(this) }\n                    MultiSelectMode= { this.setMultiSelect.bind(this) }\n                    SMTLayout = { this.setSMTLayout.bind(this) }\n                    JSONLayout = { this.setJSONLayout.bind(this) }\n                    PobLemmasMap = { PobLemmasMap }\n                    ExprMap = { ExprMap }\n                    layout = { layout }\n                    expr_layout ={expr_layout}\n                    saveExprs = {this.saveExprMap.bind(this)}\n                    name = {this.state.exp_path}\n                />\n                </div>\n        );\n\n    }\n\n}\n\nexport default App;\n","import * as React from 'react';\nimport App from \"./App\";\nimport '../styles/AppWrapper.css';\n\ntype Props = {\n    name: string,\n    problem: string,\n    exp_path: string,\n    spacerUserOptions: string,\n    mode: \"proof\" | \"replay\" | \"iterative\"\n    hideBracketsAssoc: boolean,\n    nonStrictForNegatedStrictInequalities: boolean, \n    orientClauses: boolean,\n    varNames: string\n};\n\nexport class AppWrapper extends React.Component<Props, {}> {\n    render() {\n        return (\n            <div id=\"appWrapper\">\n                <App \n                    name = {this.props.name}\n                    problem={this.props.problem}\n                    exp_path = {this.props.exp_path}\n                    spacerUserOptions={this.props.spacerUserOptions}\n                    mode={this.props.mode}\n                    hideBracketsAssoc={this.props.hideBracketsAssoc}\n                    nonStrictForNegatedStrictInequalities={this.props.nonStrictForNegatedStrictInequalities}\n                    orientClauses={this.props.orientClauses}\n                    varNames={this.props.varNames}\n                />\n            </div>\n        )\n    }\n}\n\n","import * as React from 'react';\nimport '../styles/NodeMenu.css';\nimport {Link} from 'react-router-dom';\n\ntype Props = {\n};\ntype State = {\n    isFetching: boolean,\n    exps: any[],\n}\n\nexport default class ExpTable extends React.Component<Props, State> {\n    constructor(props) {\n        super(props);\n        this.state = {\n            isFetching: false,\n            exps: []\n        };\n    }\n\n    async componentDidMount() {\n        await this.fetchExps();\n        // this.timer = setInterval(() => this.fetchUsers(), 5000);\n    }\n\n    render() {\n        return (\n                <div>\n                {this.state.exps.map((item, index) => (\n                        <h5 key = {item.name}><Link to={{pathname: `/replay/${item.name}`}} >{item.name}</Link> ${item.done}</h5>\n                ))}\n                <p>{this.state.isFetching ? 'Fetching experiments...' : ''}</p>\n                </div>\n        )\n    }\n    async fetchExps() {\n        this.setState({\n            isFetching: true,\n        });\n\n        const fetchedJSON = await fetch('http://localhost:5000/spacer/fetch_exps', {\n            method: 'POST',\n            mode: 'cors',\n            headers: {\n                'Accept': 'application/json',\n                'Content-Type': 'application/json'\n            }, body : \"\"\n        });\n\n        try {\n            const json = await fetchedJSON.json();\n            console.log(json)\n            this.setState({isFetching: false, exps: json.exps_list})\n        } catch (error) {\n            if (error.name === \"SatVisAssertionError\") {\n                throw error;\n            }\n            this.setState({\n                exps: []\n            });\n        }\n    }\n\n\n}\n","export const options = [\n    {name: \"fp.spacer.arith.solver\", type:\"unsigned int\"},\n    {name: \"fp.spacer.blast_term_ite_inflation\", type:\"unsigned int\"},\n    {name: \"fp.spacer.ctp\", type:\"bool\"},\n    {name: \"fp.spacer.dump_benchmarks\", type:\"bool\"},\n    {name: \"fp.spacer.dump_threshold\", type:\"double\"},\n    {name: \"fp.spacer.elim_aux\", type:\"bool\"},\n    {name: \"fp.spacer.eq_prop\", type:\"bool\"},\n    {name: \"fp.spacer.gpdr\", type:\"bool\"},\n    {name: \"fp.spacer.gpdr.bfs\", type:\"bool\"},\n    {name: \"fp.spacer.ground_pobs\", type:\"bool\"},\n    {name: \"fp.spacer.iuc\", type:\"unsigned int\"},\n    {name: \"fp.spacer.iuc.arith\", type:\"unsigned int\"},\n    {name: \"fp.spacer.iuc.debug_proof\", type:\"bool\"},\n    {name: \"fp.spacer.iuc.old_hyp_reducer\", type:\"bool\"},\n    {name: \"fp.spacer.iuc.print_farkas_stats\", type:\"bool\"},\n    {name: \"fp.spacer.iuc.split_farkas_literals\", type:\"bool\"},\n    {name: \"fp.spacer.keep_proxy\", type:\"bool\"},\n    {name: \"fp.spacer.logic\", type:\"symbol\"},\n    {name: \"fp.spacer.max_level\", type:\"unsigned int\"},\n    {name: \"fp.spacer.max_num_contexts\", type:\"unsigned int\"},\n    {name: \"fp.spacer.mbqi\", type:\"bool\"},\n    {name: \"fp.spacer.min_level\", type:\"unsigned int\"},\n    {name: \"fp.spacer.native_mbp\", type:\"bool\"},\n    {name: \"fp.spacer.order_children\", type:\"unsigned int\"},\n    {name: \"fp.spacer.p3.share_invariants\", type:\"bool\"},\n    {name: \"fp.spacer.p3.share_lemmas\", type:\"bool\"},\n    {name: \"fp.spacer.print_json\", type:\"symbol\"},\n    {name: \"fp.spacer.propagate\", type:\"bool\"},\n    {name: \"fp.spacer.push_pob\", type:\"bool\"},\n    {name: \"fp.spacer.push_pob_max_depth\", type:\"unsigned int\"},\n    {name: \"fp.spacer.q3\", type:\"bool\"},\n    {name: \"fp.spacer.q3.instantiate\", type:\"bool\"},\n    {name: \"fp.spacer.q3.qgen.normalize\", type:\"bool\"},\n    {name: \"fp.spacer.q3.use_qgen\", type:\"bool\"},\n    {name: \"fp.spacer.random_seed\", type:\"unsigned int\"},\n    {name: \"fp.spacer.reach_dnf\", type:\"bool\"},\n    {name: \"fp.spacer.reset_pob_queue\", type:\"bool\"},\n    {name: \"fp.spacer.restart_initial_threshold\", type:\"unsigned int\"},\n    {name: \"fp.spacer.restarts\", type:\"bool\"},\n    {name: \"fp.spacer.simplify_lemmas_post\", type:\"bool\"},\n    {name: \"fp.spacer.simplify_lemmas_pre\", type:\"bool\"},\n    {name: \"fp.spacer.simplify_pob\", type:\"bool\"},\n    {name: \"fp.spacer.trace_file\", type:\"symbol\"},\n    {name: \"fp.spacer.use_array_eq_generalizer\", type:\"bool\"},\n    {name: \"fp.spacer.use_bg_invs\", type:\"bool\"},\n    {name: \"fp.spacer.use_derivations\", type:\"bool\"},\n    {name: \"fp.spacer.use_euf_gen\", type:\"bool\"},\n    {name: \"fp.spacer.use_inc_clause\", type:\"bool\"},\n    {name: \"fp.spacer.use_inductive_generalizer\", type:\"bool\"},\n    {name: \"fp.spacer.use_lemma_as_cti\", type:\"bool\"},\n    {name: \"fp.spacer.use_lim_num_gen\", type:\"bool\"},\n    {name: \"fp.spacer.validate_lemmas\", type:\"bool\"},\n    {name: \"tr\", type: \"bool\"},\n    {name: \"fp.spacer.weak_abs\", type:\"bool\"}\n];\n\n","import * as React from 'react';\nimport {options} from \"../helpers/spacerOptions\";\nimport eye from \"./../resources/icons/singles/eye.svg\"\n\ntype Props = {\n    spacerUserOptions: string,\n    onChangeVariables: (e: React.ChangeEvent<HTMLInputElement>) => void,\n    changeSpacerUserOptions: (spacerUserOptions: string) => void,\n}\n\ntype State = {\n    optionTypeHTML: JSX.Element,\n    optionValue: string,\n    optionName: string,\n    optionType: string,\n    allOptions: {type:string, name: string, value:string}[],\n    showOptions: boolean\n}\n\nclass MenuOptions extends React.Component<Props, State> {\n    state = {\n        optionTypeHTML: <div />,\n        optionType: \"\",\n        optionValue: \"\",\n        optionName: \"\",\n        allOptions: [],\n        showOptions: true\n    };\n\n    updateSpacerOptions() {\n        let allOptions: {type:string, name: string, value:string}[] = this.state.allOptions;\n        let fullOptionString = \"\";\n        for (let option of allOptions) {\n            if (option.type === \"flag\") {\n                fullOptionString += \"-\" + option.name + \" \";\n            }\n            else {\n                fullOptionString += option.name + \"=\" + option.value + \" \";\n            }\n        }\n        this.props.changeSpacerUserOptions(fullOptionString);\n    }\n\n    storeSpacerOptions(e) {\n        e.preventDefault();\n        e.target.reset();\n        if (this.state.optionName === \"\" || (this.state.optionType !== \"custom\" && this.state.optionValue === \"\")) return;\n        let allOptions: {type:string, name: string, value:string}[] = this.state.allOptions;\n        allOptions.push({\n            name: this.state.optionName,\n            value: this.state.optionValue,\n            type: this.state.optionValue === \"\" ? \"flag\" : this.state.optionType\n        });\n        this.setState({\n            allOptions: allOptions\n        });\n        this.setState({\n            optionName: \"\",\n            optionValue: \"\",\n            optionType: \"\"\n        });\n        this.updateSpacerOptions();\n    }\n\n    displaySpacerOptions() {\n        if (this.props.spacerUserOptions !== \"\") {\n            return this.props.spacerUserOptions.trim().split(\" \");\n        }\n        return []\n    }\n\n    updateOptionValue(e){\n        this.setState({\n            optionValue: e.target.value\n        });\n    }\n\n    getOptions(name:string, type:string) {\n        if (type === \"bool\") {\n            this.setState({\n                optionTypeHTML:\n                    <React.Fragment>\n                        <input type=\"radio\" name={name} value=\"true\" onClick={this.updateOptionValue.bind(this)}/>True\n                        <input type=\"radio\" name={name} value=\"false\" onClick={this.updateOptionValue.bind(this)}/>False\n                        <button className=\"fake-button\" type=\"submit\" value=\"Submit\">+</button>\n                    </React.Fragment>\n            });\n        } else {\n            this.setState({\n                optionTypeHTML:\n                    <React.Fragment>\n                        <input type=\"text\" name={name} placeholder={type} defaultValue={this.state.optionValue} onChange={this.updateOptionValue.bind(this)}/>\n                        <button className=\"fake-button\" type=\"submit\" value=\"Submit\">+</button>\n                    </React.Fragment>\n            });\n        }\n    }\n\n    changeOptionType(e: React.ChangeEvent<HTMLInputElement>){\n        let tempList = options.filter(option => option.name === e.target.value);\n        let type = \"custom\";\n        if (tempList.length > 0) {\n            type = tempList[0].type;\n        }\n        this.setState({\n            optionName: e.target.value,\n            optionType: type\n        });\n        this.getOptions(e.target.value, type);\n    }\n\n    removeOption(name:string, value:string){\n        let allOptions: {type:string, name: string, value:string}[] = this.state.allOptions;\n        let rIndex = -1;\n        if (value === undefined){\n            name = name.replace(\"-\", \"\");\n            value = \"\";\n        }\n        for (let i = 0; i < allOptions.length; i++){\n            if (allOptions[i].name === name && allOptions[i].value === value){\n                rIndex = i;\n                break;\n            }\n        }\n        if (rIndex === -1) return;\n        allOptions.splice(rIndex, 1);\n        this.updateSpacerOptions();\n    }\n    changeSpacerManualUserOptions(event: React.ChangeEvent<HTMLInputElement>) {\n        const newValue = event.target.value;\n        this.props.changeSpacerUserOptions(newValue);\n    }\n\n    showHideOptions() {\n        this.setState({\n            showOptions: !this.state.showOptions\n        });\n    }\n    render() {\n        let selectedOptions = this.displaySpacerOptions();\n        return (\n            <aside>\n                <fieldset className=\"options-card\">\n                    <h3>Z3 Options</h3>\n                    <ul>\n                        <li>\n                            <label htmlFor=\"userOptions\" className=\"form-label\">Additional Spacer options</label>\n                            <button onClick={this.showHideOptions.bind(this)} className=\"showHideButton\" title={\"showHide\"}><img className=\"eyeImage\" src={eye} alt=\"eye\"/></button>\n                            {selectedOptions.length !== 0 && this.state.showOptions && selectedOptions.map((option, key) => {\n                                if (option !== \"\") {\n                                    let kvp = option.split(\"=\");\n                                    let name = kvp[0];\n                                    let value = kvp[1];\n                                    let displayValue = value ? name + \": \" + value : name;\n                                    return (\n                                        <div className=\"displaySpacerOption\" key={key}>\n                                            <span>{displayValue}</span>\n                                            <button className=\"fake-button\" type=\"button\" onClick={this.removeOption.bind(this, name, value)}>x</button>\n                                        </div>\n                                    );\n                                }\n                                return \"\";\n                            })}\n                            <form className=\"tfradio\" name=\"tfradio\" onSubmit={this.storeSpacerOptions.bind(this)}>\n                                <input type=\"text\" className=\"optionsList\" list=\"spacerOptions\" name=\"spacerOptions\" onChange={this.changeOptionType.bind(this)}/>\n                                <datalist id=\"spacerOptions\">\n                                    {options.map((part, key) => (\n                                        <option value={part.name} key={key}/>\n                                    ))}\n                                </datalist>\n                                {this.state.optionTypeHTML}\n                            </form>\n                        </li>\n                        <label>Or using manual run parameters</label>\n                        <input type=\"text\" name=\"manualRun\" onChange={this.changeSpacerManualUserOptions.bind(this)}/>\n                        <li>\n                            <label htmlFor=\"varOptions\" className=\"form-label\">Variable Designation</label>\n                            <p>Enter a single space separated list of your chosen variables in the order they appear (var1 var2 var3 ..)</p>\n                            <input type=\"text\" name=\"variables\" onChange={this.props.onChangeVariables}/>\n                        </li>\n                    </ul>\n                </fieldset>\n            </aside>\n        );\n    }\n}\n\nexport default MenuOptions;","import * as React from 'react';\nimport {Link} from 'react-router-dom';\nimport '../styles/Menu.css';\nimport * as Monaco from 'monaco-editor'\nimport ExpTable from './ExpTable';\nimport { assert } from '../model/util';\nimport MenuOptions from \"./MenuOptions\";\n\nconst icons = require('../resources/icons/all.svg') as string;\n\ntype Props = {\n    problem: string,\n    problemName: string,\n    spacerUserOptions: string,\n    hideBracketsAssoc: boolean,\n    nonStrictForNegatedStrictInequalities: boolean\n    orientClauses: boolean,\n    onChangeProblem: (problem: string) => void,\n    onChangeProblemName: (problemName: string) => void,\n    onChangeSpacerUserOptions: (spacerUserOptions: string) => void,\n    onChangeHideBracketsAssoc: (newValue: boolean) => void,\n    onChangeNonStrictForNegatedStrictInequalities: (newValue: boolean) => void,\n    onChangeOrientClauses: (newValue: boolean) => void\n    onChangeVariables: (newValue: string) => void\n}\n\nexport class Menu extends React.Component<Props, {}> {\n    // private isChromeOrFirefox = navigator.userAgent.indexOf('Chrome') > -1 || navigator.userAgent.indexOf('Firefox') > -1;\n    private isChromeOrFirefox = true;\n    private fileUpload = React.createRef<HTMLInputElement>();\n    monacoDiv = React.createRef<HTMLDivElement>();\n    monaco: Monaco.editor.IStandaloneCodeEditor | null = null\n\n    componentDidMount() {\n        if (!this.isChromeOrFirefox) {\n            return;\n        }\n        // generate instance of Monaco Editor\n        this.monaco = Monaco.editor.create(this.monacoDiv.current!, {\n            lineNumbers: 'off',\n            roundedSelection: false,\n            scrollBeyondLastLine: false,\n            scrollBeyondLastColumn: 0,\n            minimap: {\n                enabled: false\n            },\n            renderLineHighlight: 'none',\n            hideCursorInOverviewRuler: true,\n            links: false,\n            overviewRulerBorder: false,\n            automaticLayout: true,\n            lineDecorationsWidth: 0,\n            lineNumbersMinChars: 0,\n            wordWrap: 'wordWrapColumn'\n            // fontFamily: \"Monaco\" TODO: decide which font to use. By default, multiple fonts are loaded, which is quite slow\n        });\n        this.monaco.setValue(this.props.problem);\n        this.monaco.getModel()!.onDidChangeContent(() => {\n            this.props.onChangeProblem(this.monaco!.getModel()!.getValue());\n        });\n    }\n\n    componentDidUpdate(prevProps: Props) {\n        assert(this.isChromeOrFirefox);\n        if (this.props.problem !== prevProps.problem) {\n            this.monaco!.setValue(this.props.problem);\n        }\n    }\n\n    render() {\n        if (!this.isChromeOrFirefox) {\n            return (\n                <section className=\"unsupported-message\">\n                    <svg viewBox=\"0 0 24 24\" className=\"icon\">\n                        <use xlinkHref={`${icons}#alert-triangle`}/>\n                    </svg>\n                    <span>Your current browser is not supported. Please use Chrome or Firefox!</span>\n                </section>\n            );\n        }\n\n        return (\n            <section className=\"component-menu\">\n                <h1>Spacer Visualization</h1>\n\n                <section className=\"editor\">\n                    <div className=\"editor-spacer\">\n                        <main>\n                            <div className=\"headline-wrapper\">\n                                <h2>Input</h2>\n                                <small className=\"file-name\">{this.props.problemName}</small>\n                                <button title=\"Pick a new file\" onClick={this.chooseFile.bind(this)}>\n                                    <svg viewBox=\"0 0 24 24\" className=\"icon big\">\n                                        <use xlinkHref={`${icons}#graph-upload`}/>\n                                    </svg>\n                                </button>\n                            </div>\n\n                            <input\n                                ref={this.fileUpload}\n                                type=\"file\"\n                                onChange={this.uploadEncoding.bind(this)}\n                            />\n                            <div ref={this.monacoDiv} className=\"monaco\"></div>\n                        </main>\n\n                        <aside>\n                            <MenuOptions \n                                spacerUserOptions = {this.props.spacerUserOptions}\n                                onChangeVariables = {this.onChangeVariables.bind(this)}\n                                changeSpacerUserOptions={this.props.onChangeSpacerUserOptions.bind(this)}\n                            />\n                            <ExpTable/>\n                        </aside>\n                    </div>\n                </section>\n\n                <section className=\"run-menu\">\n                    <Link to=\"/iterative/\" className=\"fake-button\">Hit and Run</Link>\n                </section>\n            </section>\n        );\n    }\n\n    chooseFile() {\n        if (this.fileUpload.current) {\n            this.fileUpload.current.click();\n        }\n    }\n\n    onChangeVariables(e) {\n        this.props.onChangeVariables(e.target.value);\n    }\n\n    uploadEncoding(event: React.ChangeEvent<HTMLInputElement>) {\n        if (event.target.files !== null && event.target.files.length > 0) {\n            const file = event.target.files[0];\n\n            const reader = new FileReader();\n            // callback which will be executed when readAsText is called\n            reader.onloadend = () => {\n                const text = (reader.result ? reader.result : '') as string;\n                this.props.onChangeProblem(text);\n                this.props.onChangeProblemName(file.name);\n\n            };\n            reader.readAsText(file);\n        }\n    }\n}\n","import * as React from 'react';\nimport * as d3 from 'd3';\nimport SunburstChart, {Node} from \"sunburst-chart\";\nimport {timeDetailedItem} from \"../dashboardTypes\";\n\ntype Props = {\n    data: timeDetailedItem | {},\n    height: number,\n    width: number,\n    className: string,\n    type: string,\n    index: string\n}\n\ntype State = {}\n\nclass TimeChart extends React.Component<Props, State> {\n    private totalTime: number;\n    private readonly palette: string[];\n    constructor(props) {\n        super(props);\n        this.totalTime = -1;\n        this.palette = [\"#023FA5\", \"#7D87B9\", \"#BEC1D4\", \"#D6BCC0\", \"#BB7784\", \"#8E063B\", \"#4A6FE3\", \"#8595E1\", \"#B5BBE3\",\n                \"#E6AFB9\", \"#E07B91\", \"#D33F6A\", \"#11C638\", \"#8DD593\", \"#C6DEC7\", \"#EAD3C6\", \"#F0B98D\", \"#EF9708\",\n                \"#0FCFC0\", \"#9CDED6\", \"#D5EAE7\", \"#F3E1EB\", \"#F6C4E1\", \"#F79CD4\"]\n    }\n    componentDidMount() {\n        this.createSunburst();\n    }\n    componentDidUpdate(prevProps: Readonly<any>, prevState: Readonly<any>, snapshot?: any): void {\n        this.createSunburst();\n    }\n\n    prepareData() {\n        let tmp:Object[] = [];\n        let keys = Object.keys(this.props.data);\n        \n        for (let i = 0; i < keys.length; i++){\n            tmp.push({\n                name: keys[i], \n                size: this.props.data[keys[i]],\n                children: []\n            });\n        }\n        \n        return tmp;\n    }\n    \n    getData(input): Node[] {        \n        let result = {};\n        let last = \"zzzzzzz\";\n        \n        for (let i = 0; i < input.length; i++){\n            let key = input[i].name;\n            let value = input[i].size;\n            \n            if (key.includes(last)){\n                result[last].children.push({\n                    name: key,\n                    size: value,\n                    children: []\n                });\n            }\n            else {\n                result[key] = {\n                    name: key,\n                    size: value,\n                    children: []\n                };\n                last = key\n            }\n        }\n        \n        let resultKeys = Object.keys(result);\n        for (let i = 0; i < resultKeys.length; i++){\n            if (result[resultKeys[i]].children){\n                result[resultKeys[i]].children = this.getData(result[resultKeys[i]].children);\n            }\n        }\n        \n        return Object.values(result);\n    }\n    \n    createSunburst() {\n        if (this.props.type === \"\") d3.select(\".sunburst-viz\").remove();\n        if (this.props.type !== \"\") d3.select(\".\" + this.props.className + \" .sunburst-viz\").remove();\n        let colour = d3.scaleOrdinal()\n            .domain(Object.keys(this.props.data))\n            .range(this.palette);\n        let data: Node[] = this.getData(this.prepareData());\n        const myChart = SunburstChart();\n        myChart.data(data[0])(document.getElementById(this.props.className)!)\n               .width(this.props.width)\n               .height(this.props.height)\n               .color(x => colour(x.name))\n               .label(x => x.name!)\n               .size('size')\n               .tooltipTitle(x => x.name!);\n        \n        if (this.props.type !== \"\"){\n            myChart.showLabels(false);\n        }\n    }\n\n\n    render() {\n        this.totalTime = this.props.data[\"time\"];\n        return (\n          <div className={this.props.className} id={this.props.className}>\n              {this.props.type === \"\" && <h2>Total Time: {this.totalTime}</h2>}\n              {this.props.type !== \"\" && <p>{this.props.index}</p>}\n              \n          </div>  \n        );\n    }\n}\n\nexport default TimeChart;\n","export function potholeToNormal(input) {\n    let words = input.split(\"_\");\n    for (let i = 0; i < words.length; i++){\n        words[i] = words[i][0].toUpperCase() + words[i].substring(1);\n    }\n    \n    return words.join(\" \");\n    \n}","import * as React from 'react';\nimport TimeChart from \"./TimeChart\";\nimport {potholeToNormal} from \"../../helpers/naming\";\nimport {dataItem} from \"../dashboardTypes\";\n\ntype Props = {\n    data: dataItem\n}\n\ntype State = {}\n\nclass IndividualBenchmark extends React.Component<Props, State> {\n    componentDidMount() {\n        console.log(this.props.data);\n    }\n    componentDidUpdate(prevProps: Readonly<any>, prevState: Readonly<any>, snapshot?: any): void {\n        console.log(this.props.data);\n    }\n\n    filterTimeData() {\n        return Object.keys(this.props.data)\n            .filter(function(d) {return d.includes(\"time\")})\n            .reduce((obj, key) => {\n                obj[key] = this.props.data[key];\n                return obj;\n            }, {});\n    }\n    render() {\n        let dataDisplay = [\"result\",\"depth\", \"memory\", \"max_memory\", \"SPACER_num_invariants\", \"SPACER_num_lemmas\",\n            \"SPACER_num_propagations\", \"SPACER_num_active_lemmas\"];\n        let timeData = this.filterTimeData();\n        return (\n          <div className=\"overview\">\n              <div className=\"details\">\n                  <h1>{this.props.data.index}</h1>\n                  {dataDisplay.map((dataKey, key) => (\n                      <p className=\"data-details\" key={key}>{potholeToNormal(dataKey)}: {this.props.data[dataKey]}</p>\n                  ))}\n              </div>\n              <TimeChart \n                  data={timeData}\n                  height={600}\n                  width={600}\n                  className={\"time\"}\n                  type={\"\"}\n                  index={\"\"}\n              />\n          </div>  \n        );\n    }\n}\n\nexport default IndividualBenchmark;","import * as React from 'react';\nimport * as d3 from 'd3';\nimport {dashboardConfig, resultItem} from \"../dashboardTypes\";\n\ntype Props = {\n    key: number,\n    data: resultItem [],\n    config: dashboardConfig,\n    selectBenchmark: (e: resultItem) => void\n}\n\ntype State = {}\n\nclass ResultsOverview extends React.Component<Props, State> {\n    componentDidMount() {\n        this.createResultsOverview();\n    }\n    componentDidUpdate(prevProps: Readonly<any>, prevState: Readonly<any>, snapshot?: any): void {\n        this.createResultsOverview();\n    }\n\n    createResultsOverview() {\n        d3.select(\".results-overview svg\").remove();\n        let data = this.props.data;\n        \n        let results = d3.map(data, function(d) {return d.result;}).keys();\n        \n        let colour = d3.scaleOrdinal()\n            .domain(results)\n            .range(d3.schemeCategory10);\n        \n        let xValue = function(d) {\n            return d.index;\n        };\n        let index = d3.map(data,function(d) {return d.index;}).keys();\n        let xScale = d3.scaleBand()\n            .domain(index)\n            .range([this.props.config.margin.left, this.props.config.width - this.props.config.margin.right]);\n\n        let xMap = function(d) {\n            return xScale(xValue(d))\n        };\n\n        let xAxis = d3.axisBottom(xScale).tickValues([]);\n\n        let yValue = function(d) {\n            return d.SPACER_num_invariants;\n        };\n        let yScale = d3.scaleLinear()\n            .domain([d3.min(data, yValue), d3.max(data, yValue)])\n            .range([this.props.config.graphHeight - this.props.config.margin.top, this.props.config.margin.bottom]);\n\n        let yMap = function(d) {\n            return yScale(yValue(d))\n        };\n\n        let yAxis = d3.axisLeft(yScale);\n\n        let svg = d3.select(\".results-overview\")\n            .append(\"svg\")\n            .attr(\"width\", this.props.config.width)\n            .attr(\"height\", this.props.config.height);\n        svg.append(\"text\")\n            .attr(\"x\", this.props.config.width / 2)\n            .attr(\"y\", this.props.config.margin.top)\n            .attr(\"text-anchor\", \"middle\")\n            .style(\"font-size\", this.props.config.font.title)\n            .style(\"text-decoration\", \"underline\")\n            .text(\"Index x Result x Num of Invariants\");\n        svg.append(\"g\")\n            .attr(\"class\", \"x-axis\")\n            .attr(\"transform\", \"translate(0,\" + (this.props.config.graphHeight - this.props.config.margin.top) + \")\")\n            .call(xAxis);\n        svg.append(\"g\")\n            .attr(\"class\", \"y-axis\")\n            .attr(\"transform\", \"translate(\" + this.props.config.margin.left + \",0)\")\n            .style(\"font-size\", this.props.config.font.axis)\n            .call(yAxis);\n        let g = svg.append(\"g\");\n        g.selectAll(\".dot\")\n            .data(data)\n            .enter()\n            .append('circle')\n            .attr('r', 10)\n            .attr('cx', function(d) {return xMap(d) + xScale.bandwidth() /2})\n            .attr('cy', yMap)\n            .on(\"mouseenter\", function(d) {\n                d3.select(\".overview-tooltip\")\n                    .append(\"text\")\n                    .text(d.index);\n            })\n            .on(\"mouseout\", function(d) {\n                d3.select(\".overview-tooltip\")\n                    .select(\"text\")\n                    .remove();\n            })\n            .on(\"click\", this.props.selectBenchmark)\n            .style(\"fill\", function(d) {return colour(d.result)});\n        g.selectAll(\".result-text\")\n            .data(data)\n            .enter()\n            .append(\"text\")\n            .attr(\"class\", \"label\")\n            .style(\"font-size\", this.props.config.font.label)\n            .attr(\"x\", function(d) {return xMap(d) + (xScale.bandwidth() / 4)})\n            .attr(\"y\", function(d) {return yMap(d) - 25})\n            .attr(\"dy\", \".75em\")\n            .text(function(d) {return d.SPACER_num_invariants});\n        g.selectAll(\"legendDots\")\n            .data(results)\n            .enter()\n            .append(\"circle\")\n            .attr(\"cx\", function(this,d,i) {return this.props.config.margin.left + i*100}.bind(this))\n            .attr(\"cy\", this.props.config.graphHeight + 15)\n            .attr(\"r\", 5)\n            .style(\"fill\", function(d){return colour(d)});\n        g.selectAll(\"legendText\")\n            .data(results)\n            .enter()\n            .append(\"text\")\n            .attr(\"x\", function(this,d,i){return this.props.config.margin.left + 10 + i*100}.bind(this))\n            .attr(\"y\", this.props.config.graphHeight + 20)\n            .text(function(d){return d})\n\n\n\n    }\n\n    render() {\n        return (\n            <div className=\"results-overview\">\n            </div>\n        );\n    }\n}\n\nexport default ResultsOverview\n","import * as React from 'react';\nimport TimeChart from \"./TimeChart\";\nimport {timeDetailedItem} from \"../dashboardTypes\";\n\ntype State = {}\n\ntype Props = {\n    data: timeDetailedItem[]\n}\n\nclass TimeZoom extends React.Component<Props, State> {\n    render() {\n        return (\n            <div>\n                {this.props.data.map((instance, key) => {\n                    return (\n                        <TimeChart\n                            key={key}\n                            data={instance}\n                            height={200}\n                            width={200}\n                            className={\"timezoom\" + key}\n                            type={\"timezoom\"}\n                            index={instance[\"index\"]!}\n                        />\n                    );\n                })}\n                \n            </div>\n        );\n    }\n}\n\nexport default TimeZoom;\n","import * as React from 'react';\nimport * as d3 from 'd3';\nimport {potholeToNormal} from \"../../helpers/naming\";\nimport {dashboardConfig, depthItem, memoryItem, timeItem} from \"../dashboardTypes\";\n\ntype Props = {\n    key: number,\n    data: (depthItem | memoryItem | timeItem) [],\n    config: dashboardConfig,\n    className: string,\n    classText: string,\n    yValue: string,\n    updateZoomView: (type:string) => void\n}\n\ntype State = {}\n\nclass GeneralGraphOverview extends React.Component<Props, State> {\n    componentDidMount() {\n        this.createGraph();\n    }\n    componentDidUpdate(prevProps: Readonly<any>, prevState: Readonly<any>, snapshot?: any): void {\n        this.createGraph();\n    }\n    \n    createGraph() {\n        d3.select(\".\" + this.props.className + \" svg\").remove();\n        \n        if (this.props.data.length === 0) return;\n        let data = this.props.data;\n        let xValue = function(d) {\n            return d.index;\n        };\n        let index = d3.map(data,function(d) {return d.index;}).keys();\n        let xScale = d3.scaleBand()\n            .domain(index)\n            .range([this.props.config.margin.left, this.props.config.width - this.props.config.margin.right]);\n        let xMap = function(d) {\n            return xScale(xValue(d))\n        };\n        let xAxis = d3.axisBottom(xScale).tickValues([]);\n\n        let yValue = function(this,d) {\n            return d[this.props.yValue];\n        }.bind(this);\n        let yScale = d3.scaleLinear()\n            .domain([d3.min(data, yValue), d3.max(data, yValue)])\n            .range([this.props.config.graphHeight - this.props.config.margin.top, this.props.config.margin.bottom]);\n        let yMap = function(d) {\n            return yScale(yValue(d))\n        };\n        let yAxis = d3.axisLeft(yScale);\n\n        let svg = d3.select(\".\" + this.props.className)\n            .append(\"svg\")\n            .attr(\"width\", this.props.config.width)\n            .attr(\"height\", this.props.config.height)\n            .on (\"click\", this.props.updateZoomView);\n        svg.append(\"text\")\n            .attr(\"x\", this.props.config.width / 2)\n            .attr(\"y\", this.props.config.margin.top)\n            .attr(\"text-anchor\", \"middle\")\n            .style(\"font-size\", this.props.config.font.title)\n            .style(\"text-decoration\", \"underline\")\n            .text(\"Index x \" + potholeToNormal(this.props.yValue));\n        svg.append(\"g\")\n            .attr(\"class\", \"x-axis\")\n            .attr(\"transform\", \"translate(0,\" + (this.props.config.graphHeight - this.props.config.margin.top) + \")\")\n            .call(xAxis);\n        svg.append(\"g\")\n            .attr(\"class\", \"y-axis\")\n            .attr(\"transform\", \"translate(\" + this.props.config.margin.left + \",0)\")\n            .style(\"font-size\", this.props.config.font.axis)\n            .call(yAxis);\n        let g = svg.append(\"g\");\n        \n        g.selectAll(\".bar\")\n            .data(data)\n            .enter()\n            .append(\"rect\")\n            .attr(\"class\", \"bar\")\n            .attr(\"x\", xMap)\n            .attr(\"y\", yMap)\n            .attr(\"width\", xScale.bandwidth() - 1)\n            .attr(\"height\", function(this,d) {return (this.props.config.graphHeight - this.props.config.margin.top - yScale(d[this.props.yValue]))}.bind(this));\n\n        g.selectAll(\".\" + this.props.classText)\n            .data(data)\n            .enter()\n            .append(\"text\")\n            .style(\"font-size\", this.props.config.font.label)\n            .attr(\"class\", \"label\")\n            .attr(\"x\", function(d) {return xMap(d)})\n            .attr(\"y\", function(d) {return yMap(d) - 15})\n            .attr(\"dy\", \".75em\")\n            .text(function(this,d) {return d[this.props.yValue]}.bind(this));\n    }\n    render() {\n        return (\n            <div className={this.props.className}>\n            </div>\n\n        );\n    }\n}\n\nexport default GeneralGraphOverview;\n","import * as React from 'react';\nimport './../styles/Dashboard.css';\nimport * as d3 from 'd3';\nimport IndividualBenchmark from \"./DashboardComponents/IndividualBenchmark\";\nimport ResultsOverview from \"./DashboardComponents/ResultsOverview\";\nimport arrow from './../resources/icons/singles/angle-arrow-down.svg'\nimport TimeZoom from \"./DashboardComponents/TimeZoom\";\nimport GeneralGraphOverview from \"./DashboardComponents/GeneralGraphOverview\";\nimport {dashboardConfig, dataItem, depthItem, memoryItem, resultItem, timeItem} from \"./dashboardTypes\";\n\ntype State = {\n    data: dataItem[]\n    selectedBenchmark: string,\n    graphMin: number,\n    graphMax: number,\n    customMode: boolean,\n    customData: {\n        depth: depthItem[],\n        result: resultItem[], \n        memory: memoryItem[], \n        time: timeItem[]\n    },\n    zoomMode: string,\n    dashboardConfig: dashboardConfig\n}\n\ntype Props = {\n    rawData: string\n}\n\nclass Dashboard extends React.Component<Props, State> {\n    private readonly overviewMetrics: string[];\n    constructor(props: Props) {\n        super(props);\n        this.overviewMetrics = [\"depth\", \"memory\", \"time\", \"result\"];\n            this.state = {\n            data: [],\n            selectedBenchmark: \"\",\n            graphMin: 0,\n            graphMax: 30,\n            customMode: false,\n            customData: {\n                depth: [],\n                result: [],\n                memory: [],\n                time: []\n            },\n            zoomMode: \"\",\n            dashboardConfig: {\n                height: 450,\n                width: 1600,\n                graphHeight: 400,\n                margin: {\n                    top: 20,\n                    right: 20,\n                    bottom: 50,\n                    left: 60\n                },\n                font: {\n                    title: \"20px\",\n                    axis: \"20px\",\n                    label: \"14px\"\n                },\n                barNum: 10\n            }\n        };\n    }\n    componentDidMount() {\n        this.loadData();\n        document.addEventListener(\"keydown\", this.handleGraphTranslationKeyboard.bind(this));\n    }\n    \n\n    loadData() {\n        let file = this.props.rawData;\n        let parsedData = d3.csvParse(file, function (d) {\n            d.SPACER_cluster_out_of_gas = +d.SPACER_cluster_out_of_gas;\n            d.SPACER_expand_pob_undef = +d.SPACER_expand_pob_undef;\n            d.SPACER_inductive_level = +d.SPACER_inductive_level;\n            d.SPACER_max_cluster_size = +d.SPACER_max_cluster_size;\n            d.SPACER_max_cvx_reduced_dim = +d.SPACER_max_cvx_reduced_dim;\n            d.depth = +d.depth;\n            d.SPACER_max_query_lvl = +d.SPACER_max_query_lvl;\n            d.SPACER_need_sage = +d.SPACER_need_sage;\n            d.SPACER_num_abstractions = +d.SPACER_num_abstractions;\n            d.SPACER_num_abstractions_failed = +d.SPACER_num_abstractions_failed;\n            d.SPACER_num_abstractions_success = +d.SPACER_num_abstractions_success;\n            d.SPACER_num_active_lemmas = +d.SPACER_num_active_lemmas;\n            d.SPACER_num_cant_abstract = +d.SPACER_num_cant_abstract;\n            d.SPACER_num_ctp_blocked = +d.SPACER_num_ctp_blocked;\n            d.SPACER_num_dim_reduction_success = +d.SPACER_num_dim_reduction_success;\n            d.SPACER_num_invariants = +d.SPACER_num_invariants;\n            d.SPACER_num_is_invariant = +d.SPACER_num_is_invariant;\n            d.SPACER_num_lemma_jumped = +d.SPACER_num_lemma_jumped;\n            d.SPACER_num_lemmas = +d.SPACER_num_lemmas;\n            d.SPACER_num_mbp_failed = +d.SPACER_num_mbp_failed;\n            d.SPACER_num_merge_gen = +d.SPACER_num_merge_gen;\n            d.SPACER_num_merge_gen_failed = +d.SPACER_num_merge_gen_failed;\n            d.SPACER_num_merge_gen_success = +d.SPACER_num_merge_gen_success;\n            d.SPACER_num_no_over_approximate = +d.SPACER_num_no_over_approximate;\n            d.SPACER_num_non_lin = +d.SPACER_num_non_lin;\n            d.SPACER_num_pobs = +d.SPACER_num_pobs;\n            d.SPACER_num_propagations = +d.SPACER_num_propagations;\n            d.SPACER_num_queries = +d.SPACER_num_queries;\n            d.SPACER_num_reach_queries = +d.SPACER_num_reach_queries;\n            d.SPACER_num_refinements = +d.SPACER_num_refinements;\n            d.SPACER_num_reuse_reach_facts = +d.SPACER_num_reuse_reach_facts;\n            d.SPACER_num_sync_cvx_cls = +d.SPACER_num_sync_cvx_cls;\n            d.SPACER_num_under_approximations = +d.SPACER_num_under_approximations;\n            d.SPACER_pob_out_of_gas = +d.SPACER_pob_out_of_gas;\n            d.SPACER_wide_attmpts = +d.SPACER_wide_attmpts;\n            d.SPACER_wide_success = +d.SPACER_wide_success;\n            d.max_memory = +d.max_memory;\n            d.memory = +d.memory;\n            d.time = +d.time;\n            d.time_iuc_solver_get_iuc = +d.time_iuc_solver_get_iuc;\n            d.time_iuc_solver_get_iuc_hyp_reduce1 = +d.time_iuc_solver_get_iuc_hyp_reduce1;\n            d.time_iuc_solver_get_iuc_hyp_reduce2 = +d.time_iuc_solver_get_iuc_hyp_reduce2;\n            d.time_iuc_solver_get_iuc_learn_core = +d.time_iuc_solver_get_iuc_learn_core;\n            d.time_pool_solver_proof = +d.time_pool_solver_proof;\n            d.time_pool_solver_smt_total = +d.time_pool_solver_smt_total;\n            d.time_pool_solver_smt_total_sat = +d.time_pool_solver_smt_total_sat;\n            d.time_pool_solver_smt_total_undef = +d.time_pool_solver_smt_total_undef;\n            d.time_spacer_ctp = +d.time_spacer_ctp;\n            d.time_spacer_init_rules = +d.time_spacer_init_rules;\n            d.time_spacer_init_rules_pt_init = +d.time_spacer_init_rules_pt_init;\n            d.time_spacer_mbp = +d.time_spacer_mbp;\n            d.time_spacer_solve = +d.time_spacer_solve;\n            d.time_spacer_solve_propagate = +d.time_spacer_solve_propagate;\n            d.time_spacer_solve_pt_must_reachable = +d.time_spacer_solve_pt_must_reachable;\n            d.time_spacer_solve_reach = +d.time_spacer_solve_reach;\n            d.time_spacer_solve_reach_children = +d.time_spacer_solve_reach_children;\n            d.time_spacer_solve_reach_cluster = +d.time_spacer_solve_reach_cluster;\n            d.time_spacer_solve_reach_gen_bool_ind = +d.time_spacer_solve_reach_gen_bool_ind;\n            d.time_spacer_solve_reach_gen_merge = +d.time_spacer_solve_reach_gen_merge;\n            d.time_spacer_solve_reach_gen_merge_cvx_cls = +d.time_spacer_solve_reach_gen_merge_cvx_cls;\n            d.time_spacer_solve_reach_gen_wide = +d.time_spacer_solve_reach_gen_wide;\n            d.time_spacer_solve_reach_is_reach = +d.time_spacer_solve_reach_is_reach;\n            return d;\n        });\n        this.setState({\n            data: parsedData\n        })\n        \n    }\n    \n    handleSidebarClick(e:React.MouseEvent<HTMLLIElement>) {\n        let event = e.target as HTMLElement;\n        this.setState({\n            selectedBenchmark: event.innerText\n        });\n    }\n    \n    handleSidebarClickDot(e: resultItem){\n        this.setState({\n            selectedBenchmark: e.index\n        });\n    }\n    \n    handleHomeClick() {\n        this.setState({\n            selectedBenchmark: \"\",\n            customMode: false,\n            customData: {\n                depth: [],\n                time: [],\n                memory: [],\n                result: []\n            },\n            zoomMode: \"\", \n            graphMin: 0,\n            graphMax: 30\n        });\n    }\n    \n    handleClearClick() {\n        this.setState({\n            customData: {\n                depth: [],\n                time: [],\n                memory: [],\n                result: []\n            }\n        });\n    }\n    \n    moveGraphLeft() {\n        if (this.state.graphMin > 0){\n            this.setState({\n                graphMin: this.state.graphMin - 1,\n                graphMax: this.state.graphMax - 1\n            });\n        }\n    }\n    \n    moveGraphRight() {\n        if (this.state.graphMax < this.state.data.length - 1 ){\n            this.setState({\n                graphMin: this.state.graphMin + 1,\n                graphMax: this.state.graphMax + 1\n            });\n        }\n    }\n    \n    moveGraphUp() {\n        if (this.state.graphMin - 10 >= 0 ){\n            this.setState({\n                graphMin: this.state.graphMin - 10,\n                graphMax: this.state.graphMax - 10\n            });\n        }\n    }\n\n    moveGraphDown() {\n        if (this.state.graphMax + 10 < this.state.data.length){\n            this.setState({\n                graphMin: this.state.graphMin + 10,\n                graphMax: this.state.graphMax + 10\n            });\n        }\n    }\n\n    handleGraphTranslationClick(e:React.MouseEvent) {\n        e.preventDefault();\n        let clickEvent = e.target as HTMLImageElement;\n        if (clickEvent.alt === \"left-arrow\"){\n            this.moveGraphLeft();\n        }\n        else if (clickEvent.alt === \"right-arrow\"){\n            this.moveGraphRight();\n        }\n    }\n    \n    handleGraphTranslationKeyboard(e:KeyboardEvent) {\n        e.preventDefault();\n        if  (e.key === \"ArrowLeft\"){\n            this.moveGraphLeft();\n        }\n        else if (e.key === \"ArrowRight\") {\n            this.moveGraphRight();\n        }\n        else if (e.key === \"ArrowDown\") {\n            this.moveGraphDown();\n        }\n        else if (e.key === \"ArrowUp\") {\n            this.moveGraphUp();\n        }\n        \n    }\n    \n    handleCustomClick() {\n        this.setState({\n            customMode: !this.state.customMode\n        });\n        if (this.state.customMode){\n            this.setState({\n                customData: {\n                    depth: [],\n                    time: [],\n                    memory: [],\n                    result: []\n                }\n            });\n        }\n    }\n\n    filterDictionary(keys, custom:boolean=false, index:string=\"\"){\n        let data = this.state.data.slice(this.state.graphMin, this.state.graphMax);\n        if (custom) {\n            data = this.state.data.filter(function(d) {return d.index === index})\n        }\n        let result:Object[] = [];\n        for (let i = 0; i < data.length; i++){\n            result.push({});\n            for (let j = 0; j < keys.length; j ++){\n                result[i][keys[j]] = data[i][keys[j]];\n            }\n        }\n        return result;\n    }\n    \n    addToCustomData(e: React.MouseEvent) {\n        let event = e.target as HTMLLIElement;\n        for (let i = 0; i < this.overviewMetrics.length; i++){\n            let metric = this.overviewMetrics[i];\n            let metricDataKeys = [metric].concat([\"index\"]);\n            if (metric === \"result\") {\n                metricDataKeys.push(\"SPACER_num_invariants\");\n            }\n            let totalData = this.state.customData[metric].concat(this.filterDictionary(metricDataKeys, true, event.innerHTML));\n            \n            if (totalData.length > (this.state.graphMax - this.state.graphMin)){\n                totalData.splice(0,1);\n            }\n            let customDataCopy = this.state.customData;\n            customDataCopy[metric] = totalData;\n            this.setState({\n                customData: customDataCopy\n            });\n        }\n    }\n    \n    setZoomView(type: string) {\n        this.setState({\n            zoomMode: type, \n            graphMin: 0,\n            graphMax: 49\n        });\n    }\n    \n    render() {\n        let benchmarks = d3.map(this.state.data, function(d) {return d.index;}).keys();\n        let selectedBenchmark = this.state.selectedBenchmark;\n        let timeZoomData;\n        if (this.state.zoomMode === \"time\") {\n            let timeKeys = Object.keys(this.state.data[0]).filter(x => x.includes(\"time\"));\n            timeKeys.push(\"index\");\n            timeZoomData = this.filterDictionary(timeKeys);\n        }\n        return (\n          <div className=\"page\">\n                  <div className=\"sidebar\" id=\"sidebar\">\n                  {benchmarks.map((name, key ) => {\n                      if (this.state.customMode){\n                          if (this.state.customData.depth.filter(d => d.index === name).length > 0){\n                              return (<li className=\"selected\" key={key} onClick={this.addToCustomData.bind(this)}>{name}</li>);\n                          }\n                          return (<li key={key} onClick={this.addToCustomData.bind(this)}>{name}</li>);\n                      }\n                      else if (selectedBenchmark) {\n                          if (name === selectedBenchmark) {\n                              return (<li className=\"selected\" key={key}\n                                          onClick={this.handleSidebarClick.bind(this)}>{name}</li>);\n                          }\n                          return (<li key={key} onClick={this.handleSidebarClick.bind(this)}>{name}</li>);\n                          \n                      }\n                      else {\n                          if (key >= this.state.graphMin && key < this.state.graphMax) {\n                              return (<li className=\"selected\" key={key}\n                                          onClick={this.handleSidebarClick.bind(this)}>{name}</li>);\n                          }\n                          return (<li key={key} onClick={this.handleSidebarClick.bind(this)}>{name}</li>);\n                      }\n                  })}\n              </div>\n              <div className=\"visual\">\n                  {this.state.selectedBenchmark !== \"\" &&\n                  <IndividualBenchmark \n                      data={this.state.data.filter(function(d) {return d.index === selectedBenchmark})[0]}\n                  />}\n                  {this.state.selectedBenchmark === \"\" && this.state.zoomMode === \"\" &&\n                  <div className=\"dashboard\">\n                      {this.overviewMetrics.map((type, key) => {\n                          let data;\n                          if (this.state.customMode) {\n                              data = this.state.customData[type];\n                              if (type === \"result\"){\n                                  return (\n                                      <ResultsOverview\n                                          key={key}\n                                          data={data}\n                                          config={this.state.dashboardConfig}\n                                          selectBenchmark={this.handleSidebarClickDot.bind(this)}\n                                      />\n                                  );\n                                  \n                              }\n                          }\n                          else if (type === \"result\"){\n                              data = this.filterDictionary([type].concat([\"index\", \"SPACER_num_invariants\"]));\n                              return (\n                                  <ResultsOverview\n                                      key={key}\n                                      data={data}\n                                      config={this.state.dashboardConfig}\n                                      selectBenchmark={this.handleSidebarClickDot.bind(this)}\n                                  />\n                              );\n                          }\n                          else {\n                              data = this.filterDictionary([\"index\"].concat([type]));\n                          }\n                          return (\n                              <GeneralGraphOverview\n                                  key={key}\n                                  data={data}\n                                  config={this.state.dashboardConfig}\n                                  className={type + \"-overview\"}\n                                  classText={type + \"-text\"}\n                                  yValue={type}\n                                  updateZoomView={this.setZoomView.bind(this, type === \"time\" ? \"time\" : \"\")}\n                              />\n                          );\n                      })}\n                      <img className=\"left-arrow\" src={arrow} alt=\"left-arrow\" onClick={this.handleGraphTranslationClick.bind(this)}/>\n                      <img className=\"right-arrow\" src={arrow} alt=\"right-arrow\" onClick={this.handleGraphTranslationClick.bind(this)}/>\n                  </div>}\n                  {this.state.zoomMode === \"time\" &&\n                  <TimeZoom\n                      data={timeZoomData}\n                      \n                  />}\n              </div>\n              \n              <button className=\"home-button\" onClick={this.handleHomeClick.bind(this)}>Home</button>\n              <button className=\"custom-button\" onClick={this.handleCustomClick.bind(this)}>Custom</button>\n              {this.state.customMode && <button className=\"clear-button\" onClick={this.handleClearClick.bind(this)}>Clear</button>}\n          </div>  \n        );\n    }\n}\n\nexport default Dashboard;\n","import * as React from 'react';\n\ntype Props = {\n    rawData: {name: string, id: string, content: string}[],\n    updateData: (newValue: {name:string, id:string, content:string}) => void\n}\n\ntype State = {\n    rawData: [],\n    file: File | null\n}\n\nclass DashboardLanding extends React.Component<Props, State> {\n    private fileReader: FileReader | undefined;\n    constructor(props) {\n        super(props);\n        this.state = {\n            rawData: [],\n            file: null\n        }\n    }\n    \n    handleFileRead(file: File) {\n        const content = this.fileReader!.result!.toString();\n        let returnObject = {\n            name: file.name,\n            id: Date.now().toString(),\n            content: content!\n        };\n        \n        this.props.updateData(returnObject);\n    }\n    \n    handleFileChosen(e: React.MouseEvent<HTMLButtonElement>) {\n        e.preventDefault();\n        let file = this.state.file;\n        this.fileReader = new FileReader();\n        this.fileReader.onloadend = this.handleFileRead.bind(this, file!);\n        this.fileReader.readAsText(file!);\n    }\n    \n    updateFile(e: React.ChangeEvent<HTMLInputElement>) {\n        this.setState({\n            file: e.target.files![0]\n        });\n    }\n    \n    render() {\n        return (\n            <div className=\"dashboard-menu\">\n                <h1>Spacer Dashboard</h1>\n                <form>\n                <input type=\"file\" accept=\".csv\" onChange={this.updateFile.bind(this)}/>\n                <button type=\"submit\" className=\"fake-button\" onClick={this.handleFileChosen.bind(this)}>Upload</button>\n                </form>\n                <div className=\"file-list\">\n                    <h2>Uploaded Files</h2>\n                    {this.props.rawData.length > 0 && this.props.rawData.map((dataItem, key) => (\n                        <li key={key}>\n                            <span>{dataItem.name}</span><a href={\"#/dashboard/\" + dataItem.id}>Analysis</a>\n                        </li>\n                    ))}\n                </div>\n            </div>\n        );\n    }\n}\n\nexport default DashboardLanding;\n","import * as React from 'react';\n\ntype Props = {\n    onApply: (action: string, params: {})=>void,\n}\n\ntype State = {\n    source: string,\n    target: string,\n    regex: boolean\n}\n\n\nclass ReplaceDialog extends React.Component<Props, State> {\n    state = {\n        source: \"\",\n        target: \"\",\n        regex: false,\n    };\n\n\n\n    render() {\n        console.log(this.props, this.state)\n        return (\n            <div>\n                {`Replace: `}<input type=\"text\" defaultValue=\"\"onChange={(e)=> {this.setState({source: e.target.value})}} />\n                {` with: `}<input type=\"text\" defaultValue=\"\"onChange={(e)=> {this.setState({target: e.target.value})}}/>\n                {`\\tRegex?`}\n                <input type=\"checkbox\"\n                       defaultChecked={false}\n                       onChange={(e)=> {this.setState({regex: e.target.checked})} }\n                />\n                <button onClick={this.props.onApply.bind(this, \"replace\",\n                                                         {\"source\": this.state.source,\n                                                          \"target\": this.state.target,\n                                                          \"regex\": this.state.regex\n                })}>Replace</button>\n                </div>\n        );\n    }\n\n\n}\n\nexport default ReplaceDialog;\n","import * as React from 'react';\nimport { AST, ASTTransformer, Transformer} from \"./../helpers/transformers\";\nimport { assert } from '../model/util';\nimport { DataSet, Network, Node, Edge } from 'vis'\nimport ReplaceDialog from './ReplaceDialog'\ntype Props = {\n    input: string,\n    onBlast: (tStack: Transformer[])=>void;\n}\n\ntype State = {\n    optionTypeHTML: JSX.Element,\n    optionValue: string,\n    optionName: string,\n    optionType: string,\n    allOptions: {type:string, name: string, value:string}[],\n    showOptions: boolean,\n    selectedNodeID: number,\n    stringRep: string,\n    status: string\n}\n\nclass TreeEditor extends React.Component<Props, State> {\n    state = {\n        optionTypeHTML: <div />,\n        optionType: \"\",\n        optionValue: \"\",\n        optionName: \"\",\n        allOptions: [],\n        showOptions: true,\n        selectedNodeID: -1,\n        stringRep: \"\",\n        status: \"\"\n    }\n    network: Network | null = null;\n    networkNodes = new DataSet<Node>([]);\n    networkEdges = new DataSet<Edge>([]);\n    graphContainer = React.createRef<HTMLDivElement>();\n    astStack = new Array<AST>();\n    transformerStack = new Array<Transformer>();\n    transformer = new ASTTransformer();\n    componentDidMount() {\n        this.generateNetwork();\n        this.network!.fit();\n    }\n\n    redrawAST(){\n        if(this.astStack[this.astStack.length-1] != null){\n            let ast = this.astStack[this.astStack.length-1];\n            console.log(ast);\n            console.log(\"visNodes\", ast.visNodes);\n            console.log(\"visEdges\", ast.visEdges);\n\n            this.networkEdges.clear();\n            this.networkEdges.add(ast.visEdges);\n            this.networkNodes.clear();\n            this.networkNodes.add(ast.visNodes);\n            /* this.network!.fit(); */\n            this.network!.redraw();\n            console.log(ast.toHTML(this.state.selectedNodeID, ast.nodeList[0]));\n            this.setState({stringRep: ast.toHTML(this.state.selectedNodeID, ast.nodeList[0])});\n        }\n    }\n\n\n\n    componentDidUpdate(prevProps: Props){\n        if(prevProps.input !== this.props.input){\n            //new formula. clear everything\n            this.astStack = [new AST(this.props.input)];\n            this.transformerStack = [];\n            this.redrawAST();\n        }\n    }\n\n    generateNetwork() {\n        console.log(\"I am Graph. I receive:\", this.props)\n        assert(this.graphContainer.current);\n        assert(!this.network); // should only be called once\n        this.network = new Network(this.graphContainer.current!, {\n            nodes: this.networkNodes,\n            edges: this.networkEdges\n        }, {\n            physics: false,\n            interaction: {\n                multiselect: false\n            },layout: {\n                hierarchical: {\n                    /* direction: 'UD', */\n                    sortMethod: 'directed',\n                },\n            }\n\n        });\n\n        this.network.on('click', async (clickEvent) => {\n            if (clickEvent.nodes.length > 0) {\n                assert(clickEvent.nodes.length === 1);\n                const clickedNodeId = clickEvent.nodes[0];\n                console.log(\"clickEvent.nodes\", clickEvent.nodes);\n                this.setState({selectedNodeID: clickedNodeId})\n            } else {\n            }\n        });\n        \n    }\n\n    updateConditionInputEvent(evt: React.ChangeEvent<HTMLInputElement>, idx: number){\n        this.transformerStack[idx].condition = evt.target.value;\n    }\n    updateParamsInputEvent(evt: React.ChangeEvent<HTMLInputElement>, idx: number){\n        this.transformerStack[idx].params = JSON.parse(evt.target.value);\n    }\n\n    displayTransformers() {\n        const listItems = this.transformerStack.map((t, index) =>{\n            return (\n                <div  key={index} className=\"transformer-wrapper\">\n                    {`If `}\n                    <input style={{display: \"inline-block\", width: \"20rem\"}}\n                           ref=\"condition-${index}\"\n                           type=\"text\"\n                           defaultValue={t.condition}\n                           onChange={evt => this.updateConditionInputEvent(evt, index)}/>\n                    <br/>\n                    {`then run __${t.action}__ with params:`}\n                    <br/>\n                    <input ref=\"params-${index}\" type=\"text\" defaultValue={JSON.stringify(t.params)}\n                           style={{width: \"100%\"}}\n                           onChange={evt => this.updateParamsInputEvent(evt, index)}/>\n                </div>);\n        });\n\n        return listItems;\n    }\n\n    applyStack(){\n        const original_ast = new AST(this.props.input);\n\n        try{\n            this.astStack.push(this.transformer.runStack(original_ast, this.transformerStack));\n            this.transformerStack.push({\"action\": \"runStack\", \"params\": \"\", \"condition\": \"\"});\n            this.redrawAST();\n        }catch(error){\n            this.setState({\"status\": \"Error:\"+error.message});\n        }\n    }\n\n    applyLocal(action: string, params: {}){\n        const currentAST = this.astStack[this.astStack.length - 1];\n        const node = currentAST.nodeList[this.state.selectedNodeID];\n        console.log(params)\n        let t = {\"action\": action, \"params\": params, \"condition\": \"true\"};\n        try{\n            let [dirty, new_ast] = this.transformer.run(node, currentAST, t);\n            if(dirty){\n                this.astStack.push(new_ast);\n                //guess the condition\n                t.condition = this.transformer.getCondition(action, node, currentAST);\n                this.transformerStack.push(t);\n                this.redrawAST();\n            }\n        }catch(error){\n            this.setState({\"status\": \"Error:\"+error.message});\n        }\n    }\n    undo(){\n        if(this.astStack.length>1){\n            this.astStack.pop();\n            this.transformerStack.pop();\n            this.redrawAST();\n        }\n    }\n\n    \n    render() {\n        let tStack = this.displayTransformers();\n        return (\n            <div className=\"tree-editor\">\n                <div className=\"editor-options-card\" id=\"graph-container\">\n                    <h3>Transformer Queue</h3>\n                    <h4>{this.state.status}</h4>\n                    <ul>\n                        <button onClick={this.applyLocal.bind(this, \"flipCmp\", {})}>Flip Cmp</button>\n                        <button onClick={this.applyLocal.bind(this, \"toImp\", {})}>To Imp</button>\n                        <button onClick={this.applyLocal.bind(this, \"move\", {\"direction\": \"l\"})}>Move Left</button>\n                        <button onClick={this.applyLocal.bind(this, \"move\", {\"direction\": \"r\"})}>Move Right</button>\n                        <button onClick={this.applyLocal.bind(this, \"changeBreak\", {})}>\\n?</button>\n                        <button onClick={this.applyLocal.bind(this, \"changeBracket\", {})}>()?</button>\n                        <button onClick={this.applyLocal.bind(this, \"squashNegation\", {})}>Collapse Negation</button>\n                        <br/>\n                        <ReplaceDialog\n                            onApply = {this.applyLocal.bind(this)}\n                        />\n                        <br/>\n\n                        <button onClick={this.undo.bind(this)}>Undo</button>\n                    </ul>\n                    <pre><div dangerouslySetInnerHTML={{ __html: this.state.stringRep }} /></pre>\n                    <div className= \"editor-component-graph\" ref = { this.graphContainer }>\n                        <canvas/>\n                    </div>\n                </div>\n                <div className=\"editor-options-card\" id=\"transformer-container\">\n                    <h3>Transformer Queue</h3>\n                    <pre>{`\nCondition examples:\n    - apply the transformation for all the node whose token pass the regex test \"ab+c\"\n    /ab+c/.test(node.token)\n    - // apply the transformation for all the node whose token is either x, y, or z\n    [\"x_\", \"y_\", \"z_\"].includes(node.token)\n    - // apply the transformation for all the node at depth 2\n    ast.nodeDepth(node) === 2\n                        `}</pre>\n                    {tStack}\n                    <button onClick={this.applyStack.bind(this)}>Apply for the current AST</button>\n                    <button onClick={this.props.onBlast.bind(this, this.transformerStack)}>Blast</button>\n                </div>\n            </div>\n        );\n    }\n}\n\nexport default TreeEditor;\n","import * as React from 'react';\nimport '../styles/Editor.css';\nimport * as Monaco from 'monaco-editor'\nimport TreeEditor from \"./TreeEditor\";\nimport { AST, ASTTransformer, Transformer} from \"./../helpers/transformers\";\nconst icons = require('../resources/icons/all.svg') as string;\n\ntype Props = {\n    input: string\n}\n\ntype State = {\n    input: string,\n    output: string\n}\n\n\nexport class Editor extends React.Component<Props, State> {\n    // private isChromeOrFirefox = navigator.userAgent.indexOf('Chrome') > -1 || navigator.userAgent.indexOf('Firefox') > -1;\n    private isChromeOrFirefox = true;\n    private fileUpload = React.createRef<HTMLInputElement>();\n    monacoDiv = React.createRef<HTMLDivElement>();\n    monaco: Monaco.editor.IStandaloneCodeEditor | null = null\n\n    state: State = {\n        input: \"()\",\n        output: \"\"\n    };\n\n\n    componentDidMount() {\n        if (!this.isChromeOrFirefox) {\n            return;\n        }\n\n        // generate instance of Monaco Editor\n        this.monaco = Monaco.editor.create(this.monacoDiv.current!, {\n            lineNumbers: 'off',\n            roundedSelection: false,\n            scrollBeyondLastLine: false,\n            scrollBeyondLastColumn: 0,\n            minimap: {\n                enabled: false\n            },\n            renderLineHighlight: 'none',\n            hideCursorInOverviewRuler: true,\n            links: false,\n            overviewRulerBorder: false,\n            automaticLayout: false,\n            lineDecorationsWidth: 0,\n            lineNumbersMinChars: 0,\n            wordWrap: 'wordWrapColumn'\n            // fontFamily: \"Monaco\" TODO: decide which font to use. By default, multiple fonts are loaded, which is quite slow\n        });\n\n        /* this.monaco.setValue(this.props.problem);\n         * this.monaco.getModel()!.onDidChangeContent(() => {\n         *     console.log(this.monaco!.getModel()!.getValue());\n         *     this.props.onChangeProblem(this.monaco!.getModel()!.getValue());\n         * }); */\n    }\n\n    openEditor(){\n        console.log(\"click Apply\")\n\n        let input = this.monaco!.getModel()!.getValueInRange(this.monaco!.getSelection()!);\n        console.log(input)\n        /* getValue()!; */\n\n        this.setState({\n            input: input\n        });\n    }\n\n    getFormulas(input: string): string[]{\n        return input.split(/\\n\\s*\\n/);\n    }\n\n    blast(tStack: Transformer[]){\n        let all_formulas = this.getFormulas(this.monaco?.getModel()!.getValue()!);\n        let transformer = new ASTTransformer();\n\n\n        console.log(all_formulas);\n        console.log(tStack);\n        console.log(\"pew pew !\");\n\n        let output=\"\"\n        for(var f of all_formulas){\n            let ast = new AST(f);\n            let new_ast = transformer.runStack(ast, tStack);\n            let new_f = new_ast.toString(-1, new_ast.nodeList[0]);\n            output+=new_f+\"\\n\\n\";\n        }\n        this.setState({output: output});\n    }\n\n    render() {\n        if (!this.isChromeOrFirefox) {\n            return (\n                <section className=\"unsupported-message\">\n                    <svg viewBox=\"0 0 24 24\" className=\"icon\">\n                        <use xlinkHref={`${icons}#alert-triangle`}/>\n                    </svg>\n                    <span>Your current browser is not supported. Please use Chrome or Firefox!</span>\n                </section>\n            );\n        }\n\n        return (\n            <section className=\"component-menu\">\n                <h1>Transformer Editor</h1>\n\n                <section className=\"editor\">\n                    <div id=\"editor-wrapper\">\n                        <h2>Original</h2>\n                        <div ref={this.monacoDiv} className=\"monaco\" id=\"input\"></div>\n                        <button onClick={this.openEditor.bind(this)}>Open Editor</button>\n                        <h2>Transformed</h2>\n                        <textarea ref=\"output\" id=\"output\" rows={30} value={this.state.output} readOnly></textarea>\n                        \n                    </div>\n                    {/* <TransformerTable/> */}\n                    <TreeEditor\n                        input = {this.state.input}\n                        onBlast = {this.blast.bind(this)}\n                    />\n                </section>\n\n            </section>\n        );\n    }\n\n    chooseFile() {\n        if (this.fileUpload.current) {\n            this.fileUpload.current.click();\n        }\n    }\n\n}\n\n","import * as React from 'react';\nimport { HashRouter, Route} from \"react-router-dom\";\nimport { AppWrapper } from './AppWrapper'\nimport { Menu } from './Menu';\nimport { RouteComponentProps } from 'react-router';\nimport Dashboard from \"./Dashboard\";\nimport DashboardLanding from \"./DashboardLanding\";\nimport { Editor } from \"./Editor\";\ntype State = {\n    problem: string,\n    problemName: string,\n    spacerUserOptions: string,\n    hideBracketsAssoc: boolean,\n    nonStrictForNegatedStrictInequalities: boolean,\n    orientClauses: boolean\n    varNames: string\n    rawData: {name: string, id: string, content: string}[]\n}\n\nexport class AppRouter extends React.Component<{} & RouteComponentProps<{}>, State> {\n\n    state: State = {\n        problem: \"\",\n        problemName: \"\",\n        spacerUserOptions: \"\",\n        hideBracketsAssoc: true,\n        nonStrictForNegatedStrictInequalities: true,\n        orientClauses: true,\n        varNames: \"\",\n        rawData: []\n    };\n\n    render() {\n        return (\n            <HashRouter>\n                <Route path=\"/\" exact render={() => \n                    <Menu \n                        problem={this.state.problem}\n                                problemName={this.state.problemName}\n                                spacerUserOptions={this.state.spacerUserOptions}\n                                hideBracketsAssoc={this.state.hideBracketsAssoc}\n                                nonStrictForNegatedStrictInequalities={this.state.nonStrictForNegatedStrictInequalities}\n                                orientClauses={this.state.orientClauses}\n                                onChangeProblem={this.changeProblem.bind(this)}\n                                onChangeProblemName={this.changeProblemName.bind(this)}\n                                onChangeSpacerUserOptions={this.changeSpacerUserOptions.bind(this)}\n                                onChangeHideBracketsAssoc={this.changeHideBracketsAssoc.bind(this)}\n                                onChangeNonStrictForNegatedStrictInequalities={this.changeNonStrictForNegatedStrictInequalities.bind(this)}\n                                onChangeOrientClauses={this.changeOrientClauses.bind(this)}\n                                onChangeVariables={this.changeVariables.bind(this)}\n                    />\n                }/>\n                <Route path=\"/replay/:exp_id\" render={({match}) => \n                    this.appComponent(\"replay\", match.params.exp_id)\n                }/>\n                <Route path=\"/iterative/\" render={() => \n                    this.appComponent(\"iterative\", \"\")\n                }/>\n                <Route exact path=\"/dashboard/\" render={() =>\n                    <DashboardLanding \n                        rawData={this.state.rawData}\n                        updateData={this.changeRawData.bind(this)}\n                    />\n                }/>\n                <Route path=\"/dashboard/:fileId\" render={({match}) => \n                    this.displayVisualization(match.params.fileId)\n                }/>\n                <Route exact path=\"/editor/\" render={() =>\n                    <Editor\n                    input=\"\"\n                    />\n                }/>\n            </HashRouter>\n        );\n    }\n\n    appComponent(mode: \"replay\" | \"iterative\", exp_path: string) {\n        const spacerUserOptions = `${this.state.spacerUserOptions}`;\n        return <AppWrapper\n        name={this.state.problemName}\n        exp_path ={exp_path}\n        mode={mode}\n        problem={this.state.problem!}\n        spacerUserOptions={spacerUserOptions}\n        hideBracketsAssoc={this.state.hideBracketsAssoc}\n        nonStrictForNegatedStrictInequalities={this.state.nonStrictForNegatedStrictInequalities}\n        orientClauses={this.state.orientClauses}\n        varNames={this.state.varNames}\n        />\n    }\n    \n    displayVisualization(fileId: string) {\n        let rawData = this.state.rawData.filter(x => x.id === fileId)[0];\n        if (rawData) {\n            return (\n                <Dashboard\n                    rawData={rawData.content}\n                />\n            );\n        }\n    }\n\n    changeProblem(problem: string) {\n        this.setState({problem: problem});\n    }\n    changeProblemName(problemName: string) {\n        this.setState({problemName: problemName});\n    }\n    changeSpacerUserOptions(spacerUserOptions: string) {\n        this.setState({spacerUserOptions: spacerUserOptions});\n    }\n    changeHideBracketsAssoc(newValue: boolean) {\n        this.setState({hideBracketsAssoc: newValue});\n    }\n    changeNonStrictForNegatedStrictInequalities(newValue: boolean) {\n        this.setState({nonStrictForNegatedStrictInequalities: newValue});\n    }\n    changeOrientClauses(newValue: boolean) {\n        this.setState({orientClauses: newValue});\n    }\n    changeVariables(newValue: string){\n        this.setState({\n            varNames: newValue\n        });\n    }\n    \n    changeRawData(newValue: {name:string, id:string, content:string}){\n        let currentList = this.state.rawData;\n        let newList = currentList.concat([newValue]);\n        this.setState({\n            rawData: newList\n        });\n    }\n}\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.1/8 is considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl)\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready.then(registration => {\n      registration.unregister();\n    });\n  }\n}\n","import * as React from 'react';\nimport * as ReactDOM from 'react-dom';\nimport './index.css';\nimport { AppRouter } from './components/Router';\nimport * as serviceWorker from './serviceWorker';\n\nReactDOM.render(\n  <AppRouter/>,\n  document.getElementById('root')\n);\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.unregister();\n","import {parse} from \"s-exify\";\nimport { Node, Edge } from 'vis'\nimport { assert } from \"../model/util\";\nconst _ = require(\"lodash\");\n\nexport class ASTNode{\n    nodeID: number;\n    token: string;\n    shouldBreak: number;\n    shouldInBracket: number;\n    parentID: number;\n    children: number[];\n    transformers = [];\n    constructor(nodeID: number, token: string, parentID: number, children: number[]){\n        this.nodeID = nodeID;\n        this.token = token;\n        this.shouldBreak = 0;\n        this.shouldInBracket = 1;\n        this.parentID = parentID;\n        this.children = children;\n    }\n\n}\n\nfunction isOpt(lst){\n    const optList = [\"+\", \"-\", \"*\", \"/\",\n                     \">\", \"<\", \">=\", \"<=\", \"=\",\n                     \"and\", \"or\", \"not\", \"=>\",\n                     \"assert\",\n                     \"declare-datatypes\",\n                     \"forall\", \"exists\", \"define\",\n                     \"select\", \"store\"]\n    if(typeof lst !== \"string\"){\n        return false;\n    }\n    return optList.indexOf(lst)>-1;\n}\n\nexport interface Transformer{\n    action: string;\n    condition: string;\n    params: {};\n}\n\nexport class ASTTransformer{\n    run(node: ASTNode, ast: AST, t: Transformer): [boolean, AST]{\n        if(t.action!==\"runStack\"){\n            return this[t.action](node, ast, t.params, t.condition);\n        }\n        return [false, ast];\n    }\n\n    runStack(ast: AST, tStack: Transformer[]): AST{\n        let new_ast = _.cloneDeep(ast);\n        console.log(\"tStack\", tStack);\n        //loop over all transformer\n        let t_index = 0;\n        while(t_index < tStack.length){\n            console.log(tStack[t_index]);\n            //apply the transformer to all the node if possible.\n            let dirty = true;\n\n            for(var node of new_ast.nodeList){\n                [dirty, new_ast] = this.run(node, new_ast, tStack[t_index]);\n                if(dirty){\n                    break;\n                }\n            }\n            //only move to the next transformer if reach fixpoint (dirty = false)\n            if(!dirty){\n                t_index++;\n            }\n        }\n        return new_ast;\n    }\n\n    getCondition(action: string, node: ASTNode, ast: AST): string{\n        let condition = \"true\";\n        switch(action){\n            case \"move\":{\n                const current_token = node.token;\n                condition = `node.token === ${current_token}`;\n                break;\n            }\n            case \"changeBreak\":{\n                const current_break = node.shouldBreak;\n                const node_depth = ast.nodeDepth(node);\n                condition = `ast.nodeDepth(node) === ${node_depth} && node.shouldBreak === ${current_break}`;\n                break;\n            }\n            case \"changeBracket\":{\n                const current_in_bracket = node.shouldInBracket ;\n                const node_depth = ast.nodeDepth(node);\n                condition = `ast.nodeDepth(node) === ${node_depth} && node.shouldInBracket === ${current_in_bracket}`;\n                break;\n            }\n            case \"squashNegation\":{\n                condition = \"true\";\n                break;\n            }\n            case \"replace\":{\n                condition = \"true\";\n                break;\n            }\n            default:{\n                const current_token = node.token;\n                const node_depth = ast.nodeDepth(node);\n                condition = `node.token === \"${current_token}\" && ast.nodeDepth(node) === ${node_depth}`;\n                break;\n            }\n        }\n        return condition;\n    }\n\n\n    squashNegation(node: ASTNode, ast: AST, params: {}, condition: string ): [boolean, AST]{\n        /*\n          collapse a `not` and its children N into the negation\n        */\n        let cloned_ast = _.cloneDeep(ast);\n        let cloned_node = cloned_ast.nodeList[node.nodeID];\n        let dirty = false;\n\n        if(node.token!==\"not\"){\n            return [false, cloned_ast]\n        }\n\n        if(eval(condition)){\n            let cloned_child = cloned_ast.nodeList[cloned_node.children[0]];\n\n            switch(cloned_child.token){\n                case \"not\":{\n                    //point new node's parent to current parent\n                    let grandchild = cloned_ast.nodeList[cloned_child.children[0]];\n                    grandchild.parentID = cloned_node.parentID;\n\n                    //point parent's child to new_node\n                    let current_parent = cloned_ast.nodeList[cloned_node.parentID];\n                    let current_child_index = current_parent.children.indexOf(cloned_node.nodeID);\n                    current_parent.children[current_child_index] = grandchild.nodeID;\n\n                    //remove the 2 `not` nodes\n                    cloned_ast.deleteNode(cloned_node);\n                    cloned_ast.deleteNode(cloned_child);\n\n                    //rebuild vis\n                    cloned_ast.buildVis();\n\n                    dirty = true;\n                    break;\n                }\n\n                case \"<\":{\n                    //flip\n                    cloned_child.token = \">=\";\n                    //point to parent\n                    cloned_child.parentID = cloned_node.parentID;\n                    //point parent to grandchild\n                    let current_parent = cloned_ast.nodeList[cloned_node.parentID];\n                    let current_child_index = current_parent.children.indexOf(cloned_node.nodeID);\n                    current_parent.children[current_child_index] = cloned_child.nodeID;\n\n                    //remove the `not` node\n                    cloned_ast.deleteNode(cloned_node);\n                    //rebuild vis\n                    cloned_ast.buildVis();\n                    dirty = true;\n                    break;\n                }\n                case \">\":{\n                    //flip\n                    cloned_child.token = \"<=\";\n                    //point to parent\n                    cloned_child.parentID = cloned_node.parentID;\n                    //point parent to grandchild\n                    let current_parent = cloned_ast.nodeList[cloned_node.parentID];\n                    let current_child_index = current_parent.children.indexOf(cloned_node.nodeID);\n                    current_parent.children[current_child_index] = cloned_child.nodeID;\n\n                    //remove the `not` node\n                    cloned_ast.deleteNode(cloned_node);\n                    //rebuild vis\n                    cloned_ast.buildVis();\n                    dirty = true;\n                    break;\n                }\n\n                default:\n\n            }\n\n        }\n\n        return [dirty, cloned_ast]\n\n    }\n\n    move(node: ASTNode, ast: AST, params: {}, condition: string ): [boolean, AST]{\n        /*\n          move an AST node to the left or to the right\n          E.g: moveLeft(\"+ x y z\", \"z\") -> \"+ x z y\"\n         */\n        const movable = [\"+\", \"*\", \"=\", \"and\", \"or\"];\n        let cloned_ast = _.cloneDeep(ast);\n\n        let dirty = false;\n        if(eval(condition)){\n            let parent = cloned_ast.nodeList[node.parentID];\n            assert('direction' in params);\n            assert(movable.indexOf(parent.token)!==-1, \"The parent node doesnt support reordering.\");//only can move stuff under some opt\n            let siblings = parent.children;\n\n            const nodePosition = siblings.indexOf(node.nodeID);\n\n            switch(params[\"direction\"]){\n                case \"l\":{\n                    if(nodePosition>0){\n                        //ES6 magic\n                        [siblings[nodePosition], siblings[nodePosition-1]] = [siblings[nodePosition-1], siblings[nodePosition]];\n                        dirty = true;\n                    }\n                    break;\n                }\n                case \"r\":{\n                    if(nodePosition<siblings.length-1){\n                        //ES6 magic\n                        [siblings[nodePosition], siblings[nodePosition+1]] = [siblings[nodePosition+1], siblings[nodePosition]];\n                        dirty = true;\n                    }\n                    break;\n                }\n                default:\n                    break;\n            }\n            cloned_ast.buildVis();\n        }\n        return [dirty, cloned_ast];\n    }\n\n    flipCmp(node: ASTNode, ast: AST, params: {}, condition: string ): [boolean, AST]{\n        /*\n          flip a comparison node\n          E.g: flipCmp(\"> x y\") -> \"<= y x\"\n         */\n        let cloned_ast = _.cloneDeep(ast);\n        let dirty = false;\n        if(eval(condition)){\n            let new_node : ASTNode;\n            switch(node.token){\n                case \"=\":{\n                    new_node = new ASTNode(node.nodeID, \"=\", node.parentID, [node.children[1], node.children[0]]);\n                    dirty = true;\n                    break;\n                }\n                case \"<\":{\n                    new_node = new ASTNode(node.nodeID, \">=\", node.parentID, [node.children[1], node.children[0]]);\n                    dirty = true;\n                    break;\n                }\n                case \">\":{\n                    new_node = new ASTNode(node.nodeID, \"<=\", node.parentID, [node.children[1], node.children[0]]);\n                    dirty = true;\n                    break;\n                }\n                case \">=\":{\n                    new_node = new ASTNode(node.nodeID, \"<\", node.parentID, [node.children[1], node.children[0]]);\n                    dirty = true;\n                    break;\n                }\n                case \"<=\":{\n                    new_node = new ASTNode(node.nodeID, \">\", node.parentID, [node.children[1], node.children[0]]);\n                    dirty = true;\n                    break;\n                }\n                default:\n                    new_node = node;\n            }\n            cloned_ast.nodeList[node.nodeID] = new_node;\n            cloned_ast.buildVis();\n        }\n        return [dirty, cloned_ast];\n    }\n\n    toImp(node: ASTNode, ast: AST, params: {}, condition: string ): [boolean, AST]{\n        let cloned_ast = _.cloneDeep(ast);\n        let cloned_node = cloned_ast.nodeList[node.nodeID];\n        let dirty = false;\n        if(eval(condition)){\n            let parent = cloned_ast.nodeList[cloned_node.parentID];\n\n            if(!parent || parent.token!==\"or\"){\n                return [false, cloned_ast];\n            }\n\n\n            let newHead = new ASTNode(cloned_ast.nodeList.length, \"not\", parent.nodeID, [cloned_node.nodeID]);\n            cloned_node.parentID = newHead.nodeID;\n            cloned_ast.nodeList.push(newHead);\n\n            let newTail = new ASTNode(cloned_ast.nodeList.length, \"or\", parent.nodeID, []);\n            cloned_ast.nodeList.push(newTail);\n\n            for(var childID of parent.children){\n                if(childID !== cloned_node.nodeID){\n                    cloned_ast.nodeList[childID].parentID = newTail.nodeID;\n                    newTail.children.push(childID);\n                }\n            }\n\n            let newParent = new ASTNode(parent.nodeID, \"=>\", parent.parentID, [newHead.nodeID, newTail.nodeID]);\n            cloned_ast.nodeList[parent.nodeID] = newParent;\n\n            cloned_ast.buildVis();\n            dirty = true;\n        }\n        return [dirty, cloned_ast];\n    } \n\n    replace(node: ASTNode, ast: AST, params: {}, condition: string ): [boolean, AST]{\n        let cloned_ast = _.cloneDeep(ast);\n        let dirty = false;\n        let source = params[\"source\"]\n        if(eval(condition)){\n            if(params[\"regex\"]){\n                source = new RegExp(params[\"source\"])\n            }\n\n\n            for(var cloned_node of cloned_ast.nodeList){\n                let old_token = cloned_node.token\n                cloned_node.token = old_token.replace(source, params[\"target\"]);\n                if(cloned_node.token !== old_token){\n                    dirty = true;\n                }\n            }\n\n            if(dirty){\n                cloned_ast.buildVis();\n            }\n        }\n\n        return [dirty, cloned_ast];\n    }\n    changeBreak(node: ASTNode, ast: AST, params:{}, condition: string ): [boolean,AST]{\n        let cloned_ast = _.cloneDeep(ast);\n        if(eval(condition)){\n            cloned_ast.nodeList[node.nodeID].shouldBreak ^= 1;\n            cloned_ast.buildVis();\n            return [true, cloned_ast];\n        }\n        return [false, cloned_ast];\n    }\n    changeBracket(node: ASTNode, ast: AST, params:{}, condition: string ): [boolean, AST]{\n        let cloned_ast = _.cloneDeep(ast);\n        if(eval(condition)){\n            cloned_ast.nodeList[node.nodeID].shouldInBracket ^= 1;\n            cloned_ast.buildVis();\n            return [true, cloned_ast];\n        }\n        return [false, cloned_ast];\n    }\n}\n\n\nexport class AST {\n    nodeList = new Array<ASTNode>();\n    visNodes = new Array<Node>();\n    visEdges = new Array<Edge>();\n\n    null_node = new ASTNode(-100, \"null-node\", -100, []);\n    constructor(formula: string){\n        this.lstToAST(-1, parse(formula));\n        this.buildVis();\n    }\n\n    nodeDepth(node: ASTNode): number{\n        if (node.parentID===-1){\n            return 0;\n        }\n\n        return this.nodeDepth(this.nodeList[node.parentID])+1;\n    }\n\n    deleteNode(node: ASTNode): void{\n        this.nodeList[node.nodeID] = this.null_node;\n    }\n\n    lstToAST(parentID, lst): number{\n        const nodeID = this.nodeList.length\n        if(typeof lst === 'string'){\n            const node = new ASTNode(nodeID, lst, parentID, []);\n            this.nodeList.push(node);\n            return nodeID;\n        }\n\n        //if is an opt\n        if(isOpt(lst[0])){\n            let node = new ASTNode(nodeID, lst[0], parentID, []);\n            this.nodeList.push(node);\n\n            for(var _i=1; _i < lst.length; _i++){\n\n                node.children.push(this.lstToAST(nodeID, lst[_i]));\n            }\n\n            return nodeID;\n        }else{\n            //is a list\n            let node = new ASTNode(nodeID, \"list\", parentID, []);\n            this.nodeList.push(node);\n\n            for(var _i=0; _i < lst.length; _i++){\n                node.children.push(this.lstToAST(nodeID, lst[_i]));\n            }\n\n            return nodeID;\n        }\n\n        //\n    }\n\n    buildVis(){\n        console.log(this.nodeList)\n        this.visNodes = [];\n        this.visEdges = [];\n\n        for(const node of this.nodeList){\n            if(node.nodeID!==-100){\n                let label = node.token;\n\n                if(node.shouldInBracket){\n                    label = '(' + label + ')';\n                }\n                this.visNodes.push({\n                    id: node.nodeID,\n                    label: label + ((node.shouldBreak)?'\\u21B5':''),\n                    shape: \"box\",\n                    size: 20,\n                })\n                for(const childID of node.children){\n                    this.visEdges.push({\n                        id: this.visEdges.length,\n                        from: node.nodeID,\n                        to: childID\n                    })\n                }\n            }\n        }\n    }\n\n\n\n    toString(selectedID: number, node: ASTNode): string{\n        return this.toHTML(selectedID, node);\n    }\n    toHTML(selectedID: number, node: ASTNode, add_highlight = true): string{\n        let result: string;\n        if(node.children.length === 0){\n            result = node.token\n        }else{\n            let children = new Array<string>();\n            if(node.token !== 'list'){ children.push(node.token);  }\n\n            for(const childID of node.children){\n                children.push(this.toHTML(selectedID, this.nodeList[childID]));\n            }\n            if (children.length === 1 || !node.shouldInBracket){\n                result = children.join(\" \");\n            }else{\n                result = \"(\"+children.join(\" \")+\")\";\n            }\n\n\n        }\n\n        //add highlight\n        if(add_highlight && selectedID === node.nodeID){\n            result = '<span class=\"highlighted\">' + result + '</span>'\n        }\n\n        //add linebreak\n        if(node.shouldBreak){\n            result= '\\n'+ '\\t'.repeat(this.nodeDepth(node)) +  result ;\n        }\n\n        return result\n    }\n}\n\n\n","module.exports = __webpack_public_path__ + \"static/media/all.cd5d2510.svg\";","class SatVisAssertionError extends Error {\n    constructor(message) {\n      super(message);\n      this.name = \"SatVisAssertionError\";\n    }\n  }\n\nexport function assert(condition, message=\"\") {\n    if (!condition)\n        throw new SatVisAssertionError('Assertion failed: ' + (message || ''));\n};","module.exports = __webpack_public_path__ + \"static/media/angle-arrow-down.412f3289.svg\";"],"sourceRoot":""}