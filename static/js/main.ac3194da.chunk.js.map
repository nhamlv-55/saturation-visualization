{"version":3,"sources":["resources/icons/singles/eye.svg","helpers/readable.ts","helpers/transformers.ts","components/Slider.tsx","model/util.ts","helpers/network.ts","components/Graph.tsx","helpers/navigation.ts","components/Main.tsx","components/ReplaceDialog.tsx","components/TreeEditor.tsx","components/Editor.tsx","components/NodeDetails.tsx","helpers/diff.ts","components/ExprMapSelector.tsx","components/Aside.tsx","components/App.tsx","components/AppWrapper.tsx","components/ExpTable.tsx","components/MenuOptions.tsx","components/Menu.tsx","components/DashboardComponents/TimeChart.tsx","helpers/naming.ts","components/DashboardComponents/IndividualBenchmark.tsx","components/DashboardComponents/ResultsOverview.tsx","components/DashboardComponents/TimeZoom.tsx","components/DashboardComponents/GeneralGraphOverview.tsx","components/Dashboard.tsx","components/DashboardLanding.tsx","components/Router.tsx","serviceWorker.js","index.tsx","resources/icons/all.svg","helpers/util.ts","helpers/uber-s-exify.ts","resources/icons/singles/angle-arrow-down.svg"],"names":["module","exports","negateMap","toReadable","expr","parseResult","lst","sep","logSym","length","splice","indexOf","Array","isArray","toString","parse","replaceVarNames","varList","newList","split","i","regex","RegExp","replace","getCleanExprList","exprList","resultExprList","push","trim","getProblemName","fileName","match","_","require","NULL_IDX","ASTNode","constructor","nodeID","token","parentID","children","shouldBreak","shouldInBracket","transformers","startLine","endLine","startOffset","endOffset","this","updateRange","node","isOpt","ASTTransformer","Object","run","nodes","ast","t","action","params","condition","runStack","tStack","new_ast","cloneDeep","t_index","dirty","nodeList","getCondition","current_token","current_break","node_depth","nodeDepth","current_in_bracket","move","movable","cloned_ast","eval","parent","assert","siblings","nodePosition","buildVis","flipCmp","new_node","toImp","cloned_node","headChildren","tailChildren","newHead","newTail","cID","includes","new_cID","negateNode","childID","last","source","old_token","changeBreak","changeBracket","AST","formula","visNodes","visEdges","null_node","lstToAST","getNode","child","deleteNode","console","log","findNode","line","character","isSExpNode","_i","label","id","shape","size","from","to","selectedID","toHTML","add_highlight","result","join","repeat","icons","Slider","React","slider","render","props","historyLength","currentTime","onCurrentTimeChange","className","disabled","enabled","onClick","viewBox","xlinkHref","ref","type","min","max","value","onChange","getSliderValue","current","parseInt","SatVisAssertionError","Error","message","super","name","styleTemplates","lemmaColours","buildPobLemmasMap","tree","ExprMap","Map","exprID","PobLemmasMap","event_type","lemmaExprID","level","pobID","existPrevLemma","lemma","prev_min","buildExprMap","exprMapItem","raw","readable","editedRaw","editedReadable","toVisNode","style","nodeSelection","finalInv","color","styleData","isMarked","finalColor","border","markedStyle","defaultStyle","background","highlight","highlightStyle","fixed","Graph","state","metaPressed","network","networkNodes","DataSet","networkEdges","graphContainer","boundKeyupHandler","keyupHandler","bind","componentDidMount","generateNetwork","updateNetwork","layout","fit","window","addEventListener","componentWillUnmount","removeEventListener","componentDidUpdate","prevProps","Network","edges","physics","interaction","multiselect","hierarchical","direction","sortMethod","on","clickEvent","a","clickedNodeId","onNodeSelectionChange","onlyUpdateStyles","visLayout","PobVisTree","treeCloned","JSON","stringify","same_as_sibl","identical_sibl","sibl","to_be_vis","new_children","PobVisLayout","ATree","nodeHasBeenSelected","currentNodeExprID","Number","MIN_SAFE_INTEGER","InvList","map","exprInfo","start","end","edgeId","visNode","filter","x","findIndex","visEdge","parentNodeId","hidden","arrows","smooth","toVisEdge","clear","add","event","closest_node","nodeId","currentNode","body","closestNode","min_distance","MAX_SAFE_INTEGER","idx","distance","y","edge","fromId","toId","closestNodes","findClosestNode","key","ReactModal","setAppElement","Main","runCmd","readOnly","ReplaceDialog","target","handleSourceChange","e","setState","handleTargetChange","handleRegexChange","checked","defaultValue","defaultChecked","onApply","TreeEditor","selectedNodeIDs","stringRep","status","possibleTransformations","transformationSelected","astStack","transformerStack","transformer","localSelectedNodeIDs","isModal","saveExprs","input","redrawAST","redraw","updateConditionInputEvent","evt","updateParamsInputEvent","displayTransformers","index","display","width","applyStack","original_ast","error","applyLocal","currentAST","undo","pop","learnTransformationFromInputOutput","inputAST","outputAST","payload","item","fetch","method","mode","headers","response","json","responseJson","possiblePrograms","updateTransformationSelected","possibleTs","transformation","xmlAst","humanReadableAst","dangerouslySetInnerHTML","__html","onBlast","onTransformExprs","Editor","isChromeOrFirefox","monacoDiv","monaco","output","Monaco","create","lineNumbers","roundedSelection","scrollBeyondLastLine","scrollBeyondLastColumn","minimap","renderLineHighlight","hideCursorInOverviewRuler","links","overviewRulerBorder","automaticLayout","lineDecorationsWidth","lineNumbersMinChars","wordWrap","setValue","openEditor","getModel","getValueInRange","getSelection","getFormulas","blast","all_formulas","getValue","f","rows","NodeDetails","keep","type_map","learningFlag","learningErrorFlag","transformationFlag","transformationErrorFlag","editorIsOpen","editorTextInput","node_to_string","n","is_root","args","nl","arg","getLemmaExprs","lemmaExprs","lemmas","getLemmaList","lemma_list","colorIndex","lemmaStyle","keys","relatedExprMap","exprData","implies","forEach","literal","lemmaColour","transformExprsFromText","transformExprs","exp_path","selectedProgram","closeModal","responseData","tExprMap","forceUpdate","openModal","afterOpenModal","node1","node2","isOpen","onRequestClose","overlayClassName","contentLabel","expr1","expr2","expr1List","expr2List","Math","lineDiff","diff","added","removed","concat","toDiff","part","additional_info","expr_layout","ast_json","classNameTop","classNameBottom","ExprMapSelector","matchingFiles","exps","selected","fetchExps","getMatchingFiles","getMatchingExprMap","data","exp","fetchedJSON","updateRelatedExprMap","expr_map","exps_list","updateSelected","Aside","createButton","title","svg","getNodeDetails","exprMap","messages_q","mess","onPoke","onOpenStarModal","SatVisLayout","MultiSelectMode","SMTLayout","alignmentBaseline","textAnchor","dominantBaseline","fontWeight","stroke","fill","fontFamily","JSONLayout","App","Component","trees","varNames","starModalIsOpen","runSpacer","problem","spacerUserOptions","poke","message_q","nodes_list","rawWithVars","var_names","run_cmd","spacer_state","saveExprMap","file","exp_name","undefined","errorMess","updateNodeSelection","tempNodeSelection","slice","updateCurrentTime","setPobVisLayout","setSatVisLayout","setMultiSelect","setSMTLayout","setJSONLayout","openStarModal","closeStarModal","main","hL","onUpdateNodeSelection","AppWrapper","hideBracketsAssoc","nonStrictForNegatedStrictInequalities","orientClauses","ExpTable","isFetching","pathname","done","MenuOptions","optionTypeHTML","optionType","optionValue","optionName","allOptions","showOptions","options","fetchOptions","updateSpacerOptions","fullOptionString","option","dash","changeSpacerUserOptions","storeSpacerOptions","preventDefault","reset","displaySpacerOptions","updateOptionValue","getOptions","placeholder","changeOptionType","tempList","removeOption","rIndex","changeSpacerManualUserOptions","newValue","showHideOptions","selectedOptions","htmlFor","src","eye","alt","kvp","displayValue","onSubmit","list","onChangeVariables","Menu","fileUpload","onDidChangeContent","onChangeProblem","problemName","chooseFile","uploadEncoding","onChangeSpacerUserOptions","click","files","reader","FileReader","onloadend","text","onChangeProblemName","readAsText","TimeChart","totalTime","palette","createSunburst","prevState","snapshot","prepareData","tmp","getData","resultKeys","values","d3","remove","colour","domain","range","myChart","SunburstChart","document","getElementById","height","tooltipTitle","showLabels","potholeToNormal","words","toUpperCase","substring","IndividualBenchmark","filterTimeData","d","reduce","obj","timeData","dataKey","ResultsOverview","createResultsOverview","results","xScale","config","margin","left","right","xMap","xValue","xAxis","tickValues","yValue","SPACER_num_invariants","yScale","graphHeight","top","bottom","yMap","yAxis","append","attr","font","call","axis","g","selectAll","enter","bandwidth","select","selectBenchmark","TimeZoom","instance","GeneralGraphOverview","createGraph","updateZoomView","classText","Dashboard","overviewMetrics","selectedBenchmark","graphMin","graphMax","customMode","customData","depth","memory","time","zoomMode","dashboardConfig","barNum","loadData","handleGraphTranslationKeyboard","rawData","parsedData","SPACER_cluster_out_of_gas","SPACER_expand_pob_undef","SPACER_inductive_level","SPACER_max_cluster_size","SPACER_max_cvx_reduced_dim","SPACER_max_query_lvl","SPACER_need_sage","SPACER_num_abstractions","SPACER_num_abstractions_failed","SPACER_num_abstractions_success","SPACER_num_active_lemmas","SPACER_num_cant_abstract","SPACER_num_ctp_blocked","SPACER_num_dim_reduction_success","SPACER_num_is_invariant","SPACER_num_lemma_jumped","SPACER_num_lemmas","SPACER_num_mbp_failed","SPACER_num_merge_gen","SPACER_num_merge_gen_failed","SPACER_num_merge_gen_success","SPACER_num_no_over_approximate","SPACER_num_non_lin","SPACER_num_pobs","SPACER_num_propagations","SPACER_num_queries","SPACER_num_reach_queries","SPACER_num_refinements","SPACER_num_reuse_reach_facts","SPACER_num_sync_cvx_cls","SPACER_num_under_approximations","SPACER_pob_out_of_gas","SPACER_wide_attmpts","SPACER_wide_success","max_memory","time_iuc_solver_get_iuc","time_iuc_solver_get_iuc_hyp_reduce1","time_iuc_solver_get_iuc_hyp_reduce2","time_iuc_solver_get_iuc_learn_core","time_pool_solver_proof","time_pool_solver_smt_total","time_pool_solver_smt_total_sat","time_pool_solver_smt_total_undef","time_spacer_ctp","time_spacer_init_rules","time_spacer_init_rules_pt_init","time_spacer_mbp","time_spacer_solve","time_spacer_solve_propagate","time_spacer_solve_pt_must_reachable","time_spacer_solve_reach","time_spacer_solve_reach_children","time_spacer_solve_reach_cluster","time_spacer_solve_reach_gen_bool_ind","time_spacer_solve_reach_gen_merge","time_spacer_solve_reach_gen_merge_cvx_cls","time_spacer_solve_reach_gen_wide","time_spacer_solve_reach_is_reach","handleSidebarClick","innerText","handleSidebarClickDot","handleHomeClick","handleClearClick","moveGraphLeft","moveGraphRight","moveGraphUp","moveGraphDown","handleGraphTranslationClick","handleCustomClick","filterDictionary","custom","j","addToCustomData","metric","metricDataKeys","totalData","innerHTML","customDataCopy","setZoomView","timeZoomData","benchmarks","timeKeys","arrow","DashboardLanding","fileReader","handleFileRead","content","returnObject","Date","now","updateData","handleFileChosen","updateFile","accept","dataItem","href","AppRouter","path","exact","changeProblem","changeProblemName","onChangeHideBracketsAssoc","changeHideBracketsAssoc","onChangeNonStrictForNegatedStrictInequalities","changeNonStrictForNegatedStrictInequalities","onChangeOrientClauses","changeOrientClauses","changeVariables","appComponent","exp_id","changeRawData","displayVisualization","fileId","Boolean","location","hostname","ReactDOM","navigator","serviceWorker","ready","then","registration","unregister","line_number","offset","impl","c"],"mappings":"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","file":"static/js/main.ac3194da.chunk.js","sourcesContent":["module.exports = __webpack_public_path__ + \"static/media/eye.bf3c357b.svg\";","import {parse} from \"s-exify\";\n\nexport const negateMap = {\n    \"<=\": \">\",\n    \">=\": \"<\",\n    \"!=\": \"=\",\n    \"<\": \">=\",\n    \">\": \"<=\",\n    \"=\": \"!=\",\n    \"&&\": \"||\",\n    \"||\": \"&&\",\n    \"not\": \"\"\n};\n\nconst logSym = [\"&&\", \"||\", \"=>\"];\n\nexport function toReadable(expr) {\n    if (expr[0] !== \"(\"){\n        expr = \"(\" + expr + \")\";\n    }\n    return parseResult(parse(expr), \"\");\n}\n\nfunction parseResult(lst, sep) {\n    //symbols for logical relations\n    let logSym = {\n        \"and\": \"&&\",\n        \"or\": \"||\"\n    };\n\n    //symbols for mathematical operations\n    //Note: \"-\" is not included because negative numbers are in the form (- x)\n    let logOp = [\"!=\", \"=\", \"<=\", \">=\", \">\", \"<\", \"+\", \"*\", \"/\"];\n\n    //empty list should return empty string\n    if (lst.length < 1){\n        return \"\";\n    }\n\n    //logical symbol should be inserted between each child clause\n    if (lst[0] in logSym) {\n        return parseResult(lst.splice(1), logSym[lst[0]]);\n    }\n\n    //reorders to put operators between operands\n    //Note: accounts for \"-\" denoting the subtraction of 2 numbers, (- x y)\n    if (logOp.indexOf(lst[0]) >= 0 || (lst[0] === \"-\" && lst.length === 3)){\n        return \"(\" + parseResult(lst[1], \"\") + \" \" + lst[0] + \" \" + parseResult(lst[2], \"\") + \")\";\n    }\n\n    //handles indexing into an array\n    if (lst[0] === \"select\") {\n        return lst[1] + \"[\" + lst[2] + \"]\";\n    }\n\n    //Adds not symbol (!) to beginning of clause\n    if (lst[0] === \"not\") {\n        if (lst[1][0] in negateMap){\n            lst[1][0] = negateMap[lst[1][0]];\n            return parseResult(lst[1], \"\");\n        }\n        return parseResult(\"!\" + lst[1], \"\");\n    }\n\n    //prevents trailing logical symbol\n    if (sep !== \"\" && lst.length === 1){\n        return parseResult(lst[0], \"\");\n    }\n\n    //actual place where logical symbol gets placed between clauses\n    if (sep !== \"\") {\n        return parseResult(lst[0], \"\") + \" \" + sep + \"\\n\" + parseResult(lst.splice(1), sep);\n    }\n\n    //handler for negative numbers which come in the form (- x)\n    if (lst[0] === \"-\"){\n        return lst[0] + lst[1];\n    }\n\n    //handler for denoting invariants. Ex. Inv (...)\n    if (typeof(lst[0]) === 'string' && Array.isArray(lst) && lst.length > 1){\n        return lst[0] + \": (\" + parseResult(lst[1], \"\") + \")\";\n    }\n\n    return lst.toString();\n}\n\nexport function replaceVarNames(expr, varList) {\n    if (varList === \"\") return expr;\n    if (typeof expr === \"string\") {\n        let newList = varList.split(\" \");\n        for (let i = 0; i < newList.length; i++) {\n            let regex = new RegExp( \"[a-zA-z0-9@$:!]+_\"+ i + \"_n\", \"gi\");\n            expr = expr.replace(regex, newList[i]);\n        }\n    }\n    return expr;\n}\n\nexport function reorder(expr, lhs, op){\n    if (typeof expr !== \"string\") return expr;\n    let lhsFinal:Number[] = [];\n    let rhsFinal:Number[] = [];\n    let exprList = getCleanExprList(expr, op);\n    let result = \"\";\n    for (let i = 0; i < exprList.length; i++){\n        if (lhs.indexOf(i) > -1) {\n            if (lhsFinal.length === 0){\n                result = negate(exprList[i]) + result;\n            }\n            else {\n                result = negate(exprList[i]) + \" \" + negateMap[op] + \"\\n\" + result;\n            }\n            lhsFinal.push(i);\n            \n        }\n        else {\n            if (rhsFinal.length === 0) {\n                result = result + \" =>\\n\" + exprList[i];\n            }\n            else {\n                result = result + \" \" + op + \"\\n\" + exprList[i]\n            }\n           rhsFinal.push(i); \n        }\n        \n        if (i === exprList.length - 1) {\n            if (lhsFinal.length === 0) {\n                result = \"true \" + result\n            }\n            if (rhsFinal.length === 0) {\n                result = result + \" =>\\nfalse\"\n            }\n        }\n    }\n    return result;\n}\n\nfunction negate(expr) {\n    let compOp = getCompOp(expr);\n    if (compOp === \"not\"){\n        return compOp + \" \" + expr\n    }\n    return expr.replace(compOp, negateMap[compOp]);\n}\n\nfunction getCompOp(expr: string) {\n    let keys = Object.keys(negateMap);\n    for (let i = 0; i < keys.length; i++){\n        if (expr.includes(keys[i])){\n            return keys[i];\n        } \n    }\n    \n    return \"not\";\n}\n\nexport function getOp(expr) {\n    for (let i = 0; i < logSym.length; i++) {\n        if (expr.includes(logSym[i])) return logSym[i];\n    }\n}\n\nexport function getIndexOfLiteral(exprList, literal){\n    for (let i = 0; i < exprList.length; i++){\n        if (literal === exprList[i] || literal === negate(exprList[i])){\n            return i;            \n        }\n    }\n    return -1;\n}\n\nexport function getCleanExprList(expr, sep) {\n    let exprList = expr.split(sep);\n    let resultExprList:string[] = [];\n    for (let i = 0; i < exprList.length; i++){\n        if (exprList[i] !== \"\") {\n            resultExprList.push(exprList[i].trim());\n        }\n    }\n    \n    return resultExprList;\n}\n\nexport function getVariables(literal) {\n    let regex = /([a-zA-Z])+/g;\n    return literal.match(regex);\n}\n\nexport function getProcesses(literal) {\n    let regex = /(\\[[0-9]+\\])/g;\n    return literal.match(regex);\n}\n\nexport function getProcessVariables(literal) {\n    let regex = /([a-zA-Z]+\\[[0-9]+\\])/g;\n    return literal.match(regex);\n}\n\nexport function cleanExprOperators(expr) {\n    for (let i = 0; i < logSym.length; i++){\n       expr = expr.replace(logSym[i], \"\"); \n    }\n    return expr;\n}\n\nexport function getVarIndices(varList: string[], exprList: string[]) {\n    let result:number[] = [];\n    for (let i = 0; i < varList.length; i++){\n        for (let j = 0; j < exprList.length; j++){\n            if (exprList[j].includes(varList[i])){\n                result.push(j);\n            }\n        }\n    }\n    return result;\n}\n\n\nexport function getProblemName(fileName) {\n    let regex = /.*.smt2/\n    return fileName.match(regex);\n}\n","import { Node, Edge } from 'vis';\nimport { assert } from \"./util\";\nimport {parse, isSExpNode, SExp, SExpNode} from './uber-s-exify';\nimport {negateMap} from \"./readable\";\nconst _ = require(\"lodash\");\n\nconst NULL_IDX = -100;\n\nexport interface ProseTransformation{\n    humanReadableAst: string,\n    xmlAst: string\n}\n\n\nexport class ASTNode{\n    nodeID: number;\n    token: string;\n    shouldBreak: number;\n    shouldInBracket: number;\n    parentID: number;\n    children: number[];\n    transformers = [];\n    startLine: number;\n    endLine: number;\n    startOffset: number;\n    endOffset: number;\n\n    constructor(nodeID: number, token: string, parentID: number, children: number[]){ \n        this.nodeID = nodeID;\n        this.token = token;\n        this.shouldBreak = 0;\n        this.shouldInBracket = 1;\n        this.parentID = parentID;\n        this.children = children;\n        this.startLine = -1;\n        this.endLine = -1;\n        this.startOffset = -1;\n        this.endOffset = -1;\n    }\n\n    updateRange(node: SExpNode){\n        this.startLine = node.startLine;\n        this.startOffset = node.startOffset;\n        this.endLine = node.endLine;\n        this.endOffset = node.endOffset;\n    }\n\n}\n\nfunction isOpt(lst: SExp|SExpNode){\n    const optList = [\"+\", \"-\", \"*\", \"/\",\n                     \">\", \"<\", \">=\", \"<=\", \"=\",\n                     \"and\", \"or\", \"not\", \"=>\",\n                     \"assert\",\n                     \"declare-datatypes\",\n                     \"forall\", \"exists\", \"define\",\n                     \"select\", \"store\"];\n\n    if(Array.isArray(lst)){\n        return false;\n    }\n    return optList.indexOf(lst.token)>-1;\n}\n\nexport interface Transformer{\n    action: string;\n    condition: string;\n    params: {};\n}\n\nexport class ASTTransformer extends Object{\n    run(nodes: number[], ast: AST, t: Transformer): [boolean, AST]{\n        if(t.action!==\"runStack\"){\n            return this[t.action](nodes, ast, t.params, t.condition);\n        }\n        return [false, ast];\n    }\n\n    runStack(ast: AST, tStack: Transformer[]): AST{\n        let new_ast = _.cloneDeep(ast);\n        //loop over all transformer\n        let t_index = 0;\n        while(t_index < tStack.length){\n            //apply the transformer to all the node if possible.\n            let dirty = true;\n\n            for(var node of new_ast.nodeList){\n                if(node.nodeID === NULL_IDX){\n                    //null node\n                    continue;\n                }\n                [dirty, new_ast] = this.run([node.nodeID], new_ast, tStack[t_index]);\n                if(dirty){\n                    break;\n                }\n            }\n            //only move to the next transformer if reach fixpoint (dirty = false)\n            if(!dirty){\n                t_index++;\n            }\n        }\n        return new_ast;\n    }\n\n    getCondition(action: string, nodes: number[], ast: AST): string{\n        let node = ast.nodeList[nodes[nodes.length - 1]];\n        let condition = \"true\";\n        switch(action){\n            case \"move\":{\n                const current_token = node.token;\n                condition = `node.token === ${current_token}`;\n                break;\n            }\n            case \"changeBreak\":{\n                const current_break = node.shouldBreak;\n                const node_depth = ast.nodeDepth(node);\n                condition = `ast.nodeDepth(node) === ${node_depth} && node.shouldBreak === ${current_break}`;\n                break;\n            }\n            case \"changeBracket\":{\n                const current_in_bracket = node.shouldInBracket ;\n                const node_depth = ast.nodeDepth(node);\n                condition = `ast.nodeDepth(node) === ${node_depth} && node.shouldInBracket === ${current_in_bracket}`;\n                break;\n            }\n            case \"squashNegation\":{\n                condition = \"true\";\n                break;\n            }\n            case \"replace\":{\n                condition = \"true\";\n                break;\n            }\n            default:{\n                const current_token = node.token;\n                const node_depth = ast.nodeDepth(node);\n                condition = `node.token === \"${current_token}\" && ast.nodeDepth(node) === ${node_depth}`;\n                break;\n            }\n        }\n        return condition;\n    }\n\n    move(nodes: number[], ast: AST, params: {}, condition: string ): [boolean, AST]{\n        /*\n          move an AST node to the left or to the right\n          E.g: moveLeft(\"+ x y z\", \"z\") -> \"+ x z y\"\n         */\n        let node = ast.nodeList[nodes[nodes.length - 1]];\n        const movable = [\"+\", \"*\", \"=\", \"and\", \"or\"];\n        let cloned_ast = _.cloneDeep(ast);\n\n        let dirty = false;\n        if(eval(condition)){\n            let parent = cloned_ast.nodeList[node.parentID];\n            assert('direction' in params);\n            assert(movable.indexOf(parent.token)!==-1, \"The parent node doesnt support reordering.\");//only can move stuff under some opt\n            let siblings = parent.children;\n\n            const nodePosition = siblings.indexOf(node.nodeID);\n\n            switch(params[\"direction\"]){\n                case \"l\":{\n                    if(nodePosition>0){\n                        //ES6 magic\n                        [siblings[nodePosition], siblings[nodePosition-1]] = [siblings[nodePosition-1], siblings[nodePosition]];\n                        dirty = true;\n                    }\n                    break;\n                }\n                case \"r\":{\n                    if(nodePosition<siblings.length-1){\n                        //ES6 magic\n                        [siblings[nodePosition], siblings[nodePosition+1]] = [siblings[nodePosition+1], siblings[nodePosition]];\n                        dirty = true;\n                    }\n                    break;\n                }\n                default:\n                    break;\n            }\n            cloned_ast.buildVis();\n        }\n        return [dirty, cloned_ast];\n    }\n\n    flipCmp(nodes: number[], ast: AST, params: {}, condition: string ): [boolean, AST]{\n        /*\n          flip a comparison node\n          E.g: flipCmp(\"> x y\") -> \"<= y x\"\n         */\n        let node = ast.nodeList[nodes[nodes.length - 1]];\n        let cloned_ast = _.cloneDeep(ast);\n        let dirty = false;\n        if(eval(condition)){\n            let new_node : ASTNode;\n            switch(node.token){\n                case \"=\":{\n                    new_node = new ASTNode(node.nodeID, \"=\", node.parentID, [node.children[1], node.children[0]]);\n                    dirty = true;\n                    break;\n                }\n                case \"<\":{\n                    new_node = new ASTNode(node.nodeID, \">\", node.parentID, [node.children[1], node.children[0]]);\n                    dirty = true;\n                    break;\n                }\n                case \">\":{\n                    new_node = new ASTNode(node.nodeID, \"<\", node.parentID, [node.children[1], node.children[0]]);\n                    dirty = true;\n                    break;\n                }\n                case \">=\":{\n                    new_node = new ASTNode(node.nodeID, \"<=\", node.parentID, [node.children[1], node.children[0]]);\n                    dirty = true;\n                    break;\n                }\n                case \"<=\":{\n                    new_node = new ASTNode(node.nodeID, \">=\", node.parentID, [node.children[1], node.children[0]]);\n                    dirty = true;\n                    break;\n                }\n                default:\n                    new_node = node;\n            }\n            cloned_ast.nodeList[node.nodeID] = new_node;\n            cloned_ast.buildVis();\n        }\n        return [dirty, cloned_ast];\n    }\n\n    toImp(nodes: number[], ast: AST, params: {}, condition: string ): [boolean, AST]{\n        /*\n          Convert (or X Y Z T) to (and(~X ~Y) => (or Z T))\n\n        */\n        if(nodes.length === 0){\n            return [false, _.cloneDeep(ast)];\n        }\n        \n        let node = ast.nodeList[nodes[nodes.length - 1]];\n        let cloned_ast = _.cloneDeep(ast);\n        let cloned_node = cloned_ast.nodeList[node.nodeID];\n        let dirty = false;\n        if(eval(condition)){\n            //get the `or` node\n            let parent = cloned_ast.nodeList[cloned_node.parentID];\n\n            if(!parent || parent.token!==\"or\"){\n                return [false, cloned_ast];\n            }\n            // For an implication X => Y, X is the head, Y is the tail\n            let headChildren = new Array<number>();\n            let tailChildren = new Array<number>();\n            let newHead: ASTNode;\n            let newTail: ASTNode;\n            for(var cID of parent.children){\n                if(nodes.includes(cID)){\n                    // console.log(\"c negate\", cloned_ast.nodeList[cID].negate());\n                    let new_cID = cloned_ast.negateNode(cID);\n                    headChildren.push(new_cID);\n                }else{\n                    tailChildren.push(cID);\n                }\n            }\n\n\n            //build the head (X in X => Y)\n            if(headChildren.length>1){\n                newHead = new ASTNode(cloned_ast.nodeList.length, \"and\", parent.nodeID, headChildren);\n                cloned_ast.nodeList.push(newHead);\n                for(var childID of headChildren){\n                    cloned_ast.nodeList[childID].parentID = newHead.nodeID;\n                }\n            }else{\n                newHead = cloned_ast.nodeList[headChildren[0]];\n            }\n\n\n            //build the tail (Y in X => Y)\n            if(tailChildren.length > 1){\n                newTail = new ASTNode(cloned_ast.nodeList.length, \"or\", parent.nodeID, tailChildren);\n                cloned_ast.nodeList.push(newTail);\n                for(var childID of tailChildren){\n                    cloned_ast.nodeList[childID].parentID = newTail.nodeID;\n                }\n            }else{\n                newTail = cloned_ast.nodeList[tailChildren[0]];\n            }\n            //change the `or` node into the `=>` node\n            parent.token = \"=>\";\n            parent.children = [newHead.nodeID, newTail.nodeID];\n\n            cloned_ast.buildVis();\n            dirty = true;\n        }\n        return [dirty, cloned_ast];\n    } \n\n    replace(nodes: number[], ast: AST, params: {}, condition: string ): [boolean, AST]{\n        let node = ast.nodeList[_.last(nodes)];\n        let cloned_ast = _.cloneDeep(ast);\n        let dirty = false;\n        let source = params[\"source\"]\n        if(eval(condition)){\n            if(params[\"regex\"]){\n                source = new RegExp(params[\"source\"])\n            }\n\n\n            for(var cloned_node of cloned_ast.nodeList){\n                let old_token = cloned_node.token\n                cloned_node.token = old_token.replace(source, params[\"target\"]);\n                if(cloned_node.token !== old_token){\n                    dirty = true;\n                }\n            }\n\n            if(dirty){\n                cloned_ast.buildVis();\n            }\n        }\n\n        return [dirty, cloned_ast];\n    }\n    changeBreak(nodes: number[], ast: AST, params:{}, condition: string ): [boolean,AST]{\n        let node = ast.nodeList[_.last(nodes)];\n        let cloned_ast = _.cloneDeep(ast);\n        if(eval(condition)){\n            cloned_ast.nodeList[node.nodeID].shouldBreak ^= 1;\n            cloned_ast.buildVis();\n            return [true, cloned_ast];\n        }\n        return [false, cloned_ast];\n    }\n    changeBracket(nodes: number[], ast: AST, params:{}, condition: string ): [boolean, AST]{\n        let node = ast.nodeList[_.last(nodes)];\n        let cloned_ast = _.cloneDeep(ast);\n        if(eval(condition)){\n            cloned_ast.nodeList[node.nodeID].shouldInBracket ^= 1;\n            cloned_ast.buildVis();\n            return [true, cloned_ast];\n        }\n        return [false, cloned_ast];\n    }\n}\n\n\nexport class AST {\n    nodeList = new Array<ASTNode>();\n    visNodes = new Array<Node>();\n    visEdges = new Array<Edge>();\n\n    null_node = new ASTNode(NULL_IDX, \"null-node\", NULL_IDX, []);\n    constructor(formula: string){\n        this.lstToAST(-1, parse(formula));\n        this.buildVis();\n    }\n\n    nodeDepth(node: ASTNode): number{\n        if (node.parentID===-1){\n            return 0;\n        }\n\n        return this.nodeDepth(this.nodeList[node.parentID])+1;\n    }\n    negateNode(nodeID: number): number{\n        let node = this.getNode(nodeID);\n        //if node is `not`, squash it\n        if(node.token===\"not\"){\n            /*\n              if a node is not->formula\n              replace it with ``formula``\n             */\n            let child = this.getNode(node.children[0]);\n            this.nodeList[nodeID] = new ASTNode(node.nodeID, child.token, node.parentID, child.children);\n            //point all child to the new parent\n            for(var cID of child.children){\n                this.getNode(cID).parentID = node.nodeID;\n            }\n\n            this.deleteNode(child.nodeID);\n            return node.nodeID;\n        }\n        //negate using negateMap if operator is in negate map\n        if(node.token in negateMap){\n            this.nodeList[nodeID] = new ASTNode(node.nodeID, negateMap[node.token], node.parentID, node.children);\n            return node.nodeID;\n        }\n        //negate a normal node\n        let new_node = new ASTNode(this.nodeList.length, `not`, node.parentID, [nodeID]);\n        console.log(\"new node\", new_node);\n        node.parentID = new_node.nodeID;\n        this.nodeList.push(new_node);\n        return new_node.nodeID;\n    }\n\n    getNode(nodeID: number): ASTNode{\n        return this.nodeList[nodeID];\n    }\n\n    deleteNode(nodeID: number): void{\n        this.nodeList[nodeID] = this.null_node;\n    }\n\n    findNode(line: number, character: number): ASTNode| null{\n        for(var node of this.nodeList){\n            if(node.startLine<=line &&\n                node.endLine>=line &&\n                node.startOffset<=character &&\n                node.endOffset>=character)\n                return node;\n        }\n        return null;\n    }\n\n\n    lstToAST(parentID: number, lst: SExp|SExpNode): number{\n        const nodeID = this.nodeList.length;\n        if(isSExpNode(lst)){\n            const node = new ASTNode(nodeID, lst.token, parentID, []);\n            node.updateRange(lst); \n            this.nodeList.push(node);\n            return nodeID;\n        }\n        //if is an opt\n        if(isOpt(lst[0])){\n            let node = new ASTNode(nodeID, (lst[0] as SExpNode).token, parentID, []);\n            node.updateRange(lst[0] as SExpNode);\n            this.nodeList.push(node);\n\n            for(var _i=1; _i < lst.length; _i++){\n\n                node.children.push(this.lstToAST(nodeID, lst[_i]));\n            }\n\n            return nodeID;\n        }else{\n            //is a list\n            let node = new ASTNode(nodeID, (lst[0] as SExpNode).token, parentID, []); \n            node.updateRange(lst[0] as SExpNode);\n            // let node = new ASTNode(nodeID, \"list\", parentID, []);\n            this.nodeList.push(node);\n\n            for(var _i=0; _i < lst.length; _i++){\n                node.children.push(this.lstToAST(nodeID, lst[_i]));\n            }\n\n            return nodeID;\n        }\n\n        //\n    }\n\n    buildVis(){\n        this.visNodes = [];\n        this.visEdges = [];\n\n        for(const node of this.nodeList){\n            if(node.nodeID!==NULL_IDX){\n                let label = node.token;\n\n                if(node.shouldInBracket){\n                    label = '(' + label + ')';\n                }\n                this.visNodes.push({\n                    id: node.nodeID,\n                    label: label + ((node.shouldBreak)?'\\u21B5':''),\n                    shape: \"box\",\n                    size: 20,\n                })\n                for(const childID of node.children){\n                    this.visEdges.push({\n                        id: this.visEdges.length,\n                        from: node.nodeID,\n                        to: childID\n                    })\n                }\n            }\n        }\n    }\n\n\n\n    toString(selectedID: number, node: ASTNode): string{\n        return this.toHTML(selectedID, node);\n    }\n    toHTML(selectedID: number, node: ASTNode, add_highlight = true): string{\n        let result: string;\n        if(node.children.length === 0){\n            result = node.token\n        }else{\n            let children = new Array<string>();\n            if(node.token !== 'list'){ children.push(node.token);  }\n\n            for(const childID of node.children){\n                children.push(this.toHTML(selectedID, this.nodeList[childID]));\n            }\n            if (children.length === 1 || !node.shouldInBracket){\n                result = children.join(\" \");\n            }else{\n                result = \"(\"+children.join(\" \")+\")\";\n            }\n\n\n        }\n\n        //add highlight\n        if(add_highlight && selectedID === node.nodeID){\n            result = '<span class=\"highlighted\">' + result + '</span>'\n        }\n\n        //add linebreak\n        if(node.shouldBreak){\n            result= '\\n'+ '    '.repeat(this.nodeDepth(node)) +  result ;\n        }\n\n        return result\n    }\n}\n\n\n","import * as React from 'react';\n\nimport '../styles/Slider.css';\n\n\nconst icons = require('../resources/icons/all.svg') as string;\n\ntype Props = {\n  historyLength: number,\n  currentTime: number,\n  onCurrentTimeChange: (newState: number) => void,\n  enabled: boolean\n};\nexport default class Slider extends React.Component<Props, {}> {\n\n  private slider = React.createRef<HTMLInputElement>();\n\n  render() {\n    const {historyLength, currentTime, onCurrentTimeChange} = this.props;\n      console.log(\"historyLength\", historyLength)\n    return (\n      <section className=\"component-slider\">\n\n        <button disabled={!this.props.enabled || currentTime <= 0} onClick={() => onCurrentTimeChange(currentTime - 1)}>\n          <svg viewBox=\"0 0 24 24\" className=\"icon\">\n            <use xlinkHref={`${icons}#history-back`}/>\n          </svg>\n        </button>\n\n        <section className=\"wrapper\">\n          <input\n            ref={this.slider}\n            type=\"range\"\n            min={0}\n            max={historyLength}\n            value={currentTime}\n            disabled={!this.props.enabled}\n            onChange={() => onCurrentTimeChange(this.getSliderValue())}\n          />\n        </section>\n\n        <button disabled={!this.props.enabled || currentTime >= historyLength} onClick={() => onCurrentTimeChange(currentTime + 1)}>\n          <svg viewBox=\"0 0 24 24\" className=\"icon\">\n            <use xlinkHref={`${icons}#history-forward`}/>\n          </svg>\n        </button>\n\n      </section>\n    );\n  }\n\n  // HELPERS ///////////////////////////////////////////////////////////////////////////////////////////////////////////\n\n  getSliderValue(): number {\n    return this.slider.current ? parseInt(this.slider.current.value, 10) : 0;\n  }\n\n}\n","class SatVisAssertionError extends Error {\n    constructor(message) {\n      super(message);\n      this.name = \"SatVisAssertionError\";\n    }\n  }\n\nexport function assert(condition, message=\"\") {\n    if (!condition)\n        throw new SatVisAssertionError('Assertion failed: ' + (message || ''));\n};","const styleTemplates = require('../resources/styleTemplates');\n\nexport const lemmaColours = [\n    \"#e6194B\",\n    \"#f58231\",\n    \"#3cb44b\",\n    \"#42d4f4\",\n    \"#000075\",\n    \"#469990\",\n    \"#911eb4\",\n    \"#f032e6\",\n    \"#fabebe\",\n    \"#800000\",\n];\n\n//BUILD POB LEMMAS MAP////////////////////\nexport function buildPobLemmasMap(tree: any, varList: string[]): any{\n    // construct exprID->expr map\n    let ExprMap = new Map<number, string>();\n    for (const nodeID in tree) {\n        const node = tree[nodeID];\n        ExprMap[node.exprID] = node.expr;\n    }\n\n    // construct PobExprID->a list of lemmas\n    let PobLemmasMap = {};\n    for (const nodeID in tree) {\n        let node = tree[nodeID];\n        if (node.event_type !== \"EType.ADD_LEM\") {\n            continue\n        }\n        const lemmaExprID = node.exprID;\n        const level = node.level;\n        const pobID = node.pobID;\n        if (!(pobID in PobLemmasMap)) {\n            PobLemmasMap[pobID] = new Array<{}>();\n        }\n\n        //traverse the list, if lemmaExprID is already in the list, update its min max\n        let existPrevLemma = false;\n        for (const lemma of PobLemmasMap[pobID]) {\n            if (lemma[0] === lemmaExprID) {\n                existPrevLemma = true;\n                let prev_min = lemma[1];\n                let prev_max = lemma[2];\n\n                if (level > prev_max || level === \"oo\") {\n                    lemma[2] = level\n                }\n                if (level < prev_min) {\n                    lemma[1] = level\n                }\n                break\n            }\n        }\n\n        if (!existPrevLemma) {\n            PobLemmasMap[node.pobID].push([lemmaExprID, level, level])\n        }\n    }\n    return PobLemmasMap\n}\n\n\n//BUILD EXPR MAP////////////////////////\nexport function buildExprMap(tree: any, varList: string[]): any{\n    let ExprMap = new Map<number, Object>();\n    for (const nodeID in tree) {\n        const node = tree[nodeID];\n        const exprMapItem = {\n            raw: node.expr.raw,\n            readable: node.expr.readable,\n            editedRaw: node.expr.raw,\n            editedReadable: node.expr.readable\n            \n        };\n        ExprMap[node.exprID] = exprMapItem;\n    }\n    return ExprMap\n\n}\n\nexport function PobVisLayout(tree): any{\n    let treeCloned = JSON.parse(JSON.stringify(tree));\n\n    for (const nodeID in treeCloned){\n        let node = treeCloned[nodeID];\n        if(node.event_type !== \"EType.EXP_POB\"){\n            node.to_be_vis = false;\n            continue\n        }\n\n        let parent = treeCloned[node.parent];\n        let siblings = parent.children;\n        let same_as_sibl = false;\n        let identical_sibl;\n        for(const siblID of siblings){\n\n            const sibl = treeCloned[siblID];\n            if(sibl.nodeID !== node.nodeID && sibl.exprID === node.exprID){\n                same_as_sibl = true;\n                identical_sibl = sibl;\n                break\n            }\n\n        }\n        if(same_as_sibl){\n            // I will disappear\n            node.to_be_vis = false;\n\n            // point all my children to my sibling\n            for(const childID of node.children){\n                treeCloned[childID].parent = identical_sibl.nodeID;\n                identical_sibl.children.push(childID)\n            }\n            //change my parent's children\n            let new_children = new Array<number>();\n            for (const childID of siblings){\n                if(childID !== node.nodeID){\n                    new_children.push(childID)\n                }\n            }\n            parent.children = new_children\n        }\n    }\n\n    return treeCloned\n}\n\nexport function toVisNode(node: any, style: string, nodeSelection, finalInv: number, color:number = -1): any {\n    const styleData = styleTemplates[style];\n    const isMarked = nodeSelection.includes(node.nodeID);\n\n    let finalColor  = {\n        border : isMarked ? styleData.markedStyle.border : styleData.defaultStyle.border,\n            background : isMarked ? styleData.markedStyle.background : styleData.defaultStyle.background,\n            highlight : {\n            border : styleData.highlightStyle.border,\n                background : styleData.highlightStyle.background\n        }\n    };\n    \n    if (style === \"lemma\" && color !== -1) {\n        finalColor = {\n            border: lemmaColours[color],\n            background: lemmaColours[color],\n            highlight: {\n                border: lemmaColours[color],\n                background: lemmaColours[color]\n            }\n        }\n    }\n    return {\n        id: node.nodeID,\n        shape: finalInv > 0 ? finalInv > 1 ? \"hexagon\" : \"star\" : styleData.shape,\n        fixed: true,\n        color: finalColor\n    };\n}\n\n\nexport function toVisEdge(edgeId: number, parentNodeId: number, nodeID: number, hidden: boolean) {\n    return {\n        id: edgeId,\n        arrows: \"to\",\n        color: {\n            color: \"#dddddd\",\n            highlight: \"#f8cfc1\",\n        },\n        from: parentNodeId,\n        to: nodeID,\n        smooth: false,\n        hidden: hidden\n    }\n}\n\nexport function getSliderValue(slider): number {\n    return slider.current ? parseInt(slider.current.value, 10) : 0;\n}\n\n","import * as React from 'react';\nimport { DataSet, Network, Node, Edge } from 'vis'\n\nimport '../styles/Graph.css'\nimport { assert } from '../model/util';\nimport {PobVisLayout, toVisEdge, toVisNode} from \"../helpers/network\";\nimport {findClosestNode} from \"../helpers/navigation\";\n\n\ntype Props = {\n    tree: any,\n    onNodeSelectionChange: (selection: number[]) => void,\n    nodeSelection: number[],\n    currentTime: number,\n    layout: string,\n    PobLemmasMap: any,\n};\n\ntype State = {\n    metaPressed: boolean,\n};\n\nexport default class Graph extends React.Component<Props, {}> {\n\n    state: State = {\n        metaPressed: false,\n    };\n\n    network: Network | null = null;\n    networkNodes = new DataSet<Node>([]);\n    networkEdges = new DataSet<Edge>([]);\n    graphContainer = React.createRef<HTMLDivElement>();\n    boundKeyupHandler =  this.keyupHandler.bind(this);\n   \n    componentDidMount() {\n        this.generateNetwork();\n        this.updateNetwork(false, this.props.layout);\n        this.network!.fit();\n        window.addEventListener(\"keyup\", this.boundKeyupHandler, false);\n    }\n\n    componentWillUnmount() {\n        window.removeEventListener(\"keyup\", this.boundKeyupHandler, false);\n    }\n\n    componentDidUpdate(prevProps: Props) {\n        this.updateNetwork(false, this.props.layout);\n    }\n\n    render() {\n        return (\n            <section className= \"component-graph\" ref = { this.graphContainer } >\n                <canvas/>\n            </section>\n        );\n    }\n\n    generateNetwork() {\n        console.log(\"I am Graph. I receive:\", this.props)\n        assert(this.graphContainer.current);\n        assert(!this.network); // should only be called once\n\n        this.network = new Network(this.graphContainer.current!, {\n            nodes: this.networkNodes,\n            edges: this.networkEdges\n        }, {\n            physics: false,\n            interaction: {\n                multiselect: false\n            },layout: {\n                hierarchical: {\n                    direction: 'UD',\n                    sortMethod: 'directed',\n                },\n            }\n\n        });\n\n        this.network.on('click', async (clickEvent) => {\n            if (clickEvent.nodes.length > 0) {\n\n                assert(clickEvent.nodes.length === 1);\n                const clickedNodeId = clickEvent.nodes[0];\n                console.log(\"clickEvent.nodes\", clickEvent.nodes);\n                console.log(\"clickedNodeId\", this.props.tree[clickedNodeId]);\n                this.props.onNodeSelectionChange(clickEvent.nodes);\n            } else {\n                this.props.onNodeSelectionChange([]);\n            }\n        });\n\n    }\n\n    // updates the network displayed by Vis.js\n    updateNetwork(onlyUpdateStyles: boolean, layout: string) {\n        if (layout === \"SatVis\"){\n            this.visLayout(this.props.tree);\n        } else if(layout === \"PobVis\"){\n            const PobVisTree =  PobVisLayout(this.props.tree);\n            this.visLayout(PobVisTree);\n        }\n    }\n\n    visLayout(ATree){\n        let nodeHasBeenSelected = this.props.nodeSelection.length > 0;\n        let currentNodeExprID = Number.MIN_SAFE_INTEGER;\n        let InvList:{id: string, start: string, end: string}[] = [];\n        if(nodeHasBeenSelected) {\n            currentNodeExprID = ATree[this.props.nodeSelection[0]].exprID;\n            InvList = currentNodeExprID in this.props.PobLemmasMap ? this.props.PobLemmasMap[currentNodeExprID].map((exprInfo) => {\n                return {\n                    id: exprInfo[0],\n                    start: exprInfo[1],\n                    end: exprInfo[2]\n                }\n            }): [];\n        }\n        const visNodes = new Array<Node>();\n        const visEdges = new Array<Edge>();\n        let edgeId = 0;\n        \n\n\n        for (const nodeID in ATree){\n            let node = ATree[nodeID];\n            if(!node.to_be_vis) continue;\n            let visNode;\n            let FinalInvList = node.exprID in this.props.PobLemmasMap ? this.props.PobLemmasMap[node.exprID].filter(exprInfo => exprInfo[2] === \"oo\") : [];\n            let finalInv = (FinalInvList.filter(x => x[1] === node.level || x[1] === \"oo\").length);\n            //Prioritize related nodes\n            if (node.exprID === currentNodeExprID) {\n                visNode = toVisNode(node, \"sameExprID\", this.props.nodeSelection, finalInv)\n            } else if (InvList.length > 0 && InvList.filter(exprInfo => exprInfo.id === node.exprID).length > 0){\n                visNode = toVisNode(node, \"lemma\", this.props.nodeSelection, finalInv, InvList.findIndex(x => x.id === node.exprID) % 10);\n            } else if (node.nodeID > this.props.currentTime) {\n                visNode = toVisNode(node, \"activated\", this.props.nodeSelection, finalInv);\n            } else {\n                visNode = toVisNode(node, \"passive\", this.props.nodeSelection, finalInv);\n            }\n\n            visNodes.push(visNode);\n            const visEdge = toVisEdge(edgeId, node.parent, node.nodeID, false);\n            visEdges.push(visEdge);\n            edgeId++;\n        }\n        this.networkNodes.clear();\n        this.networkNodes.add(visNodes);\n        this.networkEdges.clear();\n        this.networkEdges.add(visEdges);\n\n    }\n\n    keyupHandler(event) {\n        if(this.props.nodeSelection.length !== 1 ) return;\n        const selected_node = this.props.nodeSelection[0];\n        let closest_node = findClosestNode(selected_node, event.key, this.network);\n        this.props.onNodeSelectionChange([closest_node]);\n    }\n}\n","import {assert} from \"../model/util\";\n\nexport function findClosestNode(nodeId: number, direction, network){\n    assert(network);\n    assert(\"body\" in network!);\n    const currentNode = network!.body.nodes[nodeId];\n    let closestNode = currentNode.id;\n    let min_distance = Number.MAX_SAFE_INTEGER;\n\n    if (direction === \"ArrowLeft\"){\n        for(const idx in network!.body.nodes){\n            const node = network!.body.nodes[idx];\n            let distance = currentNode.x - node.x;\n            if (node.y !== currentNode.y) {continue}\n            if (distance > 0 && distance < min_distance){\n                closestNode = node.id;\n                min_distance = distance;\n            }\n        }\n    }\n    else if (direction === \"ArrowRight\"){\n        for (let idx in network!.body.nodes){\n            const node = network!.body.nodes[idx];\n            let distance = node.x - currentNode.x;\n            if (node.y !== currentNode.y) {continue}\n            if (distance > 0 && distance < min_distance){\n                closestNode = node.id;\n                min_distance = distance;\n            }\n        }\n    }\n    else if (direction === \"ArrowDown\" && currentNode.edges.length >= 2){\n        closestNode = currentNode.edges.filter(edge => edge.fromId === currentNode.id)[0].toId;\n    }\n    else if (direction === \"ArrowUp\" && currentNode.edges.length >= 1){\n        let closestNodes = currentNode.edges.filter(edge => edge.toId === currentNode.id);\n        if (closestNodes.length > 0){\n            closestNode = closestNodes[0].fromId;\n        }\n    }\n    return closestNode;\n\n}\n","import * as React from 'react';\n\nimport Slider from './Slider';\nimport Graph from './Graph';\nimport ReactModal from 'react-modal';\nReactModal.setAppElement('#root');\n\ntype Props = {\n    mode: \"proof\" | \"replay\" | \"iterative\",\n    tree: any,\n    runCmd: string,\n    onNodeSelectionChange: (selection: number[]) => void,\n    nodeSelection: number[],\n    historyLength: number,\n    currentTime: number,\n    onCurrentTimeChange: (newState: number) => void,\n    layout: string,\n    PobLemmasMap: any,\n};\nexport default class Main extends React.Component<Props, {}> {\n\n    // TODO: remove this, after supporting button clicks in Aside while the modal is active\n    componentDidMount() {\n    }\n\n    render() {\n        return (\n            <main>\n                    <input type=\"text\" value = {this.props.runCmd} readOnly></input>\n                    <Graph\n                        tree= { this.props.tree }\n                        onNodeSelectionChange={this.props.onNodeSelectionChange}\n                        nodeSelection={this.props.nodeSelection}\n                        currentTime = {this.props.currentTime}\n                        layout = {this.props.layout}\n                        PobLemmasMap = {this.props.PobLemmasMap}\n                    />\n                    <Slider\n                        historyLength={this.props.historyLength}\n                        currentTime={this.props.currentTime}\n                        onCurrentTimeChange={this.props.onCurrentTimeChange}\n                        enabled={true}\n                    />\n                </main>\n        );\n    }\n\n}\n","import * as React from 'react';\nimport {ChangeEvent} from \"react\";\n\ntype Props = {\n    onApply: (action: string, params: {})=>void,\n}\n\ntype State = {\n    source: string,\n    target: string,\n    regex: boolean\n}\n\n\nclass ReplaceDialog extends React.Component<Props, State> {\n    state = {\n        source: \"\",\n        target: \"\",\n        regex: false,\n    };\n    \n    handleSourceChange(e: ChangeEvent<HTMLInputElement>) {\n        this.setState({\n            source: e.target.value\n        })\n    }\n    handleTargetChange(e: ChangeEvent<HTMLInputElement>) {\n        this.setState({\n            target: e.target.value\n        })\n    }\n\n    handleRegexChange(e: ChangeEvent<HTMLInputElement>) {\n        this.setState({\n            regex: e.target.checked\n        })\n    }\n\n\n    render() {\n        return (\n            <div>\n                {`Replace: `}<input type=\"text\" defaultValue=\"\" onChange={this.handleSourceChange.bind(this)} />\n                {` with: `}<input type=\"text\" defaultValue=\"\" onChange={this.handleTargetChange.bind(this)}/>\n                {`\\tRegex?`}\n                <input type=\"checkbox\"\n                       defaultChecked={false}\n                       onChange={this.handleRegexChange.bind(this)} \n                />\n                <button onClick={this.props.onApply.bind(this, \"replace\",\n                                                         {\"source\": this.state.source,\n                                                          \"target\": this.state.target,\n                                                          \"regex\": this.state.regex\n                })}>Replace</button>\n                </div>\n        );\n    }\n\n\n}\n\nexport default ReplaceDialog;\n","import * as React from 'react';\nimport { AST, ASTTransformer, Transformer, ProseTransformation} from \"../helpers/transformers\";\nimport { assert } from '../model/util';\nimport { DataSet, Network, Node, Edge } from 'vis'\nimport ReplaceDialog from './ReplaceDialog'\nconst _ = require(\"lodash\");\ntype Props = {\n    name: string,\n    input: string,\n    onBlast: (tStack: Transformer[])=>void,\n    isModal: boolean,\n    saveExprs?: ()=> void,\n    onTransformExprs?: (t: string)=> Promise<void>,\n}\ntype State = {\n    selectedNodeIDs: number[],\n    stringRep: string,\n    status: string,\n    possibleTransformations: ProseTransformation[],\n    transformationSelected: string,\n}\n\nclass TreeEditor extends React.Component<Props, State> {\n    state = {\n        selectedNodeIDs: [-1],\n        stringRep: \"\",\n        status: \"\",\n        possibleTransformations: [],\n        transformationSelected: \"\",\n    }\n    network: Network | null = null;\n    networkNodes = new DataSet<Node>([]);\n    networkEdges = new DataSet<Edge>([]);\n    graphContainer = React.createRef<HTMLDivElement>();\n    astStack = new Array<AST>();\n    transformerStack = new Array<Transformer>();\n    transformer = new ASTTransformer();\n    localSelectedNodeIDs = [-1];\n    componentDidMount() {\n        if(this.props.isModal){\n            this.props.saveExprs!();\n        }\n        this.generateNetwork();\n        if(this.props.input !== \"()\"){\n            this.astStack = [new AST(this.props.input)];\n            this.redrawAST();\n        }\n    }\n\n    redrawAST(){\n        if(this.astStack[this.astStack.length-1] != null){\n            let ast = this.astStack[this.astStack.length-1];\n            console.log(ast);\n            console.log(\"visNodes\", ast.visNodes);\n            console.log(\"visEdges\", ast.visEdges);\n\n            this.networkEdges.clear();\n            this.networkEdges.add(ast.visEdges);\n            this.networkNodes.clear();\n            this.networkNodes.add(ast.visNodes);\n            /* this.network!.fit(); */\n            this.network!.redraw();\n            console.log(ast.toHTML(_.last(this.state.selectedNodeIDs), ast.nodeList[0]));\n            this.setState({stringRep: ast.toHTML(_.last(this.state.selectedNodeIDs), ast.nodeList[0])});\n        }\n    }\n\n\n\n    componentDidUpdate(prevProps: Props){\n        if(prevProps.input !== this.props.input){\n            //new formula. clear everything\n            this.astStack = [new AST(this.props.input)];\n            this.transformerStack = [];\n            this.redrawAST();\n        }\n    }\n\n    generateNetwork() {\n        console.log(\"I am Graph. I receive:\", this.props)\n        assert(this.graphContainer.current);\n        assert(!this.network); // should only be called once\n        this.network = new Network(this.graphContainer.current!, {\n            nodes: this.networkNodes,\n            edges: this.networkEdges\n        }, {\n            physics: false,\n            interaction: {\n                multiselect: true\n            },layout: {\n                hierarchical: {\n                    /* direction: 'UD', */\n                    sortMethod: 'directed',\n                },\n            }\n\n        });\n\n        this.network.on('click', async (clickEvent) => {\n            if (clickEvent.nodes.length > 0) {\n                console.log(\"clickEvent.nodes\", clickEvent.nodes);\n                    this.localSelectedNodeIDs = clickEvent.nodes;\n            } else {\n                this.setState({selectedNodeIDs: []});\n            }\n        });\n        \n    }\n\n    updateConditionInputEvent(evt: React.ChangeEvent<HTMLInputElement>, idx: number){\n        this.transformerStack[idx].condition = evt.target.value;\n    }\n    updateParamsInputEvent(evt: React.ChangeEvent<HTMLInputElement>, idx: number){\n        this.transformerStack[idx].params = JSON.parse(evt.target.value);\n    }\n\n    displayTransformers() {\n        const listItems = this.transformerStack.map((t, index) =>{\n            return (\n                <div  key={index} className=\"transformer-wrapper\">\n                    {`If `}\n                    <input style={{display: \"inline-block\", width: \"20rem\"}}\n                           ref=\"condition-${index}\"\n                           type=\"text\"\n                           defaultValue={t.condition}\n                           onChange={evt => this.updateConditionInputEvent(evt, index)}/>\n                    <br/>\n                    {`then run __${t.action}__ with params:`}\n                    <br/>\n                    <input ref=\"params-${index}\" type=\"text\" defaultValue={JSON.stringify(t.params)}\n                           style={{width: \"100%\"}}\n                           onChange={evt => this.updateParamsInputEvent(evt, index)}/>\n                </div>);\n        });\n\n        return listItems;\n    }\n\n    applyStack(){\n        const original_ast = new AST(this.props.input);\n\n        try{\n            this.astStack.push(this.transformer.runStack(original_ast, this.transformerStack));\n            this.transformerStack.push({\"action\": \"runStack\", \"params\": \"\", \"condition\": \"\"});\n            this.redrawAST();\n        }catch(error){\n            this.setState({\"status\": \"Error:\"+error.message});\n        }\n    }\n\n    applyLocal(action: string, params: {}){\n        const currentAST = this.astStack[this.astStack.length - 1];\n        const nodes = this.localSelectedNodeIDs;\n        console.log(params)\n        let t = {\"action\": action, \"params\": params, \"condition\": \"true\"};\n        try{\n            let [dirty, new_ast] = this.transformer.run(nodes, currentAST, t);\n            if(dirty){\n                this.astStack.push(new_ast);\n                //guess the condition\n                t.condition = this.transformer.getCondition(action, nodes, currentAST);\n                this.transformerStack.push(t);\n                this.redrawAST();\n            }\n        }catch(error){\n            this.setState({\"status\": \"Error:\"+error.message});\n        }\n    }\n    undo(){\n        if(this.astStack.length>1){\n            this.astStack.pop();\n            this.transformerStack.pop();\n            this.redrawAST();\n        }\n    }\n    async learnTransformationFromInputOutput() {\n        let inputAST = this.astStack[0];\n        let outputAST = this.astStack[this.astStack.length - 1];\n        console.log(\"transformer stack\", this.transformerStack);\n\n        let payload = {\n            \"inputOutputExamples\":[{\"input\": inputAST.toString(-1, inputAST.nodeList[0]),\n                                 \"output\": outputAST.toString(-1, outputAST.nodeList[0]),\n                                 \"aux\": [\"\"]}],\n            \"exp_path\": this.props.name,\n            \"type\": this.transformerStack[0].action\n        };\n        if (payload[\"type\"] === \"replace\") {\n            payload[\"params\"] = this.transformerStack.map((item) => {return item.params});\n        }\n\n        console.log(\"payload\", payload);\n        const response = await fetch(\"http://localhost:5000/spacer/learn_transformation\", {\n            method: 'POST',\n            mode :'cors',\n            headers: {\n                'Accept': 'application/json',\n                'Content-Type': 'application/json'\n            }, body : JSON.stringify(payload)\n        });\n        if (response.status === 200){\n            const responseJson = await response.json();\n            let possiblePrograms = responseJson[\"response\"];\n            console.log(possiblePrograms);\n            this.setState({\n                possibleTransformations: possiblePrograms\n            });\n        }\n        else {\n            this.setState({\n                possibleTransformations: []\n            });\n        }\n    }\n    \n    updateTransformationSelected(e) {\n        this.setState({\n            transformationSelected: e.target.value\n        })\n    }\n    render() {\n        console.log(\"I'm TreeEditor. I got\", this.props.input);\n        console.log(\"I'm TreeEditor. My possibleTs:\", this.state.possibleTransformations);\n        let tStack = this.displayTransformers();\n        let possibleTs = this.state.possibleTransformations.map((transformation: ProseTransformation,key) => (\n            <div key={key}>\n                <input type=\"radio\" name={\"transformation\"} value={transformation.xmlAst}\n                       onClick={this.updateTransformationSelected!.bind(this)}/>{transformation.humanReadableAst}\n            </div>\n        ))\n\n        return (\n            <div className=\"tree-editor\">\n                <div className=\"editor-options-card\" id=\"graph-container\">\n                    <h4>{this.state.status}</h4>\n                    <div className=\"editor-menu\">\n                        {`Hint: Long click to select multiple nodes`}\n                        <br/>\n                        <button onClick={this.applyLocal.bind(this, \"flipCmp\", {})}>Flip Cmp</button>\n                        <button onClick={this.applyLocal.bind(this, \"toImp\", {})}>To Imp</button>\n                        <button onClick={this.applyLocal.bind(this, \"move\", {\"direction\": \"l\"})}>Move Left</button>\n                        <button onClick={this.applyLocal.bind(this, \"move\", {\"direction\": \"r\"})}>Move Right</button>\n                        <button onClick={this.applyLocal.bind(this, \"changeBreak\", {})}>\\n?</button>\n                        <button onClick={this.applyLocal.bind(this, \"changeBracket\", {})}>()?</button>\n                        <br/>\n                        <ReplaceDialog\n                            onApply = {this.applyLocal.bind(this)}\n                        />\n                        <br/>\n\n                        <button onClick={this.undo.bind(this)}>Undo</button>\n                        <pre className=\"editor-string-rep\" dangerouslySetInnerHTML={{ __html: this.state.stringRep }} />\n                    </div>\n                    <div className= \"editor-component-graph\" ref = { this.graphContainer }>\n                        <canvas/>\n                    </div>\n                </div>\n                <div className=\"editor-options-card\" id=\"transformer-container\">\n                    <h3>Transformer Queue</h3>\n                    <pre>{`\n                        Condition examples:\n                        - apply the transformation for all the node\n                        whose token pass the regex test \"ab+c\"\n                          /ab+c/.test(node.token)\n                        - apply the transformation for all the node\n                        whose token is either x, y, or z\n                          [\"x_\", \"y_\", \"z_\"].includes(node.token)\n                        - apply the transformation for all the node\n                        at depth 2\n                          ast.nodeDepth(node) === 2\n                    `}</pre>\n                    {tStack}\n                    <button onClick={this.applyStack.bind(this)}>Apply for the current AST</button>\n                    <button onClick={this.props.onBlast.bind(this, this.transformerStack)}>Blast</button>\n                    <button onClick={this.learnTransformationFromInputOutput.bind(this)}>Learn</button>\n                    <h3>Possible Transformations</h3>\n                    {possibleTs}\n                    {this.props.isModal?<button onClick={this.props.onTransformExprs!.bind(this, this.state.transformationSelected)}>Apply Everywhere</button>:''}\n                </div>\n            </div>\n        );\n    }\n}\n\nexport default TreeEditor;\n","import * as React from 'react';\nimport '../styles/Editor.css';\nimport * as Monaco from 'monaco-editor'\nimport TreeEditor from \"./TreeEditor\";\nimport { AST, ASTTransformer, Transformer} from \"../helpers/transformers\";\nconst icons = require('../resources/icons/all.svg') as string;\n\ntype Props = {\n    input: string,\n    name: string,\n    isModal: boolean,\n    onTransformExprs?: (t: string)=> Promise<void>,\n    saveExprs?: ()=> void,\n}\n\ntype State = {\n    input: string,\n    output: string\n}\n\n\nexport class Editor extends React.Component<Props, State> {\n    private isChromeOrFirefox = true;\n    monacoDiv = React.createRef<HTMLDivElement>();\n    monaco: Monaco.editor.IStandaloneCodeEditor | null = null\n\n    state: State = {\n        input: \"()\",\n        output: \"\"\n    };\n\n\n    componentDidMount() {\n        if (!this.isChromeOrFirefox) {\n            return;\n        }\n\n        // generate instance of Monaco Editor\n        this.monaco = Monaco.editor.create(this.monacoDiv.current!, {\n            lineNumbers: 'off',\n            roundedSelection: false,\n            scrollBeyondLastLine: false,\n            scrollBeyondLastColumn: 0,\n            minimap: {\n                enabled: false\n            },\n            renderLineHighlight: 'none',\n            hideCursorInOverviewRuler: true,\n            links: false,\n            overviewRulerBorder: false,\n            automaticLayout: false,\n            lineDecorationsWidth: 0,\n            lineNumbersMinChars: 0,\n            wordWrap: 'wordWrapColumn'\n            // fontFamily: \"Monaco\" TODO: decide which font to use. By default, multiple fonts are loaded, which is quite slow\n        });\n\n        this.monaco.setValue(this.props.input);\n\n        /* this.monaco.setValue(this.props.problem);\n         * this.monaco.getModel()!.onDidChangeContent(() => {\n         *     console.log(this.monaco!.getModel()!.getValue());\n         *     this.props.onChangeProblem(this.monaco!.getModel()!.getValue());\n         * }); */\n    }\n\n    openEditor(){\n        console.log(\"click Apply\")\n\n        let input = this.monaco!.getModel()!.getValueInRange(this.monaco!.getSelection()!);\n        console.log(input)\n        /* getValue()!; */\n\n        this.setState({\n            input: input\n        });\n    }\n\n    getFormulas(input: string): string[]{\n        return input.split(/\\n\\s*\\n/);\n    }\n\n    blast(tStack: Transformer[]){\n        let all_formulas = this.getFormulas(this.monaco?.getModel()!.getValue()!);\n        let transformer = new ASTTransformer();\n\n\n        console.log(all_formulas);\n        console.log(tStack);\n        console.log(\"pew pew !\");\n\n        let output=\"\"\n        for(var f of all_formulas){\n            let ast = new AST(f);\n            let new_ast = transformer.runStack(ast, tStack);\n            let new_f = new_ast.toString(-1, new_ast.nodeList[0]);\n            output+=new_f+\"\\n\\n\";\n        }\n        this.setState({output: output});\n    }\n\n    render() {\n        if (!this.isChromeOrFirefox) {\n            return (\n                <section className=\"unsupported-message\">\n                    <svg viewBox=\"0 0 24 24\" className=\"icon\">\n                        <use xlinkHref={`${icons}#alert-triangle`}/>\n                    </svg>\n                    <span>Your current browser is not supported. Please use Chrome or Firefox!</span>\n                </section>\n            );\n        }\n\n        return (\n            <section className=\"component-menu\">\n                <section className=\"editor\">\n                    <div id=\"editor-wrapper\">\n                        <h2>Original</h2>\n                        <div ref={this.monacoDiv} className=\"monaco\" id=\"input\"></div>\n                        <button onClick={this.openEditor.bind(this)}>Open Editor</button>\n                        <h2>Transformed</h2>\n                        <textarea ref=\"output\" id=\"output\" rows={30} value={this.state.output} readOnly></textarea>\n                    </div>\n                    {/* <TransformerTable/> */}\n                    {this.props.isModal?\n                    <TreeEditor\n                        name ={this.props.name}\n                        input = {this.state.input}\n                        onBlast = {this.blast.bind(this)}\n                        isModal = {this.props.isModal}\n                        onTransformExprs = {this.props.onTransformExprs!.bind(this)}\n                        saveExprs = {this.props.saveExprs!.bind(this)}\n                    />:\n                     <TreeEditor\n                         name ={this.props.name}\n                         input = {this.state.input}\n                         onBlast = {this.blast.bind(this)}\n                         isModal = {this.props.isModal}\n                     />\n                    }\n                </section>\n\n            </section>\n        );\n    }\n}\n\n","import * as React from 'react';\n\nimport '../styles/NodeDetails.css';\nimport '../styles/Editor.css';\nimport {toDiff} from \"../helpers/diff\";\nimport {lemmaColours} from \"../helpers/network\";\nimport {getCleanExprList} from \"../helpers/readable\";\nimport Modal from 'react-modal';\nimport {Editor} from './Editor';\ntype Props = {\n    nodes: any,\n    name: string\n    PobLemmasMap: {},\n    ExprMap: {},\n    layout: string,\n    expr_layout: \"SMT\" | \"JSON\",\n    saveExprs: () => void,\n    relatedExprMap: any\n};\n\ntype State = {\n    learningFlag: boolean,\n    learningErrorFlag: boolean,\n    transformationFlag: boolean\n    transformationErrorFlag: boolean\n    possibleTransformations: {humanReadableAst: string, xmlAst: string}[]\n    transformationSelected: string,\n    editorIsOpen: boolean,\n    editorTextInput: string,\n}\n\nexport default class NodeDetails extends React.Component<Props, State> {\n\n    keep = false; // hack to skip each second event generated by Sortable\n    constructor(props) {\n        super(props);\n        this.state = {\n            learningFlag: false,\n            learningErrorFlag: false,\n            transformationFlag: false,\n            transformationErrorFlag: false,\n            possibleTransformations: [],\n            transformationSelected: \"\",\n            editorIsOpen: false,\n            editorTextInput: \"\",\n        }\n    }\n\n    type_map = {\n        \"EQUALS\": \"= \",\n        \"PLUS\": \"+ \",\n        \"TIMES\": \"* \",\n        \"LT\": \"< \",\n        \"LE\": \"<= \",\n        \"GT\": \"> \",\n        \"GE\": \">= \",\n        \"SYMBOL\": \"\",\n        \"0_REAL_CONSTANT\": \"\"\n    };\n\n    node_to_string(n: Object, is_root: Boolean):string{\n        let result: string;\n        let args = \"\";\n        const nl = is_root?\"\\n\":\"\";\n        //build args \n        if (Array.isArray(n[\"content\"])){\n            for(const arg of n[\"content\"]){\n                args+=this.node_to_string(arg, false)+nl\n            }\n        }else{\n            args+=n[\"content\"]\n        }\n        //build node\n        if (n[\"type\"] in this.type_map){\n            if(this.type_map[n[\"type\"]]===\"\"){\n                result = \" \"+ args\n            }else{\n                result = \"(\" + this.type_map[n[\"type\"]] + args + \")\"\n            }\n        }else{\n            result = \"(\" + n[\"type\"] + nl + args + \")\"\n        }\n        return result\n    }\n\n    getLemmaExprs(node){\n        /*\n        Convert all lemmas under a pob to input to Editor\n        */\n        let lemmaExprs = new Array<string>();\n        if (node.event_type === \"EType.EXP_POB\") {\n            if (node.exprID in this.props.PobLemmasMap){\n                let lemmas = this.props.PobLemmasMap[node.exprID];\n                for (const lemma of lemmas){\n                    let expr = this.props.ExprMap[lemma[0]];\n                    lemmaExprs.push(expr[\"raw\"]);\n                }\n            }\n        }\n        return lemmaExprs;\n    }\n\n    getLemmaList(node) {\n        let lemma_list: JSX.Element[] = [];\n        if (node.event_type === \"EType.EXP_POB\") {\n            lemma_list.push(<h2 key =\"lemma-title\"> Lemmas summarization </h2>);\n            if (node.exprID in this.props.PobLemmasMap){\n                let lemmas = this.props.PobLemmasMap[node.exprID];\n                for (const lemma of lemmas){\n                    let colorIndex = lemmas.indexOf(lemma);\n                    let lemmaStyle = {\n                        color: lemmaColours[colorIndex]\n                    };\n                    lemma_list.push(<h3 style={lemmaStyle} key={\"lemma-header-\"+ lemma[0]}>ExprID: {lemma[0]}, From: {lemma[1]} to {lemma[2]}</h3>);\n                    let expr = this.props.ExprMap[lemma[0]].editedReadable;\n                    if (typeof expr === \"string\"){\n                        if (Object.keys(this.props.relatedExprMap).length > 0){\n                            let keys = Object.keys(this.props.relatedExprMap);\n                            for (let i = 0; i < keys.length; i++){\n                                let exprData = this.props.relatedExprMap[keys[i]];\n                               if (expr === exprData.editedReadable) {\n                                   expr = exprData.editedReadable;\n                                   break;\n                               }\n                            }\n                        }\n                        let exprList = getCleanExprList(expr, \"\\n\");\n                        let implies = -1;\n                        for (let i = 0; i < exprList.length; i++){\n                            if (exprList[i].includes(\"=>\")){\n                                implies = i;\n                                break;\n                            }\n                        }\n                        exprList.forEach((literal, key) => {\n                            let lemmaColour = {\n                                color: \"black\"\n                            }\n                            if (implies !== -1) {\n                                if (key > implies) {\n                                    lemmaColour.color = \"darkblue\";\n                                }\n                            }\n                            lemma_list.push(<pre style={lemmaColour} key={\"lemma-expr-\" + lemma[0] + key}>{literal}</pre>);\n                        });\n                    }\n                    else {\n                        lemma_list.push(<pre>{expr}</pre>);\n                    }\n                }\n            }\n        }\n        return lemma_list;\n    }\n    \n    async transformExprsFromText(t: string) {\n        //wrapper around transformExprs to take in a string instead of reading transformationSelected from state\n        this.setState({\n            transformationSelected: t\n        }, ()=>this.transformExprs());\n    }\n\n    async transformExprs() {\n        this.setState({\n            transformationFlag: false,\n            transformationErrorFlag: false\n        });\n        const response = await fetch(\"http://localhost:5000/spacer/apply_transformation\", {\n            method: 'POST',\n            mode :'cors',\n            headers: {\n                'Accept': 'application/json',\n                'Content-Type': 'application/json'\n            }, body : JSON.stringify({\n                exp_path: this.props.name,\n                selectedProgram: this.state.transformationSelected\n            })\n        });\n\n        if (response.status === 200){\n            this.closeModal();\n            let responseData = await response.json();\n            let tExprMap = responseData[\"response\"];\n            Object.keys(tExprMap).forEach((key) => {\n                this.props.ExprMap[key].editedRaw = tExprMap[key]['raw'];\n                this.props.ExprMap[key].editedReadable = tExprMap[key]['readable'];\n            });\n            this.props.saveExprs();\n            this.setState({\n                transformationFlag: true,\n            });\n            this.forceUpdate();\n        }\n        else {\n            this.setState({\n                transformationErrorFlag: true\n            });\n        }\n    }\n    \n    openModal() {\n        let editorTextInput = this.getLemmaExprs(this.props.nodes[0]).join(\"\\n\\n\");\n        this.setState({editorIsOpen: true, editorTextInput: editorTextInput});\n    }\n\n    afterOpenModal() {\n        // references are now sync'd and can be accessed.\n    }\n\n    closeModal() {\n        this.setState({editorIsOpen: false});\n    }\n\n    render() {\n        let node1, node2;\n        \n        if (this.props.nodes.length > 1){\n            node1 = this.props.nodes[0];\n            node2 = this.props.nodes[1];\n        }\n        return (\n            <div>\n                {/* Editor modal */}\n                <Modal\n                    isOpen={this.state.editorIsOpen}\n                    onRequestClose={this.closeModal.bind(this)}\n                    overlayClassName=\"editor-modal\"\n                    contentLabel=\"Example Modal\"\n                >\n                    <h2>Editor</h2>\n                    <button onClick={this.closeModal.bind(this)}>Close</button>\n                    <Editor\n                        name={this.props.name}\n                        input={this.state.editorTextInput}\n                        isModal={true}\n                        onTransformExprs = {this.transformExprsFromText.bind(this)}\n                        saveExprs={this.props.saveExprs.bind(this)}\n                    />\n                </Modal>\n\n                {this.props.nodes.length > 1 && <section className='component-node-details details-diff'>\n                    <article>\n                        <h2>Diff (Node: <strong>{node1.nodeID}</strong> vs. Node: <strong>{node2.nodeID}</strong>)</h2>\n                        {toDiff(node1.expr.readable, node2.expr.readable).map((part, key) => (\n                            <span key={key} className={part.added ? \"green\" : part.removed ? \"red\" : \"black\"}>\n                                {part.value}\n                            </span>\n                        ))}\n                    </article>\n                </section>}\n                {this.props.nodes.map((node, key) => {\n                    let additional_info =\"type:\" + node.event_type + \" level:\" + node.level;\n                    let lemma_list = this.getLemmaList(node);\n\n                    let expr = node.expr.readable;\n                    if (this.props.expr_layout===\"SMT\") {\n                        console.log(node.expr);\n                    }\n                    else {\n                        /* expr = JSON.stringify(this.props.node.ast_json, null, 2); */\n                        if (node.ast_json) {\n                            expr += this.node_to_string(node.ast_json, true);\n                        }\n                    }\n                    const classNameTop = \"component-node-details details-top-\" + key;\n                    const classNameBottom = \"component-node-details details-bottom-\" + key;\n                    return (\n                        <div key = {key}>\n                            <section className={classNameTop}>\n                                <article>\n                                    <h2>Node <strong>{node.nodeID}, </strong>Expr <strong> {node.exprID} </strong>,\n                                        Parent <strong> {node.pobID}  </strong></h2>\n                                    <h3>{additional_info}</h3>\n                                    <pre className={this.props.nodes.length === 1 ? \"black\" : node === node1 ? \"red\" : \"green\" }>{expr}</pre>\n                                </article>\n                            </section>\n                            {lemma_list.length > 0 && <section className={classNameBottom}>\n                                <article>\n                                    {lemma_list}\n                                    <button onClick={this.openModal.bind(this)}>Open Editor</button>\n                                </article>\n                            </section>}\n                        </div>\n                    );\n                })}\n            </div>\n    );\n\n\n\n\n        /* let additional_info =\"type:\" + this.props.node.event_type + \" level:\" + this.props.node.level */\n        /* let lemma_list = new Array(); */\n\n        //if(this.props.node.event_type == \"EType.EXP_POB\"){\n        //    lemma_list.push(<h2 key =\"lemma-title\"> Lemmas summarization </h2>)\n        //    if(this.props.node.exprID in this.props.PobLemmasMap){\n        //        let lemmas = this.props.PobLemmasMap[this.props.node.exprID]\n        //        for (const lemma of lemmas){\n        //            lemma_list.push(<h3 key={\"lemma-header-\"+ lemma[0]}>ExprID: {lemma[0]}, From: {lemma[1]} to {lemma[2]}</h3>)\n        //            lemma_list.push(<pre key={\"lemma-expr-\"+lemma[0]}>{this.props.ExprMap[lemma[0]]}</pre>)\n        //        }\n        //    }\n        //}\n\n        //let expr = \"\"\n        //if(this.props.expr_layout==\"SMT\"){\n        //    expr = this.props.node.expr\n        //}else{\n        //    /* expr = JSON.stringify(this.props.node.ast_json, null, 2); */\n        //    if(this.props.node.ast_json){\n        //        expr += this.node_to_string(this.props.node.ast_json, true);\n        //    }\n        //}\n\n        //return (\n        //    <div >\n        //        <section className= { 'component-node-details details-top'} >\n        //        <article>\n        //        <h2>Node <strong>{this.props.node.nodeID}, </strong>Expr < strong > { this.props.node.exprID } </strong>, Parent <strong> {this.props.node.pobID}  </strong></h2 >\n        //        <h3>{additional_info}</h3>\n        //        <pre>{expr}</pre>\n        //        </article>\n        //        </section>\n        //        <section className= { 'component-node-details details-bottom'} >\n        //            <article>\n        //                {lemma_list}\n        //            </article>\n        //        </section>\n        //    </div>\n        //);\n\n    }\n\n}\n","import * as diff from 'diff';\nexport function toDiff(expr1, expr2){\n    let result : {value:string, added:boolean, removed:boolean}[] = [];\n    let expr1List = expr1.split(\"\\n\");\n    let expr2List = expr2.split(\"\\n\");\n    for (let i = 0; i < Math.min(expr1List.length, expr2List.length); i++){\n        let lineDiff = diff.diffWords(expr1List[i], expr2List[i]);\n        lineDiff.push({\n            added: false,\n            removed: false, \n            value: \"\\n\"\n        });\n        result = result.concat(lineDiff);\n        console.log(result);\n    }\n    console.log(result);\n    return result;\n    \n} ","import * as React from 'react';\nimport {getProblemName} from \"../helpers/readable\";\n\ntype Props = {\n    name: string\n    updateRelatedExprMap: (exprMap) => void\n}\n\ntype State = {\n    matchingFiles: any[],\n    exps: any[],\n    selected: string\n}\n\nclass ExprMapSelector extends React.Component<Props, State> {\n    constructor(props: Props){\n        super(props);\n        this.state = {\n            matchingFiles: [],\n            exps: [],\n            selected: \"\"\n        }\n    }\n    \n    async componentDidMount() {\n        await this.fetchExps();\n        this.getMatchingFiles();\n        await this.getMatchingExprMap();\n    }\n\n    getMatchingFiles() {\n        let data = this.state.exps.filter(exp => exp.name.includes(getProblemName(this.props.name)) && exp.name !== this.props.name);\n        \n        if (data.length > 0){\n            this.setState({\n                matchingFiles: data,\n                selected: data[0].name\n            });\n        }\n    }\n    \n    async getMatchingExprMap() {\n        const fetchedJSON = await fetch('http://localhost:5000/spacer/get_exprs', {\n            method: 'POST',\n            mode: 'cors',\n            headers: {\n                'Accept': 'application/json',\n                'Content-Type': 'application/json'\n            }, body : JSON.stringify({\n                exp_path: this.state.selected,\n            })\n        });\n\n        try {\n            const json = await fetchedJSON.json();\n            this.props.updateRelatedExprMap(JSON.parse(json.expr_map));\n        } catch (error) {\n            if (error.name === \"SatVisAssertionError\") {\n                throw error;\n            }\n            this.setState({\n                exps: []\n            });\n        }\n    }\n\n    async fetchExps() {\n        const fetchedJSON = await fetch('http://localhost:5000/spacer/fetch_exps', {\n            method: 'POST',\n            mode: 'cors',\n            headers: {\n                'Accept': 'application/json',\n                'Content-Type': 'application/json'\n            }, body : \"\"\n        });\n\n        try {\n            const json = await fetchedJSON.json();\n            this.setState({exps: json.exps_list})\n        } catch (error) {\n            if (error.name === \"SatVisAssertionError\") {\n                throw error;\n            }\n            this.setState({\n                exps: []\n            });\n        }\n    }\n    \n    updateSelected(e) {\n        this.setState({\n            selected: e.target.value\n        });\n    } \n    \n    render() {\n        return (\n            <section className={\"component-node-details details-top-right\"}>\n                <select id=\"exprs\" onChange={this.updateSelected.bind(this)}>\n                {this.state.matchingFiles.length > 0 && this.state.matchingFiles.map((exp, key) => (\n                    <option key={key} value={exp.name}>{exp.name}</option>\n                ))}\n                </select>\n                <button onClick={this.getMatchingExprMap.bind(this)}>Get Expr Map</button>\n            </section>\n\n        );\n    }\n}\n\nexport default ExprMapSelector","import * as React from 'react';\n\nimport '../styles/NodeMenu.css';\nimport NodeDetails from './NodeDetails';\nimport ExprMapSelector from \"./ExprMapSelector\";\nconst icons = require('../resources/icons/all.svg') as string;\n\ntype Props = {\n    messages_q: string[],\n    mode: \"proof\" | \"replay\" | \"iterative\",\n    tree: any | null,\n    nodeSelection: number[],\n    onUpdateNodeSelection: (selection: number[]) => void,\n    onPoke: () => void,\n    onOpenStarModal: () => void,\n    SatVisLayout: () => void,\n    PobVisLayout: () => void,\n    MultiSelectMode: () => void,\n    SMTLayout: () => void,\n    JSONLayout:() => void,\n    PobLemmasMap: {},\n    ExprMap: {},\n    layout: string,\n    expr_layout: \"SMT\"|\"JSON\",\n    saveExprs: () => void,\n    name: string\n};\n\ntype State = {\n    relatedExprMap: any\n}\n\nclass Aside extends React.Component<Props, State> {\n    constructor(props: Props){\n        super(props);\n        this.state = {\n            relatedExprMap: []\n        }\n    }\n\n    createButton(title, onClick, svg) {\n        return <button\n                   title={title}\n                   onClick = { onClick }\n               >\n            <svg viewBox=\"0 0 24 24\" className = \"icon big\" >\n                <use xlinkHref={ `${icons}#${svg}` } />\n            </svg>\n        </button>;\n    }\n    getNodeDetails() {\n        if (this.props.nodeSelection.length >= 1  && this.props.tree != null) {\n            let nodes: any[] = [];\n            for (let node of this.props.nodeSelection){\n                nodes.push(this.props.tree[node]);\n            }\n            return <NodeDetails\n                       nodes={nodes}\n                       name={this.props.name}\n                       PobLemmasMap = { this.props.PobLemmasMap }\n                       ExprMap = { this.props.ExprMap }\n                       layout = { this.props.layout }\n                       expr_layout ={this.props.expr_layout}\n                       saveExprs = {this.props.saveExprs}\n                       relatedExprMap = {this.state.relatedExprMap}\n                       \n            />;\n        } else {\n            return <section className={ 'component-node-details overview' }>\n                <small id=\"nodeInfo\" > <strong>{`${this.props.nodeSelection.length} nodes`\n                } </strong> selected</small >\n            </section>\n        }\n        \n    }\n    \n    updateRelatedExprMap(exprMap) {\n        this.setState({\n            relatedExprMap: exprMap \n        });\n    }\n\n    render() {\n        console.log(this.props.mode);\n        return(\n            <aside>\n                <article>\n                    {this.props.messages_q.map((mess, key) => (\n                        <section  key={key} className=\"component-node-menu\">{mess}</section>\n                    ))}\n                    <section className=\"component-node-menu\" >\n                        { this.createButton(\"Poke\", this.props.onPoke, \"graph-undo\") }\n                        { this.createButton(\"Star\", this.props.onOpenStarModal, \"star\") }\n                        { this.createButton(\"SatVis\", this.props.SatVisLayout, \"node-parents\") }\n                        { this.createButton(\"PobVis\", this.props.PobVisLayout, \"node-children\") }\n                        { this.createButton(\"MultiSelect\", this.props.MultiSelectMode, \"history-forward\") }\n                        <button\n                            title = \"SMT\"\n                            onClick = { this.props.SMTLayout }\n                        >\n                            <svg viewBox=\"0 0 30 30\" className = \"icon big\" >\n                                <text x=\"50%\" alignmentBaseline=\"middle\" textAnchor=\"middle\" y=\"50%\" dominantBaseline=\"middle\" fontWeight=\"light\" stroke=\"none\" fill=\"black\" fontFamily=\"monospace\">Raw</text>\n                            </svg>\n                        </button>\n                        <button\n                            title = \"JSON\"\n                            onClick = { this.props.JSONLayout }\n                        >\n                            <svg viewBox=\"0 0 35 35\" className = \"icon big\" >\n                                <text x=\"50%\" alignmentBaseline=\"middle\" textAnchor=\"middle\" y=\"50%\" dominantBaseline=\"middle\" fontWeight=\"light\" stroke=\"none\" fill=\"black\" fontFamily=\"monospace\">Sort</text>\n                            </svg>\n                        </button>\n                    </section>\n                </article>\n                { this.getNodeDetails() }\n                <ExprMapSelector\n                    name = {this.props.name}\n                    updateRelatedExprMap = {this.updateRelatedExprMap.bind(this)}\n                />\n            </aside>\n        );\n    }\n\n}\nexport default Aside; \n","import * as React from 'react';\nimport { Component } from 'react';\n\nimport Main from './Main';\nimport Aside from './Aside';\nimport {StarModal} from './StarModal';\nimport '../styles/App.css';\nimport { assert } from '../model/util';\nimport {buildExprMap, buildPobLemmasMap} from \"../helpers/network\";\nimport {replaceVarNames, toReadable} from \"../helpers/readable\";\n\nimport Modal from 'react-modal';\ntype Props = {\n    name: string,\n    exp_path: string,\n    mode: \"proof\" | \"replay\" | \"iterative\",\n    problem: string,\n    spacerUserOptions: string,\n    hideBracketsAssoc: boolean,\n    nonStrictForNegatedStrictInequalities: boolean,\n    orientClauses: boolean,\n    varNames: string\n};\n\ntype State = {\n    exp_path: string,\n    state: \"loaded\" | \"loaded iterative\" | \"waiting\" | \"layouting\" | \"error\",\n    trees: any[],\n    runCmd: string,\n    messages_q: string[],\n    nodeSelection: number[],\n    currentTime: number,\n    layout: string,\n    expr_layout: \"SMT\" | \"JSON\",\n    PobLemmasMap: {},\n    ExprMap: {},\n    multiselect: boolean,\n    varNames: string\n    starModalIsOpen: boolean\n}\n\nclass App extends Component<Props, State> {\n\n    state: State = {\n        exp_path: this.props.exp_path,\n        state: \"waiting\",\n        trees: [],\n        runCmd: \"Run command:\",\n        messages_q: [\"\"],\n        nodeSelection: [],\n        currentTime: 0,\n        layout: \"PobVis\",\n        expr_layout: \"SMT\",\n        PobLemmasMap: {},\n        ExprMap: {},\n        multiselect: false,\n        varNames: \"\",\n        starModalIsOpen: false\n    };\n\n    async componentDidMount() {\n        if(this.props.mode === \"iterative\"){\n            // call Spacer on given input problem\n            await this.runSpacer(this.props.problem, this.props.spacerUserOptions, this.props.mode);\n        }\n        else {\n            await this.poke();\n        }\n    }\n\n    async poke() {\n        let message_q = [\"Poking Spacer...\"];\n\n        console.log(\"poking...\")\n        this.setState({\n            state: \"waiting\",\n            messages_q: message_q,\n        });\n\n        const fetchedJSON = await fetch('http://localhost:5000/spacer/poke', {\n            method: 'POST',\n            mode: 'cors',\n            headers: {\n                'Accept': 'application/json',\n                'Content-Type': 'application/json'\n            }, body : JSON.stringify({\n                exp_path: this.state.exp_path,\n            })\n        });\n\n        try {\n            const json = await fetchedJSON.json();\n            console.log(\"backend response:\", json);\n            message_q = [\"Get response from Backend.\"]\n            let tree = json.nodes_list;\n            for (let i = 0; i < Object.keys(tree).length; i++){\n                let rawWithVars = replaceVarNames(tree[i].expr, json.var_names);\n                let readable = toReadable(rawWithVars);\n                tree[i].expr = {\n                    raw: rawWithVars,\n                    readable: readable,\n                    editedRaw: rawWithVars,\n                    editedReadable: readable\n                };\n            }\n            const state = \"loaded\";\n            const PobLemmasMap = buildPobLemmasMap(tree, json.var_names);\n            // NOTE: use varNames in state, not in props. The one in state is returned by the backend.\n            let ExprMap;\n            if (Object.keys(json.expr_map).length === 0) {\n                ExprMap = buildExprMap(tree, json.var_names);\n            }\n            else {\n                ExprMap = json.expr_map;\n            }\n\n            this.setState({\n                trees: [tree],\n                runCmd: json.run_cmd,\n                messages_q: [\"Spacer is \"+json.spacer_state],\n                state: state,\n                PobLemmasMap: PobLemmasMap,\n                ExprMap: ExprMap,\n                varNames: json.var_names\n            });\n            console.log(\"state is set\")\n        } catch (error) {\n            if (error.name === \"SatVisAssertionError\") {\n                throw error;\n            }\n            this.setState({\n                state: \"error\",\n                messages_q: [`Error: ${error[\"message\"]}`],\n            });\n        }\n    }\n\n    async saveExprMap() {\n        await fetch('http://localhost:5000/spacer/save_exprs', {\n            method: 'POST',\n            mode: 'cors',\n            headers: {\n                'Accept': 'application/json',\n                'Content-Type': 'application/json'\n            }, body : JSON.stringify({\n                exp_path: this.state.exp_path,\n                expr_map: JSON.stringify(this.state.ExprMap)\n            })\n        });\n    }\n\n    async runSpacer(problem: string, spacerUserOptions: string, mode: \"proof\" | \"replay\" | \"iterative\") {\n        this.setState({\n            state: \"waiting\",\n            messages_q: [\"Waiting for Spacer...\"],\n        });\n\n        const fetchedJSON = await fetch('http://localhost:5000/spacer/start_iterative', {\n            method: 'POST',\n            mode: 'cors',\n            headers: {\n                'Accept': 'application/json',\n                'Content-Type': 'application/json'\n            },\n            body: JSON.stringify({\n                name: this.props.name,\n                file: problem,\n                spacerUserOptions: spacerUserOptions,\n                varNames: this.props.varNames\n            })\n        });\n\n        try {\n            const json = await fetchedJSON.json();\n            console.log(\"backend response:\", json);\n            if (json.status === \"success\") {\n                const state = (mode === \"iterative\" && json.spacer_state === \"running\") ? \"loaded iterative\" : \"loaded\";\n                const messages_q = [\"Hit Poke to update graph\"];\n                this.setState({\n                    exp_path: json.exp_name,\n                    messages_q: messages_q,\n                    state: state,\n                });\n            } else {\n                assert(json.status === \"error\");\n                const errorMess = json.message;\n                assert(errorMess !== undefined && errorMess !== null);\n                this.setState({\n                    state: \"error\",\n                    messages_q: [errorMess],\n                });\n            }\n        } catch (error) {\n            if (error.name === \"SatVisAssertionError\") {\n                throw error;\n            }\n            this.setState({\n                state: \"error\",\n                messages_q: [`Error: ${error[\"message\"]}`],\n            });\n        }\n    }\n\n    updateNodeSelection(nodeSelection: number[]) {\n        if (this.state.multiselect) {\n            let tempNodeSelection = this.state.nodeSelection.slice(this.state.nodeSelection.length-1).concat(nodeSelection);\n            this.setState({nodeSelection: tempNodeSelection});\n        } else {\n            this.setState({nodeSelection: nodeSelection});\n        }\n    }\n    \n    updateCurrentTime(currentTime: number) {\n        const trees = this.state.trees;\n        assert(trees.length > 0);\n        this.setState({\n            currentTime: currentTime\n        });\n    }\n\n    setPobVisLayout(){\n        this.setState({ layout: \"PobVis\" })\n    }\n    setSatVisLayout(){\n        this.setState({ layout: \"SatVis\" })\n    }\n    setMultiSelect() {\n        if (this.state.multiselect) {\n            if (this.state.nodeSelection.length > 0) {\n                this.setState({\n                    nodeSelection: [this.state.nodeSelection[this.state.nodeSelection.length - 1]]\n                });\n            }\n            else {\n                this.setState({\n                    messages_q: [\"Hit Poke to update graph\"]\n                })\n            }\n        } else {\n            this.setState({\n                messages_q: [\"Select Up to 2 nodes\"]\n            });\n        }\n        this.setState({\n            multiselect: !this.state.multiselect\n        });\n    }\n    setSMTLayout(){\n        this.setState({ expr_layout: \"SMT\" })\n    }\n    setJSONLayout(){\n        this.setState({ expr_layout: \"JSON\" })\n    }\n\n    openStarModal(){\n        this.setState({starModalIsOpen: true});\n    }\n\n    closeStarModal(){\n        this.setState({starModalIsOpen: false});\n    }\n\n    render() {\n        const {\n            state,\n            trees,\n            runCmd,\n            messages_q,\n            nodeSelection,\n            currentTime,\n            layout,\n            expr_layout,\n            PobLemmasMap,\n            ExprMap\n        } = this.state;\n        let tree;\n        let main;\n        if (state === \"loaded\") {\n            assert(trees.length > 0);\n            tree = trees[trees.length - 1];\n            const hL = Object.keys(tree).length;\n            main = (\n                <Main\n                    mode = { this.props.mode }\n                    runCmd = {runCmd}\n                    tree = { tree }\n                    onNodeSelectionChange = { this.updateNodeSelection.bind(this) }\n                    nodeSelection = { nodeSelection }\n                    historyLength = { hL }\n                    currentTime = { currentTime }\n                    onCurrentTimeChange = { this.updateCurrentTime.bind(this) }\n                    layout = { layout }\n                    PobLemmasMap = { PobLemmasMap }\n                />\n            );\n        } else {\n            main = (\n                <main>\n                    <section className= \"slider-placeholder\" />\n                </main>\n            );\n        }\n        return (\n            <div className= \"app\" >\n                <Modal\n                    isOpen={this.state.starModalIsOpen}\n                    onRequestClose={this.closeStarModal.bind(this)}\n                    overlayClassName=\"editor-modal\"\n                    contentLabel=\"Example Modal\"\n                >\n                    <h2>Final invariant</h2>\n                    <button onClick={this.closeStarModal.bind(this)}>Close</button>\n                    {/* <StarModal\n                        exp_path = {this.props.exp_path}\n                        PobLemmasMap = {this.state.PobLemmasMap}\n                        ExprMap = {this.state.ExprMap}\n                        saveExprs = {this.saveExprMap.bind(this)}\n                        /> */}\n                </Modal>\n                { main }\n                <Aside\n                    messages_q = {messages_q}\n                    mode = { this.props.mode }\n                    tree = { tree }\n                    nodeSelection = { nodeSelection }\n                    onUpdateNodeSelection = { this.updateNodeSelection.bind(this) }\n                    onPoke = {this.poke.bind(this)}\n                    onOpenStarModal = {this.openStarModal.bind(this)}\n                    SatVisLayout = { this.setSatVisLayout.bind(this) }\n                    PobVisLayout = { this.setPobVisLayout.bind(this) }\n                    MultiSelectMode= { this.setMultiSelect.bind(this) }\n                    SMTLayout = { this.setSMTLayout.bind(this) }\n                    JSONLayout = { this.setJSONLayout.bind(this) }\n                    PobLemmasMap = { PobLemmasMap }\n                    ExprMap = { ExprMap }\n                    layout = { layout }\n                    expr_layout ={expr_layout}\n                    saveExprs = {this.saveExprMap.bind(this)}\n                    name = {this.state.exp_path}\n                />\n                </div>\n        );\n\n    }\n\n}\n\nexport default App;\n","import * as React from 'react';\nimport App from \"./App\";\nimport '../styles/AppWrapper.css';\n\ntype Props = {\n    name: string,\n    problem: string,\n    exp_path: string,\n    spacerUserOptions: string,\n    mode: \"proof\" | \"replay\" | \"iterative\"\n    hideBracketsAssoc: boolean,\n    nonStrictForNegatedStrictInequalities: boolean, \n    orientClauses: boolean,\n    varNames: string\n};\n\nexport class AppWrapper extends React.Component<Props, {}> {\n    render() {\n        return (\n            <div id=\"appWrapper\">\n                <App \n                    name = {this.props.name}\n                    problem={this.props.problem}\n                    exp_path = {this.props.exp_path}\n                    spacerUserOptions={this.props.spacerUserOptions}\n                    mode={this.props.mode}\n                    hideBracketsAssoc={this.props.hideBracketsAssoc}\n                    nonStrictForNegatedStrictInequalities={this.props.nonStrictForNegatedStrictInequalities}\n                    orientClauses={this.props.orientClauses}\n                    varNames={this.props.varNames}\n                />\n            </div>\n        )\n    }\n}\n\n","import * as React from 'react';\nimport '../styles/NodeMenu.css';\nimport {Link} from 'react-router-dom';\n\ntype Props = {\n};\ntype State = {\n    isFetching: boolean,\n    exps: any[],\n}\n\nexport default class ExpTable extends React.Component<Props, State> {\n    constructor(props) {\n        super(props);\n        this.state = {\n            isFetching: false,\n            exps: []\n        };\n    }\n\n    async componentDidMount() {\n        await this.fetchExps();\n        // this.timer = setInterval(() => this.fetchUsers(), 5000);\n    }\n\n    render() {\n        return (\n                <div>\n                {this.state.exps.map((item, index) => (\n                        <h5 key = {item.name}><Link to={{pathname: `/replay/${item.name}`}} >{item.name}</Link> ${item.done}</h5>\n                ))}\n                <p>{this.state.isFetching ? 'Fetching experiments...' : ''}</p>\n                </div>\n        )\n    }\n    async fetchExps() {\n        this.setState({\n            isFetching: true,\n        });\n\n        const fetchedJSON = await fetch('http://localhost:5000/spacer/fetch_exps', {\n            method: 'POST',\n            mode: 'cors',\n            headers: {\n                'Accept': 'application/json',\n                'Content-Type': 'application/json'\n            }, body : \"\"\n        });\n\n        try {\n            const json = await fetchedJSON.json();\n            console.log(json)\n            this.setState({isFetching: false, exps: json.exps_list})\n        } catch (error) {\n            if (error.name === \"SatVisAssertionError\") {\n                throw error;\n            }\n            this.setState({\n                exps: []\n            });\n        }\n    }\n\n\n}\n","import * as React from 'react';\nimport eye from \"./../resources/icons/singles/eye.svg\"\n\ntype Props = {\n    spacerUserOptions: string,\n    onChangeVariables: (e: React.ChangeEvent<HTMLInputElement>) => void,\n    changeSpacerUserOptions: (spacerUserOptions: string) => void,\n}\n\ntype State = {\n    optionTypeHTML: JSX.Element,\n    optionValue: string,\n    optionName: string,\n    optionType: string,\n    allOptions: {type:string, name: string, value:string}[],\n    showOptions: boolean,\n    options: any[]\n}\n\nclass MenuOptions extends React.Component<Props, State> {\n    state = {\n        optionTypeHTML: <div />,\n        optionType: \"\",\n        optionValue: \"\",\n        optionName: \"\",\n        allOptions: [],\n        showOptions: true,\n        options: []\n    };\n    \n    async componentDidMount() {\n        await this.fetchOptions()\n    }\n    \n    \n    async fetchOptions() {\n\n        const fetchedJSON = await fetch('http://localhost:5000/spacer/fetch_options', {\n            method: 'POST',\n            mode: 'cors',\n            headers: {\n                'Accept': 'application/json',\n                'Content-Type': 'application/json'\n            }, body : \"\"\n        });\n\n        try {\n            const json = await fetchedJSON.json();\n            console.log(json)\n            this.setState({\n                options: json\n            })\n        } catch (error) {\n            console.error(error);\n        }\n    }\n\n    updateSpacerOptions() {\n        let allOptions: any[] = this.state.allOptions;\n        let fullOptionString = \"\";\n        for (let option of allOptions) {\n            if (option.type === \"flag\" || option.dash) {\n                fullOptionString += \"-\" + option.name + \" \";\n            }\n            else {\n                fullOptionString += option.name + \"=\" + option.value + \" \";\n            }\n        }\n        this.props.changeSpacerUserOptions(fullOptionString);\n    }\n\n    storeSpacerOptions(e) {\n        e.preventDefault();\n        e.target.reset();\n        if (this.state.optionName === \"\" || (this.state.optionType !== \"custom\" && this.state.optionValue === \"\")) return;\n        let allOptions: any[] = this.state.allOptions;\n        allOptions.push({\n            name: this.state.optionName,\n            value: this.state.optionValue,\n            type: this.state.optionValue === \"\" ? \"flag\" : this.state.optionType\n        });\n        this.setState({\n            allOptions: allOptions\n        });\n        this.setState({\n            optionName: \"\",\n            optionValue: \"\",\n            optionType: \"\"\n        });\n        this.updateSpacerOptions();\n    }\n\n    displaySpacerOptions() {\n        if (this.props.spacerUserOptions !== \"\") {\n            return this.props.spacerUserOptions.trim().split(\" \");\n        }\n        return []\n    }\n\n    updateOptionValue(e){\n        this.setState({\n            optionValue: e.target.value\n        });\n    }\n\n    getOptions(name:string, type:string) {\n        if (type === \"bool\") {\n            this.setState({\n                optionTypeHTML:\n                    <React.Fragment>\n                        <input type=\"radio\" name={name} value=\"true\" onClick={this.updateOptionValue.bind(this)}/>True\n                        <input type=\"radio\" name={name} value=\"false\" onClick={this.updateOptionValue.bind(this)}/>False\n                        <button className=\"fake-button\" type=\"submit\" value=\"Submit\">+</button>\n                    </React.Fragment>\n            });\n        } else {\n            this.setState({\n                optionTypeHTML:\n                    <React.Fragment>\n                        <input type=\"text\" name={name} placeholder={type} defaultValue={this.state.optionValue} onChange={this.updateOptionValue.bind(this)}/>\n                        <button className=\"fake-button\" type=\"submit\" value=\"Submit\">+</button>\n                    </React.Fragment>\n            });\n        }\n    }\n\n    changeOptionType(e: React.ChangeEvent<HTMLInputElement>){\n        let tempList = this.state.options.filter(option => option[\"name\"] === e.target.value);\n        let type = \"custom\";\n        if (tempList.length > 0) {\n            type = tempList[0][\"type\"];\n        }\n        this.setState({\n            optionName: e.target.value,\n            optionType: type\n        });\n        this.getOptions(e.target.value, type);\n    }\n\n    removeOption(name:string, value:string){\n        let allOptions: {type:string, name: string, value:string}[] = this.state.allOptions;\n        let rIndex = -1;\n        if (value === undefined){\n            name = name.replace(\"-\", \"\");\n            value = \"\";\n        }\n        for (let i = 0; i < allOptions.length; i++){\n            if (allOptions[i].name === name && allOptions[i].value === value){\n                rIndex = i;\n                break;\n            }\n        }\n        if (rIndex === -1) return;\n        allOptions.splice(rIndex, 1);\n        this.updateSpacerOptions();\n    }\n    changeSpacerManualUserOptions(event: React.ChangeEvent<HTMLInputElement>) {\n        const newValue = event.target.value;\n        this.props.changeSpacerUserOptions(newValue);\n    }\n\n    showHideOptions() {\n        this.setState({\n            showOptions: !this.state.showOptions\n        });\n    }\n    render() {\n        console.log(this.state);\n        let selectedOptions = this.displaySpacerOptions();\n        return (\n            <aside>\n                <fieldset className=\"options-card\">\n                    <h3>Z3 Options</h3>\n                    <ul>\n                        <li>\n                            <label htmlFor=\"userOptions\" className=\"form-label\">Additional Spacer options</label>\n                            <button onClick={this.showHideOptions.bind(this)} className=\"showHideButton\" title={\"showHide\"}><img className=\"eyeImage\" src={eye} alt=\"eye\"/></button>\n                            {selectedOptions.length !== 0 && this.state.showOptions && selectedOptions.map((option, key) => {\n                                if (option !== \"\") {\n                                    let kvp = option.split(\"=\");\n                                    let name = kvp[0];\n                                    let value = kvp[1];\n                                    let displayValue = value ? name + \": \" + value : name;\n                                    return (\n                                        <div className=\"displaySpacerOption\" key={key}>\n                                            <span>{displayValue}</span>\n                                            <button className=\"fake-button\" type=\"button\" onClick={this.removeOption.bind(this, name, value)}>x</button>\n                                        </div>\n                                    );\n                                }\n                                return \"\";\n                            })}\n                            <form className=\"tfradio\" name=\"tfradio\" onSubmit={this.storeSpacerOptions.bind(this)}>\n                                <input type=\"text\" className=\"optionsList\" list=\"spacerOptions\" name=\"spacerOptions\" onChange={this.changeOptionType.bind(this)}/>\n                                <datalist id=\"spacerOptions\">\n                                    {this.state.options && this.state.options.length !== 0 && this.state.options.map((option, key) => (\n                                        <option value={option[\"name\"]} key={key}/>\n                                    ))}\n                                </datalist>\n                                {this.state.optionTypeHTML}\n                            </form>\n                        </li>\n                        <label>Or using manual run parameters</label>\n                        <input type=\"text\" name=\"manualRun\" onChange={this.changeSpacerManualUserOptions.bind(this)}/>\n                        <li>\n                            <label htmlFor=\"varOptions\" className=\"form-label\">Variable Designation</label>\n                            <p>Enter a single space separated list of your chosen variables in the order they appear (var1 var2 var3 ..)</p>\n                            <input type=\"text\" name=\"variables\" onChange={this.props.onChangeVariables}/>\n                        </li>\n                    </ul>\n                </fieldset>\n            </aside>\n        );\n    }\n}\n\nexport default MenuOptions;","import * as React from 'react';\nimport {Link} from 'react-router-dom';\nimport '../styles/Menu.css';\nimport * as Monaco from 'monaco-editor'\nimport ExpTable from './ExpTable';\nimport { assert } from '../model/util';\nimport MenuOptions from \"./MenuOptions\";\n\nconst icons = require('../resources/icons/all.svg') as string;\n\ntype Props = {\n    problem: string,\n    problemName: string,\n    spacerUserOptions: string,\n    hideBracketsAssoc: boolean,\n    nonStrictForNegatedStrictInequalities: boolean\n    orientClauses: boolean,\n    onChangeProblem: (problem: string) => void,\n    onChangeProblemName: (problemName: string) => void,\n    onChangeSpacerUserOptions: (spacerUserOptions: string) => void,\n    onChangeHideBracketsAssoc: (newValue: boolean) => void,\n    onChangeNonStrictForNegatedStrictInequalities: (newValue: boolean) => void,\n    onChangeOrientClauses: (newValue: boolean) => void\n    onChangeVariables: (newValue: string) => void\n}\n\nexport class Menu extends React.Component<Props, {}> {\n    // private isChromeOrFirefox = navigator.userAgent.indexOf('Chrome') > -1 || navigator.userAgent.indexOf('Firefox') > -1;\n    private isChromeOrFirefox = true;\n    private fileUpload = React.createRef<HTMLInputElement>();\n    monacoDiv = React.createRef<HTMLDivElement>();\n    monaco: Monaco.editor.IStandaloneCodeEditor | null = null\n\n    componentDidMount() {\n        if (!this.isChromeOrFirefox) {\n            return;\n        }\n        // generate instance of Monaco Editor\n        this.monaco = Monaco.editor.create(this.monacoDiv.current!, {\n            lineNumbers: 'off',\n            roundedSelection: false,\n            scrollBeyondLastLine: false,\n            scrollBeyondLastColumn: 0,\n            minimap: {\n                enabled: false\n            },\n            renderLineHighlight: 'none',\n            hideCursorInOverviewRuler: true,\n            links: false,\n            overviewRulerBorder: false,\n            automaticLayout: true,\n            lineDecorationsWidth: 0,\n            lineNumbersMinChars: 0,\n            wordWrap: 'wordWrapColumn'\n            // fontFamily: \"Monaco\" TODO: decide which font to use. By default, multiple fonts are loaded, which is quite slow\n        });\n        this.monaco.setValue(this.props.problem);\n        this.monaco.getModel()!.onDidChangeContent(() => {\n            this.props.onChangeProblem(this.monaco!.getModel()!.getValue());\n        });\n    }\n\n    componentDidUpdate(prevProps: Props) {\n        assert(this.isChromeOrFirefox);\n        if (this.props.problem !== prevProps.problem) {\n            this.monaco!.setValue(this.props.problem);\n        }\n    }\n\n    render() {\n        if (!this.isChromeOrFirefox) {\n            return (\n                <section className=\"unsupported-message\">\n                    <svg viewBox=\"0 0 24 24\" className=\"icon\">\n                        <use xlinkHref={`${icons}#alert-triangle`}/>\n                    </svg>\n                    <span>Your current browser is not supported. Please use Chrome or Firefox!</span>\n                </section>\n            );\n        }\n\n        return (\n            <section className=\"component-menu\">\n                <h1>Spacer Visualization</h1>\n\n                <section className=\"editor\">\n                    <div className=\"editor-spacer\">\n                        <main>\n                            <div className=\"headline-wrapper\">\n                                <h2>Input</h2>\n                                <small className=\"file-name\">{this.props.problemName}</small>\n                                <button title=\"Pick a new file\" onClick={this.chooseFile.bind(this)}>\n                                    <svg viewBox=\"0 0 24 24\" className=\"icon big\">\n                                        <use xlinkHref={`${icons}#graph-upload`}/>\n                                    </svg>\n                                </button>\n                            </div>\n\n                            <input\n                                ref={this.fileUpload}\n                                type=\"file\"\n                                onChange={this.uploadEncoding.bind(this)}\n                            />\n                            <div ref={this.monacoDiv} className=\"monaco\"></div>\n                        </main>\n\n                        <aside>\n                            <MenuOptions \n                                spacerUserOptions = {this.props.spacerUserOptions}\n                                onChangeVariables = {this.onChangeVariables.bind(this)}\n                                changeSpacerUserOptions={this.props.onChangeSpacerUserOptions.bind(this)}\n                            />\n                            <ExpTable/>\n                        </aside>\n                    </div>\n                </section>\n\n                <section className=\"run-menu\">\n                    <Link to=\"/iterative/\" className=\"fake-button\">Hit and Run</Link>\n                </section>\n            </section>\n        );\n    }\n\n    chooseFile() {\n        if (this.fileUpload.current) {\n            this.fileUpload.current.click();\n        }\n    }\n\n    onChangeVariables(e) {\n        this.props.onChangeVariables(e.target.value);\n    }\n\n    uploadEncoding(event: React.ChangeEvent<HTMLInputElement>) {\n        if (event.target.files !== null && event.target.files.length > 0) {\n            const file = event.target.files[0];\n\n            const reader = new FileReader();\n            // callback which will be executed when readAsText is called\n            reader.onloadend = () => {\n                const text = (reader.result ? reader.result : '') as string;\n                this.props.onChangeProblem(text);\n                this.props.onChangeProblemName(file.name);\n\n            };\n            reader.readAsText(file);\n        }\n    }\n}\n","import * as React from 'react';\nimport * as d3 from 'd3';\nimport SunburstChart, {Node} from \"sunburst-chart\";\nimport {timeDetailedItem} from \"../dashboardTypes\";\n\ntype Props = {\n    data: timeDetailedItem | {},\n    height: number,\n    width: number,\n    className: string,\n    type: string,\n    index: string\n}\n\ntype State = {}\n\nclass TimeChart extends React.Component<Props, State> {\n    private totalTime: number;\n    private readonly palette: string[];\n    constructor(props) {\n        super(props);\n        this.totalTime = -1;\n        this.palette = [\"#023FA5\", \"#7D87B9\", \"#BEC1D4\", \"#D6BCC0\", \"#BB7784\", \"#8E063B\", \"#4A6FE3\", \"#8595E1\", \"#B5BBE3\",\n                \"#E6AFB9\", \"#E07B91\", \"#D33F6A\", \"#11C638\", \"#8DD593\", \"#C6DEC7\", \"#EAD3C6\", \"#F0B98D\", \"#EF9708\",\n                \"#0FCFC0\", \"#9CDED6\", \"#D5EAE7\", \"#F3E1EB\", \"#F6C4E1\", \"#F79CD4\"]\n    }\n    componentDidMount() {\n        this.createSunburst();\n    }\n    componentDidUpdate(prevProps: Readonly<any>, prevState: Readonly<any>, snapshot?: any): void {\n        this.createSunburst();\n    }\n\n    prepareData() {\n        let tmp:Object[] = [];\n        let keys = Object.keys(this.props.data);\n        \n        for (let i = 0; i < keys.length; i++){\n            tmp.push({\n                name: keys[i], \n                size: this.props.data[keys[i]],\n                children: []\n            });\n        }\n        \n        return tmp;\n    }\n    \n    getData(input): Node[] {        \n        let result = {};\n        let last = \"zzzzzzz\";\n        \n        for (let i = 0; i < input.length; i++){\n            let key = input[i].name;\n            let value = input[i].size;\n            \n            if (key.includes(last)){\n                result[last].children.push({\n                    name: key,\n                    size: value,\n                    children: []\n                });\n            }\n            else {\n                result[key] = {\n                    name: key,\n                    size: value,\n                    children: []\n                };\n                last = key\n            }\n        }\n        \n        let resultKeys = Object.keys(result);\n        for (let i = 0; i < resultKeys.length; i++){\n            if (result[resultKeys[i]].children){\n                result[resultKeys[i]].children = this.getData(result[resultKeys[i]].children);\n            }\n        }\n        \n        return Object.values(result);\n    }\n    \n    createSunburst() {\n        if (this.props.type === \"\") d3.select(\".sunburst-viz\").remove();\n        if (this.props.type !== \"\") d3.select(\".\" + this.props.className + \" .sunburst-viz\").remove();\n        let colour = d3.scaleOrdinal()\n            .domain(Object.keys(this.props.data))\n            .range(this.palette);\n        let data: Node[] = this.getData(this.prepareData());\n        const myChart = SunburstChart();\n        myChart.data(data[0])(document.getElementById(this.props.className)!)\n               .width(this.props.width)\n               .height(this.props.height)\n               .color(x => colour(x.name))\n               .label(x => x.name!)\n               .size('size')\n               .tooltipTitle(x => x.name!);\n        \n        if (this.props.type !== \"\"){\n            myChart.showLabels(false);\n        }\n    }\n\n\n    render() {\n        this.totalTime = this.props.data[\"time\"];\n        return (\n          <div className={this.props.className} id={this.props.className}>\n              {this.props.type === \"\" && <h2>Total Time: {this.totalTime}</h2>}\n              {this.props.type !== \"\" && <p>{this.props.index}</p>}\n              \n          </div>  \n        );\n    }\n}\n\nexport default TimeChart;\n","export function potholeToNormal(input) {\n    let words = input.split(\"_\");\n    for (let i = 0; i < words.length; i++){\n        words[i] = words[i][0].toUpperCase() + words[i].substring(1);\n    }\n    \n    return words.join(\" \");\n    \n}","import * as React from 'react';\nimport TimeChart from \"./TimeChart\";\nimport {potholeToNormal} from \"../../helpers/naming\";\nimport {dataItem} from \"../dashboardTypes\";\n\ntype Props = {\n    data: dataItem\n}\n\ntype State = {}\n\nclass IndividualBenchmark extends React.Component<Props, State> {\n    componentDidMount() {\n        console.log(this.props.data);\n    }\n    componentDidUpdate(prevProps: Readonly<any>, prevState: Readonly<any>, snapshot?: any): void {\n        console.log(this.props.data);\n    }\n\n    filterTimeData() {\n        return Object.keys(this.props.data)\n            .filter(function(d) {return d.includes(\"time\")})\n            .reduce((obj, key) => {\n                obj[key] = this.props.data[key];\n                return obj;\n            }, {});\n    }\n    render() {\n        let dataDisplay = [\"result\",\"depth\", \"memory\", \"max_memory\", \"SPACER_num_invariants\", \"SPACER_num_lemmas\",\n            \"SPACER_num_propagations\", \"SPACER_num_active_lemmas\"];\n        let timeData = this.filterTimeData();\n        return (\n          <div className=\"overview\">\n              <div className=\"details\">\n                  <h1>{this.props.data.index}</h1>\n                  {dataDisplay.map((dataKey, key) => (\n                      <p className=\"data-details\" key={key}>{potholeToNormal(dataKey)}: {this.props.data[dataKey]}</p>\n                  ))}\n              </div>\n              <TimeChart \n                  data={timeData}\n                  height={600}\n                  width={600}\n                  className={\"time\"}\n                  type={\"\"}\n                  index={\"\"}\n              />\n          </div>  \n        );\n    }\n}\n\nexport default IndividualBenchmark;","import * as React from 'react';\nimport * as d3 from 'd3';\nimport {dashboardConfig, resultItem} from \"../dashboardTypes\";\n\ntype Props = {\n    key: number,\n    data: resultItem [],\n    config: dashboardConfig,\n    selectBenchmark: (e: resultItem) => void\n}\n\ntype State = {}\n\nclass ResultsOverview extends React.Component<Props, State> {\n    componentDidMount() {\n        this.createResultsOverview();\n    }\n    componentDidUpdate(prevProps: Readonly<any>, prevState: Readonly<any>, snapshot?: any): void {\n        this.createResultsOverview();\n    }\n\n    createResultsOverview() {\n        d3.select(\".results-overview svg\").remove();\n        let data = this.props.data;\n        \n        let results = d3.map(data, function(d) {return d.result;}).keys();\n        \n        let colour = d3.scaleOrdinal()\n            .domain(results)\n            .range(d3.schemeCategory10);\n        \n        let xValue = function(d) {\n            return d.index;\n        };\n        let index = d3.map(data,function(d) {return d.index;}).keys();\n        let xScale = d3.scaleBand()\n            .domain(index)\n            .range([this.props.config.margin.left, this.props.config.width - this.props.config.margin.right]);\n\n        let xMap = function(d) {\n            return xScale(xValue(d))\n        };\n\n        let xAxis = d3.axisBottom(xScale).tickValues([]);\n\n        let yValue = function(d) {\n            return d.SPACER_num_invariants;\n        };\n        let yScale = d3.scaleLinear()\n            .domain([d3.min(data, yValue), d3.max(data, yValue)])\n            .range([this.props.config.graphHeight - this.props.config.margin.top, this.props.config.margin.bottom]);\n\n        let yMap = function(d) {\n            return yScale(yValue(d))\n        };\n\n        let yAxis = d3.axisLeft(yScale);\n\n        let svg = d3.select(\".results-overview\")\n            .append(\"svg\")\n            .attr(\"width\", this.props.config.width)\n            .attr(\"height\", this.props.config.height);\n        svg.append(\"text\")\n            .attr(\"x\", this.props.config.width / 2)\n            .attr(\"y\", this.props.config.margin.top)\n            .attr(\"text-anchor\", \"middle\")\n            .style(\"font-size\", this.props.config.font.title)\n            .style(\"text-decoration\", \"underline\")\n            .text(\"Index x Result x Num of Invariants\");\n        svg.append(\"g\")\n            .attr(\"class\", \"x-axis\")\n            .attr(\"transform\", \"translate(0,\" + (this.props.config.graphHeight - this.props.config.margin.top) + \")\")\n            .call(xAxis);\n        svg.append(\"g\")\n            .attr(\"class\", \"y-axis\")\n            .attr(\"transform\", \"translate(\" + this.props.config.margin.left + \",0)\")\n            .style(\"font-size\", this.props.config.font.axis)\n            .call(yAxis);\n        let g = svg.append(\"g\");\n        g.selectAll(\".dot\")\n            .data(data)\n            .enter()\n            .append('circle')\n            .attr('r', 10)\n            .attr('cx', function(d) {return xMap(d) + xScale.bandwidth() /2})\n            .attr('cy', yMap)\n            .on(\"mouseenter\", function(d) {\n                d3.select(\".overview-tooltip\")\n                    .append(\"text\")\n                    .text(d.index);\n            })\n            .on(\"mouseout\", function(d) {\n                d3.select(\".overview-tooltip\")\n                    .select(\"text\")\n                    .remove();\n            })\n            .on(\"click\", this.props.selectBenchmark)\n            .style(\"fill\", function(d) {return colour(d.result)});\n        g.selectAll(\".result-text\")\n            .data(data)\n            .enter()\n            .append(\"text\")\n            .attr(\"class\", \"label\")\n            .style(\"font-size\", this.props.config.font.label)\n            .attr(\"x\", function(d) {return xMap(d) + (xScale.bandwidth() / 4)})\n            .attr(\"y\", function(d) {return yMap(d) - 25})\n            .attr(\"dy\", \".75em\")\n            .text(function(d) {return d.SPACER_num_invariants});\n        g.selectAll(\"legendDots\")\n            .data(results)\n            .enter()\n            .append(\"circle\")\n            .attr(\"cx\", function(this,d,i) {return this.props.config.margin.left + i*100}.bind(this))\n            .attr(\"cy\", this.props.config.graphHeight + 15)\n            .attr(\"r\", 5)\n            .style(\"fill\", function(d){return colour(d)});\n        g.selectAll(\"legendText\")\n            .data(results)\n            .enter()\n            .append(\"text\")\n            .attr(\"x\", function(this,d,i){return this.props.config.margin.left + 10 + i*100}.bind(this))\n            .attr(\"y\", this.props.config.graphHeight + 20)\n            .text(function(d){return d})\n\n\n\n    }\n\n    render() {\n        return (\n            <div className=\"results-overview\">\n            </div>\n        );\n    }\n}\n\nexport default ResultsOverview\n","import * as React from 'react';\nimport TimeChart from \"./TimeChart\";\nimport {timeDetailedItem} from \"../dashboardTypes\";\n\ntype State = {}\n\ntype Props = {\n    data: timeDetailedItem[]\n}\n\nclass TimeZoom extends React.Component<Props, State> {\n    render() {\n        return (\n            <div>\n                {this.props.data.map((instance, key) => {\n                    return (\n                        <TimeChart\n                            key={key}\n                            data={instance}\n                            height={200}\n                            width={200}\n                            className={\"timezoom\" + key}\n                            type={\"timezoom\"}\n                            index={instance[\"index\"]!}\n                        />\n                    );\n                })}\n                \n            </div>\n        );\n    }\n}\n\nexport default TimeZoom;\n","import * as React from 'react';\nimport * as d3 from 'd3';\nimport {potholeToNormal} from \"../../helpers/naming\";\nimport {dashboardConfig, depthItem, memoryItem, timeItem} from \"../dashboardTypes\";\n\ntype Props = {\n    key: number,\n    data: (depthItem | memoryItem | timeItem) [],\n    config: dashboardConfig,\n    className: string,\n    classText: string,\n    yValue: string,\n    updateZoomView: (type:string) => void\n}\n\ntype State = {}\n\nclass GeneralGraphOverview extends React.Component<Props, State> {\n    componentDidMount() {\n        this.createGraph();\n    }\n    componentDidUpdate(prevProps: Readonly<any>, prevState: Readonly<any>, snapshot?: any): void {\n        this.createGraph();\n    }\n    \n    createGraph() {\n        d3.select(\".\" + this.props.className + \" svg\").remove();\n        \n        if (this.props.data.length === 0) return;\n        let data = this.props.data;\n        let xValue = function(d) {\n            return d.index;\n        };\n        let index = d3.map(data,function(d) {return d.index;}).keys();\n        let xScale = d3.scaleBand()\n            .domain(index)\n            .range([this.props.config.margin.left, this.props.config.width - this.props.config.margin.right]);\n        let xMap = function(d) {\n            return xScale(xValue(d))\n        };\n        let xAxis = d3.axisBottom(xScale).tickValues([]);\n\n        let yValue = function(this,d) {\n            return d[this.props.yValue];\n        }.bind(this);\n        let yScale = d3.scaleLinear()\n            .domain([d3.min(data, yValue), d3.max(data, yValue)])\n            .range([this.props.config.graphHeight - this.props.config.margin.top, this.props.config.margin.bottom]);\n        let yMap = function(d) {\n            return yScale(yValue(d))\n        };\n        let yAxis = d3.axisLeft(yScale);\n\n        let svg = d3.select(\".\" + this.props.className)\n            .append(\"svg\")\n            .attr(\"width\", this.props.config.width)\n            .attr(\"height\", this.props.config.height)\n            .on (\"click\", this.props.updateZoomView);\n        svg.append(\"text\")\n            .attr(\"x\", this.props.config.width / 2)\n            .attr(\"y\", this.props.config.margin.top)\n            .attr(\"text-anchor\", \"middle\")\n            .style(\"font-size\", this.props.config.font.title)\n            .style(\"text-decoration\", \"underline\")\n            .text(\"Index x \" + potholeToNormal(this.props.yValue));\n        svg.append(\"g\")\n            .attr(\"class\", \"x-axis\")\n            .attr(\"transform\", \"translate(0,\" + (this.props.config.graphHeight - this.props.config.margin.top) + \")\")\n            .call(xAxis);\n        svg.append(\"g\")\n            .attr(\"class\", \"y-axis\")\n            .attr(\"transform\", \"translate(\" + this.props.config.margin.left + \",0)\")\n            .style(\"font-size\", this.props.config.font.axis)\n            .call(yAxis);\n        let g = svg.append(\"g\");\n        \n        g.selectAll(\".bar\")\n            .data(data)\n            .enter()\n            .append(\"rect\")\n            .attr(\"class\", \"bar\")\n            .attr(\"x\", xMap)\n            .attr(\"y\", yMap)\n            .attr(\"width\", xScale.bandwidth() - 1)\n            .attr(\"height\", function(this,d) {return (this.props.config.graphHeight - this.props.config.margin.top - yScale(d[this.props.yValue]))}.bind(this));\n\n        g.selectAll(\".\" + this.props.classText)\n            .data(data)\n            .enter()\n            .append(\"text\")\n            .style(\"font-size\", this.props.config.font.label)\n            .attr(\"class\", \"label\")\n            .attr(\"x\", function(d) {return xMap(d)})\n            .attr(\"y\", function(d) {return yMap(d) - 15})\n            .attr(\"dy\", \".75em\")\n            .text(function(this,d) {return d[this.props.yValue]}.bind(this));\n    }\n    render() {\n        return (\n            <div className={this.props.className}>\n            </div>\n\n        );\n    }\n}\n\nexport default GeneralGraphOverview;\n","import * as React from 'react';\nimport './../styles/Dashboard.css';\nimport * as d3 from 'd3';\nimport IndividualBenchmark from \"./DashboardComponents/IndividualBenchmark\";\nimport ResultsOverview from \"./DashboardComponents/ResultsOverview\";\nimport arrow from './../resources/icons/singles/angle-arrow-down.svg'\nimport TimeZoom from \"./DashboardComponents/TimeZoom\";\nimport GeneralGraphOverview from \"./DashboardComponents/GeneralGraphOverview\";\nimport {dashboardConfig, dataItem, depthItem, memoryItem, resultItem, timeItem} from \"./dashboardTypes\";\n\ntype State = {\n    data: dataItem[]\n    selectedBenchmark: string,\n    graphMin: number,\n    graphMax: number,\n    customMode: boolean,\n    customData: {\n        depth: depthItem[],\n        result: resultItem[], \n        memory: memoryItem[], \n        time: timeItem[]\n    },\n    zoomMode: string,\n    dashboardConfig: dashboardConfig\n}\n\ntype Props = {\n    rawData: string\n}\n\nclass Dashboard extends React.Component<Props, State> {\n    private readonly overviewMetrics: string[];\n    constructor(props: Props) {\n        super(props);\n        this.overviewMetrics = [\"depth\", \"memory\", \"time\", \"result\"];\n            this.state = {\n            data: [],\n            selectedBenchmark: \"\",\n            graphMin: 0,\n            graphMax: 30,\n            customMode: false,\n            customData: {\n                depth: [],\n                result: [],\n                memory: [],\n                time: []\n            },\n            zoomMode: \"\",\n            dashboardConfig: {\n                height: 450,\n                width: 1600,\n                graphHeight: 400,\n                margin: {\n                    top: 20,\n                    right: 20,\n                    bottom: 50,\n                    left: 60\n                },\n                font: {\n                    title: \"20px\",\n                    axis: \"20px\",\n                    label: \"14px\"\n                },\n                barNum: 10\n            }\n        };\n    }\n    componentDidMount() {\n        this.loadData();\n        document.addEventListener(\"keydown\", this.handleGraphTranslationKeyboard.bind(this));\n    }\n    \n\n    loadData() {\n        let file = this.props.rawData;\n        let parsedData = d3.csvParse(file, function (d) {\n            d.SPACER_cluster_out_of_gas = +d.SPACER_cluster_out_of_gas;\n            d.SPACER_expand_pob_undef = +d.SPACER_expand_pob_undef;\n            d.SPACER_inductive_level = +d.SPACER_inductive_level;\n            d.SPACER_max_cluster_size = +d.SPACER_max_cluster_size;\n            d.SPACER_max_cvx_reduced_dim = +d.SPACER_max_cvx_reduced_dim;\n            d.depth = +d.depth;\n            d.SPACER_max_query_lvl = +d.SPACER_max_query_lvl;\n            d.SPACER_need_sage = +d.SPACER_need_sage;\n            d.SPACER_num_abstractions = +d.SPACER_num_abstractions;\n            d.SPACER_num_abstractions_failed = +d.SPACER_num_abstractions_failed;\n            d.SPACER_num_abstractions_success = +d.SPACER_num_abstractions_success;\n            d.SPACER_num_active_lemmas = +d.SPACER_num_active_lemmas;\n            d.SPACER_num_cant_abstract = +d.SPACER_num_cant_abstract;\n            d.SPACER_num_ctp_blocked = +d.SPACER_num_ctp_blocked;\n            d.SPACER_num_dim_reduction_success = +d.SPACER_num_dim_reduction_success;\n            d.SPACER_num_invariants = +d.SPACER_num_invariants;\n            d.SPACER_num_is_invariant = +d.SPACER_num_is_invariant;\n            d.SPACER_num_lemma_jumped = +d.SPACER_num_lemma_jumped;\n            d.SPACER_num_lemmas = +d.SPACER_num_lemmas;\n            d.SPACER_num_mbp_failed = +d.SPACER_num_mbp_failed;\n            d.SPACER_num_merge_gen = +d.SPACER_num_merge_gen;\n            d.SPACER_num_merge_gen_failed = +d.SPACER_num_merge_gen_failed;\n            d.SPACER_num_merge_gen_success = +d.SPACER_num_merge_gen_success;\n            d.SPACER_num_no_over_approximate = +d.SPACER_num_no_over_approximate;\n            d.SPACER_num_non_lin = +d.SPACER_num_non_lin;\n            d.SPACER_num_pobs = +d.SPACER_num_pobs;\n            d.SPACER_num_propagations = +d.SPACER_num_propagations;\n            d.SPACER_num_queries = +d.SPACER_num_queries;\n            d.SPACER_num_reach_queries = +d.SPACER_num_reach_queries;\n            d.SPACER_num_refinements = +d.SPACER_num_refinements;\n            d.SPACER_num_reuse_reach_facts = +d.SPACER_num_reuse_reach_facts;\n            d.SPACER_num_sync_cvx_cls = +d.SPACER_num_sync_cvx_cls;\n            d.SPACER_num_under_approximations = +d.SPACER_num_under_approximations;\n            d.SPACER_pob_out_of_gas = +d.SPACER_pob_out_of_gas;\n            d.SPACER_wide_attmpts = +d.SPACER_wide_attmpts;\n            d.SPACER_wide_success = +d.SPACER_wide_success;\n            d.max_memory = +d.max_memory;\n            d.memory = +d.memory;\n            d.time = +d.time;\n            d.time_iuc_solver_get_iuc = +d.time_iuc_solver_get_iuc;\n            d.time_iuc_solver_get_iuc_hyp_reduce1 = +d.time_iuc_solver_get_iuc_hyp_reduce1;\n            d.time_iuc_solver_get_iuc_hyp_reduce2 = +d.time_iuc_solver_get_iuc_hyp_reduce2;\n            d.time_iuc_solver_get_iuc_learn_core = +d.time_iuc_solver_get_iuc_learn_core;\n            d.time_pool_solver_proof = +d.time_pool_solver_proof;\n            d.time_pool_solver_smt_total = +d.time_pool_solver_smt_total;\n            d.time_pool_solver_smt_total_sat = +d.time_pool_solver_smt_total_sat;\n            d.time_pool_solver_smt_total_undef = +d.time_pool_solver_smt_total_undef;\n            d.time_spacer_ctp = +d.time_spacer_ctp;\n            d.time_spacer_init_rules = +d.time_spacer_init_rules;\n            d.time_spacer_init_rules_pt_init = +d.time_spacer_init_rules_pt_init;\n            d.time_spacer_mbp = +d.time_spacer_mbp;\n            d.time_spacer_solve = +d.time_spacer_solve;\n            d.time_spacer_solve_propagate = +d.time_spacer_solve_propagate;\n            d.time_spacer_solve_pt_must_reachable = +d.time_spacer_solve_pt_must_reachable;\n            d.time_spacer_solve_reach = +d.time_spacer_solve_reach;\n            d.time_spacer_solve_reach_children = +d.time_spacer_solve_reach_children;\n            d.time_spacer_solve_reach_cluster = +d.time_spacer_solve_reach_cluster;\n            d.time_spacer_solve_reach_gen_bool_ind = +d.time_spacer_solve_reach_gen_bool_ind;\n            d.time_spacer_solve_reach_gen_merge = +d.time_spacer_solve_reach_gen_merge;\n            d.time_spacer_solve_reach_gen_merge_cvx_cls = +d.time_spacer_solve_reach_gen_merge_cvx_cls;\n            d.time_spacer_solve_reach_gen_wide = +d.time_spacer_solve_reach_gen_wide;\n            d.time_spacer_solve_reach_is_reach = +d.time_spacer_solve_reach_is_reach;\n            return d;\n        });\n        this.setState({\n            data: parsedData\n        })\n        \n    }\n    \n    handleSidebarClick(e:React.MouseEvent<HTMLLIElement>) {\n        let event = e.target as HTMLElement;\n        this.setState({\n            selectedBenchmark: event.innerText\n        });\n    }\n    \n    handleSidebarClickDot(e: resultItem){\n        this.setState({\n            selectedBenchmark: e.index\n        });\n    }\n    \n    handleHomeClick() {\n        this.setState({\n            selectedBenchmark: \"\",\n            customMode: false,\n            customData: {\n                depth: [],\n                time: [],\n                memory: [],\n                result: []\n            },\n            zoomMode: \"\", \n            graphMin: 0,\n            graphMax: 30\n        });\n    }\n    \n    handleClearClick() {\n        this.setState({\n            customData: {\n                depth: [],\n                time: [],\n                memory: [],\n                result: []\n            }\n        });\n    }\n    \n    moveGraphLeft() {\n        if (this.state.graphMin > 0){\n            this.setState({\n                graphMin: this.state.graphMin - 1,\n                graphMax: this.state.graphMax - 1\n            });\n        }\n    }\n    \n    moveGraphRight() {\n        if (this.state.graphMax < this.state.data.length - 1 ){\n            this.setState({\n                graphMin: this.state.graphMin + 1,\n                graphMax: this.state.graphMax + 1\n            });\n        }\n    }\n    \n    moveGraphUp() {\n        if (this.state.graphMin - 10 >= 0 ){\n            this.setState({\n                graphMin: this.state.graphMin - 10,\n                graphMax: this.state.graphMax - 10\n            });\n        }\n    }\n\n    moveGraphDown() {\n        if (this.state.graphMax + 10 < this.state.data.length){\n            this.setState({\n                graphMin: this.state.graphMin + 10,\n                graphMax: this.state.graphMax + 10\n            });\n        }\n    }\n\n    handleGraphTranslationClick(e:React.MouseEvent) {\n        e.preventDefault();\n        let clickEvent = e.target as HTMLImageElement;\n        if (clickEvent.alt === \"left-arrow\"){\n            this.moveGraphLeft();\n        }\n        else if (clickEvent.alt === \"right-arrow\"){\n            this.moveGraphRight();\n        }\n    }\n    \n    handleGraphTranslationKeyboard(e:KeyboardEvent) {\n        e.preventDefault();\n        if  (e.key === \"ArrowLeft\"){\n            this.moveGraphLeft();\n        }\n        else if (e.key === \"ArrowRight\") {\n            this.moveGraphRight();\n        }\n        else if (e.key === \"ArrowDown\") {\n            this.moveGraphDown();\n        }\n        else if (e.key === \"ArrowUp\") {\n            this.moveGraphUp();\n        }\n        \n    }\n    \n    handleCustomClick() {\n        this.setState({\n            customMode: !this.state.customMode\n        });\n        if (this.state.customMode){\n            this.setState({\n                customData: {\n                    depth: [],\n                    time: [],\n                    memory: [],\n                    result: []\n                }\n            });\n        }\n    }\n\n    filterDictionary(keys, custom:boolean=false, index:string=\"\"){\n        let data = this.state.data.slice(this.state.graphMin, this.state.graphMax);\n        if (custom) {\n            data = this.state.data.filter(function(d) {return d.index === index})\n        }\n        let result:Object[] = [];\n        for (let i = 0; i < data.length; i++){\n            result.push({});\n            for (let j = 0; j < keys.length; j ++){\n                result[i][keys[j]] = data[i][keys[j]];\n            }\n        }\n        return result;\n    }\n    \n    addToCustomData(e: React.MouseEvent) {\n        let event = e.target as HTMLLIElement;\n        for (let i = 0; i < this.overviewMetrics.length; i++){\n            let metric = this.overviewMetrics[i];\n            let metricDataKeys = [metric].concat([\"index\"]);\n            if (metric === \"result\") {\n                metricDataKeys.push(\"SPACER_num_invariants\");\n            }\n            let totalData = this.state.customData[metric].concat(this.filterDictionary(metricDataKeys, true, event.innerHTML));\n            \n            if (totalData.length > (this.state.graphMax - this.state.graphMin)){\n                totalData.splice(0,1);\n            }\n            let customDataCopy = this.state.customData;\n            customDataCopy[metric] = totalData;\n            this.setState({\n                customData: customDataCopy\n            });\n        }\n    }\n    \n    setZoomView(type: string) {\n        this.setState({\n            zoomMode: type, \n            graphMin: 0,\n            graphMax: 49\n        });\n    }\n    \n    render() {\n        let benchmarks = d3.map(this.state.data, function(d) {return d.index;}).keys();\n        let selectedBenchmark = this.state.selectedBenchmark;\n        let timeZoomData;\n        if (this.state.zoomMode === \"time\") {\n            let timeKeys = Object.keys(this.state.data[0]).filter(x => x.includes(\"time\"));\n            timeKeys.push(\"index\");\n            timeZoomData = this.filterDictionary(timeKeys);\n        }\n        return (\n          <div className=\"page\">\n                  <div className=\"sidebar\" id=\"sidebar\">\n                  {benchmarks.map((name, key ) => {\n                      if (this.state.customMode){\n                          if (this.state.customData.depth.filter(d => d.index === name).length > 0){\n                              return (<li className=\"selected\" key={key} onClick={this.addToCustomData.bind(this)}>{name}</li>);\n                          }\n                          return (<li key={key} onClick={this.addToCustomData.bind(this)}>{name}</li>);\n                      }\n                      else if (selectedBenchmark) {\n                          if (name === selectedBenchmark) {\n                              return (<li className=\"selected\" key={key}\n                                          onClick={this.handleSidebarClick.bind(this)}>{name}</li>);\n                          }\n                          return (<li key={key} onClick={this.handleSidebarClick.bind(this)}>{name}</li>);\n                          \n                      }\n                      else {\n                          if (key >= this.state.graphMin && key < this.state.graphMax) {\n                              return (<li className=\"selected\" key={key}\n                                          onClick={this.handleSidebarClick.bind(this)}>{name}</li>);\n                          }\n                          return (<li key={key} onClick={this.handleSidebarClick.bind(this)}>{name}</li>);\n                      }\n                  })}\n              </div>\n              <div className=\"visual\">\n                  {this.state.selectedBenchmark !== \"\" &&\n                  <IndividualBenchmark \n                      data={this.state.data.filter(function(d) {return d.index === selectedBenchmark})[0]}\n                  />}\n                  {this.state.selectedBenchmark === \"\" && this.state.zoomMode === \"\" &&\n                  <div className=\"dashboard\">\n                      {this.overviewMetrics.map((type, key) => {\n                          let data;\n                          if (this.state.customMode) {\n                              data = this.state.customData[type];\n                              if (type === \"result\"){\n                                  return (\n                                      <ResultsOverview\n                                          key={key}\n                                          data={data}\n                                          config={this.state.dashboardConfig}\n                                          selectBenchmark={this.handleSidebarClickDot.bind(this)}\n                                      />\n                                  );\n                                  \n                              }\n                          }\n                          else if (type === \"result\"){\n                              data = this.filterDictionary([type].concat([\"index\", \"SPACER_num_invariants\"]));\n                              return (\n                                  <ResultsOverview\n                                      key={key}\n                                      data={data}\n                                      config={this.state.dashboardConfig}\n                                      selectBenchmark={this.handleSidebarClickDot.bind(this)}\n                                  />\n                              );\n                          }\n                          else {\n                              data = this.filterDictionary([\"index\"].concat([type]));\n                          }\n                          return (\n                              <GeneralGraphOverview\n                                  key={key}\n                                  data={data}\n                                  config={this.state.dashboardConfig}\n                                  className={type + \"-overview\"}\n                                  classText={type + \"-text\"}\n                                  yValue={type}\n                                  updateZoomView={this.setZoomView.bind(this, type === \"time\" ? \"time\" : \"\")}\n                              />\n                          );\n                      })}\n                      <img className=\"left-arrow\" src={arrow} alt=\"left-arrow\" onClick={this.handleGraphTranslationClick.bind(this)}/>\n                      <img className=\"right-arrow\" src={arrow} alt=\"right-arrow\" onClick={this.handleGraphTranslationClick.bind(this)}/>\n                  </div>}\n                  {this.state.zoomMode === \"time\" &&\n                  <TimeZoom\n                      data={timeZoomData}\n                      \n                  />}\n              </div>\n              \n              <button className=\"home-button\" onClick={this.handleHomeClick.bind(this)}>Home</button>\n              <button className=\"custom-button\" onClick={this.handleCustomClick.bind(this)}>Custom</button>\n              {this.state.customMode && <button className=\"clear-button\" onClick={this.handleClearClick.bind(this)}>Clear</button>}\n          </div>  \n        );\n    }\n}\n\nexport default Dashboard;\n","import * as React from 'react';\n\ntype Props = {\n    rawData: {name: string, id: string, content: string}[],\n    updateData: (newValue: {name:string, id:string, content:string}) => void\n}\n\ntype State = {\n    rawData: [],\n    file: File | null\n}\n\nclass DashboardLanding extends React.Component<Props, State> {\n    private fileReader: FileReader | undefined;\n    constructor(props) {\n        super(props);\n        this.state = {\n            rawData: [],\n            file: null\n        }\n    }\n    \n    handleFileRead(file: File) {\n        const content = this.fileReader!.result!.toString();\n        let returnObject = {\n            name: file.name,\n            id: Date.now().toString(),\n            content: content!\n        };\n        \n        this.props.updateData(returnObject);\n    }\n    \n    handleFileChosen(e: React.MouseEvent<HTMLButtonElement>) {\n        e.preventDefault();\n        let file = this.state.file;\n        this.fileReader = new FileReader();\n        this.fileReader.onloadend = this.handleFileRead.bind(this, file!);\n        this.fileReader.readAsText(file!);\n    }\n    \n    updateFile(e: React.ChangeEvent<HTMLInputElement>) {\n        this.setState({\n            file: e.target.files![0]\n        });\n    }\n    \n    render() {\n        return (\n            <div className=\"dashboard-menu\">\n                <h1>Spacer Dashboard</h1>\n                <form>\n                <input type=\"file\" accept=\".csv\" onChange={this.updateFile.bind(this)}/>\n                <button type=\"submit\" className=\"fake-button\" onClick={this.handleFileChosen.bind(this)}>Upload</button>\n                </form>\n                <div className=\"file-list\">\n                    <h2>Uploaded Files</h2>\n                    {this.props.rawData.length > 0 && this.props.rawData.map((dataItem, key) => (\n                        <li key={key}>\n                            <span>{dataItem.name}</span><a href={\"#/dashboard/\" + dataItem.id}>Analysis</a>\n                        </li>\n                    ))}\n                </div>\n            </div>\n        );\n    }\n}\n\nexport default DashboardLanding;\n","import * as React from 'react';\nimport { HashRouter, Route} from \"react-router-dom\";\nimport { AppWrapper } from './AppWrapper'\nimport { Menu } from './Menu';\nimport { RouteComponentProps } from 'react-router';\nimport Dashboard from \"./Dashboard\";\nimport DashboardLanding from \"./DashboardLanding\";\nimport { Editor } from \"./Editor\";\ntype State = {\n    problem: string,\n    problemName: string,\n    spacerUserOptions: string,\n    hideBracketsAssoc: boolean,\n    nonStrictForNegatedStrictInequalities: boolean,\n    orientClauses: boolean\n    varNames: string\n    rawData: {name: string, id: string, content: string}[]\n}\n\nexport class AppRouter extends React.Component<{} & RouteComponentProps<{}>, State> {\n\n    state: State = {\n        problem: \"\",\n        problemName: \"\",\n        spacerUserOptions: \"\",\n        hideBracketsAssoc: true,\n        nonStrictForNegatedStrictInequalities: true,\n        orientClauses: true,\n        varNames: \"\",\n        rawData: []\n    };\n\n    render() {\n        return (\n            <HashRouter>\n                <Route path=\"/\" exact render={() => \n                    <Menu \n                        problem={this.state.problem}\n                                problemName={this.state.problemName}\n                                spacerUserOptions={this.state.spacerUserOptions}\n                                hideBracketsAssoc={this.state.hideBracketsAssoc}\n                                nonStrictForNegatedStrictInequalities={this.state.nonStrictForNegatedStrictInequalities}\n                                orientClauses={this.state.orientClauses}\n                                onChangeProblem={this.changeProblem.bind(this)}\n                                onChangeProblemName={this.changeProblemName.bind(this)}\n                                onChangeSpacerUserOptions={this.changeSpacerUserOptions.bind(this)}\n                                onChangeHideBracketsAssoc={this.changeHideBracketsAssoc.bind(this)}\n                                onChangeNonStrictForNegatedStrictInequalities={this.changeNonStrictForNegatedStrictInequalities.bind(this)}\n                                onChangeOrientClauses={this.changeOrientClauses.bind(this)}\n                                onChangeVariables={this.changeVariables.bind(this)}\n                    />\n                }/>\n                <Route path=\"/replay/:exp_id\" render={({match}) => \n                    this.appComponent(\"replay\", match.params.exp_id)\n                }/>\n                <Route path=\"/iterative/\" render={() => \n                    this.appComponent(\"iterative\", \"\")\n                }/>\n                <Route exact path=\"/dashboard/\" render={() =>\n                    <DashboardLanding \n                        rawData={this.state.rawData}\n                        updateData={this.changeRawData.bind(this)}\n                    />\n                }/>\n                <Route path=\"/dashboard/:fileId\" render={({match}) => \n                    this.displayVisualization(match.params.fileId)\n                }/>\n                <Route exact path=\"/editor/\" render={() =>\n                    <Editor\n                        name=\"\"\n                        input=\"\"\n                        isModal ={false}\n                    />\n                }/>\n            </HashRouter>\n        );\n    }\n\n    appComponent(mode: \"replay\" | \"iterative\", exp_path: string) {\n        const spacerUserOptions = `${this.state.spacerUserOptions}`;\n        return <AppWrapper\n        name={this.state.problemName}\n        exp_path ={exp_path}\n        mode={mode}\n        problem={this.state.problem!}\n        spacerUserOptions={spacerUserOptions}\n        hideBracketsAssoc={this.state.hideBracketsAssoc}\n        nonStrictForNegatedStrictInequalities={this.state.nonStrictForNegatedStrictInequalities}\n        orientClauses={this.state.orientClauses}\n        varNames={this.state.varNames}\n        />\n    }\n    \n    displayVisualization(fileId: string) {\n        let rawData = this.state.rawData.filter(x => x.id === fileId)[0];\n        if (rawData) {\n            return (\n                <Dashboard\n                    rawData={rawData.content}\n                />\n            );\n        }\n    }\n\n    changeProblem(problem: string) {\n        this.setState({problem: problem});\n    }\n    changeProblemName(problemName: string) {\n        this.setState({problemName: problemName});\n    }\n    changeSpacerUserOptions(spacerUserOptions: string) {\n        this.setState({spacerUserOptions: spacerUserOptions});\n    }\n    changeHideBracketsAssoc(newValue: boolean) {\n        this.setState({hideBracketsAssoc: newValue});\n    }\n    changeNonStrictForNegatedStrictInequalities(newValue: boolean) {\n        this.setState({nonStrictForNegatedStrictInequalities: newValue});\n    }\n    changeOrientClauses(newValue: boolean) {\n        this.setState({orientClauses: newValue});\n    }\n    changeVariables(newValue: string){\n        this.setState({\n            varNames: newValue\n        });\n    }\n    \n    changeRawData(newValue: {name:string, id:string, content:string}){\n        let currentList = this.state.rawData;\n        let newList = currentList.concat([newValue]);\n        this.setState({\n            rawData: newList\n        });\n    }\n}\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.1/8 is considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl)\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready.then(registration => {\n      registration.unregister();\n    });\n  }\n}\n","import * as React from 'react';\nimport * as ReactDOM from 'react-dom';\nimport './index.css';\nimport { AppRouter } from './components/Router';\nimport * as serviceWorker from './serviceWorker';\n\nReactDOM.render(\n  <AppRouter/>,\n  document.getElementById('root')\n);\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.unregister();\n","module.exports = __webpack_public_path__ + \"static/media/all.496082da.svg\";","class SatVisAssertionError extends Error {\n    constructor(message) {\n      super(message);\n      this.name = \"SatVisAssertionError\";\n    }\n  }\n\nexport function assert(condition, message=\"\") {\n    if (!condition)\n        throw new SatVisAssertionError('Assertion failed: ' + (message || ''));\n};","// export interface SExp extends Array<string | SExp> {}\nexport interface SExpNode {\n  token: string,\n  startLine: number,\n  startOffset: number,\n  endLine: number,\n  endOffset: number\n}\nexport interface SExp extends Array<SExpNode | SExp> {}\nexport function parse(input: string): SExp {\n  console.log(\"**\"+input+\"//\");\n  let i = 0;\n  let line_number = 0;\n  let offset = 0;\n  const impl = () => {\n    while (input[i].match(/\\r\\n|\\r|\\n/)) {\n      line_number++; // skip newlines\n      i++;\n    }\n    while (input[i].match(/\\s/)) {\n      i++; // skip whitespaces\n      offset++;\n    }\n    if (input[i] === \"(\") {\n      // drop '('\n      i++;\n    } else {\n      throw new Error(\n        `Input is not valid: unexpected '${input[i]}' at the beginning`\n      );\n    }\n\n    const result: SExp = [];\n    let node = \"\";\n    let startLine = line_number;\n    let startOffset = offset;\n    let endLine = line_number;\n    let endOffset = offset;\n    while (true) {\n      offset++;\n      let c = input[i++];\n\n      if (!c) {\n        if (!node) {\n          break;\n        } else {\n          throw new Error(\n            `Input is not valid: unexpected '${node}' at the end`\n          );\n        }\n      }\n\n      if (c === \")\") {\n        if (node) result.push({\n          \"token\": node, \n          \"startLine\": startLine,\n          \"startOffset\": startOffset,\n          \"endLine\": line_number,\n          \"endOffset\": offset,\n        });\n        break;\n      } else if (c === \"\\\\\") {\n        c += input[i++];\n        node += c;\n      } else if (c.match(/\\r\\n|\\r|\\n/)) {\n        if (node) {\n          result.push({\n          \"token\": node, \n          \"startLine\": startLine,\n          \"startOffset\": startOffset,\n          \"endLine\": line_number,\n          \"endOffset\": offset,\n          });\n          node = \"\";\n        }\n        line_number++;\n        offset = 0;\n      } else if (c.match(/\\s/)) {\n        if (node) result.push({\n          \"token\": node, \n          \"startLine\": startLine,\n          \"startOffset\": startOffset,\n          \"endLine\": line_number,\n          \"endOffset\": offset,\n        });\n        node = \"\";\n        startLine = line_number;\n        startOffset = offset;\n      } else if (c === \"(\") {\n        i--;\n        offset--;\n        result.push(impl());\n      } else if (c === '\"') {\n        node += c;\n        // parse string\n        while ((c = input[i++])) {\n          // skip \\\"\n          if (c === \"\\\\\" && input[i] === '\"') {\n            c += input[i++];\n          }\n          node += c;\n          if (c === '\"') break;\n        }\n      } else {\n        node += c;\n      }\n    }\n\n    return result;\n  };\n\n  return impl();\n}\n\nfunction isString(node: any): node is string {\n  return typeof node === \"string\";\n}\n\n//dump checker since typescript doesnt have fancy typechecker api\nexport function isSExpNode(node: any): node is SExpNode {\n  return \"startOffset\" in node;\n}\n\n// export function beautify(input: string | SExp): string {\n//   const sExp = isString(input) ? parse(input) : input;\n\n//   const stack: Array<{ idx: number; exp: SExp }> = [{ idx: 0, exp: sExp }];\n//   let indent = 0;\n\n//   let result = \"\";\n//   const print = (str: string) => {\n//     result += \"  \".repeat(indent) + str + \"\\n\";\n//   };\n\n//   while (stack.length) {\n//     const node = stack.pop()!;\n\n//     if (node.idx === 0 && node.exp.length < 5 && node.exp.every(isSExpNode)) {\n//       // very short case, just print and it's done\n//       print(`(${node.exp.join(\" \")})`);\n//       continue;\n//     }\n\n//     let done = false;\n\n//     while (true) {\n//       if (node.idx >= node.exp.length) {\n//         done = true;\n//         break;\n//       }\n\n//       const child = node.exp[node.idx++];\n\n//       if (node.idx === 1) {\n//         print(`(${child}`);\n//         indent++;\n//       } else if (isSExpNode(child)) {\n//         print(child.token);\n//       } else {\n//         stack.push(node);\n//         stack.push({ idx: 0, exp: child });\n//         break;\n//       }\n//     }\n\n//     if (done) {\n//       indent--;\n//       print(\")\");\n//     }\n//   }\n\n//   return result.trim();\n// }\n","module.exports = __webpack_public_path__ + \"static/media/angle-arrow-down.412f3289.svg\";"],"sourceRoot":""}