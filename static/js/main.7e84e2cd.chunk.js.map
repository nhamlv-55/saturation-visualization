{"version":3,"sources":["resources/icons/singles/eye.svg","components/Slider.tsx","model/util.ts","helpers/network.ts","components/Graph.tsx","helpers/navigation.ts","components/Main.tsx","helpers/readable.ts","components/NodeDetails.tsx","helpers/diff.ts","components/ExprMapSelector.tsx","components/Aside.tsx","components/App.tsx","components/AppWrapper.tsx","components/ExpTable.tsx","helpers/spacerOptions.ts","components/MenuOptions.tsx","components/Menu.tsx","components/DashboardComponents/TimeChart.tsx","helpers/naming.ts","components/DashboardComponents/IndividualBenchmark.tsx","components/DashboardComponents/ResultsOverview.tsx","components/DashboardComponents/TimeZoom.tsx","components/DashboardComponents/GeneralGraphOverview.tsx","components/Dashboard.tsx","components/DashboardLanding.tsx","components/Router.tsx","serviceWorker.js","index.tsx","resources/icons/all.svg","resources/icons/singles/angle-arrow-down.svg"],"names":["module","exports","icons","require","Slider","React","slider","render","this","props","historyLength","currentTime","onCurrentTimeChange","console","log","className","disabled","enabled","onClick","viewBox","xlinkHref","ref","type","min","max","value","onChange","getSliderValue","current","parseInt","SatVisAssertionError","Error","constructor","message","super","name","assert","condition","styleTemplates","lemmaColours","buildPobLemmasMap","tree","varList","ExprMap","Map","nodeID","node","exprID","expr","PobLemmasMap","event_type","lemmaExprID","level","pobID","Array","existPrevLemma","lemma","prev_min","push","buildExprMap","exprMapItem","raw","readable","lhs","edited","changed","toVisNode","style","nodeSelection","finalInv","color","styleData","isMarked","includes","finalColor","border","markedStyle","defaultStyle","background","highlight","highlightStyle","id","shape","fixed","Graph","state","metaPressed","network","networkNodes","DataSet","networkEdges","graphContainer","boundKeyupHandler","keyupHandler","bind","componentDidMount","generateNetwork","updateNetwork","layout","fit","window","addEventListener","componentWillUnmount","removeEventListener","componentDidUpdate","prevProps","Network","nodes","edges","physics","interaction","multiselect","hierarchical","direction","sortMethod","on","clickEvent","a","length","clickedNodeId","onNodeSelectionChange","onlyUpdateStyles","visLayout","PobVisTree","treeCloned","JSON","parse","stringify","parent","siblings","children","same_as_sibl","identical_sibl","sibl","to_be_vis","childID","new_children","PobVisLayout","ATree","nodeHasBeenSelected","currentNodeExprID","Number","MIN_SAFE_INTEGER","InvList","map","exprInfo","start","end","visNodes","visEdges","edgeId","visNode","filter","x","findIndex","visEdge","parentNodeId","hidden","arrows","from","to","smooth","toVisEdge","clear","add","event","closest_node","nodeId","currentNode","body","closestNode","min_distance","MAX_SAFE_INTEGER","idx","distance","y","edge","fromId","toId","closestNodes","findClosestNode","key","ReactModal","setAppElement","Main","runCmd","readOnly","negateMap","logSym","toReadable","parseResult","lst","sep","splice","indexOf","isArray","replaceVarNames","newList","split","i","regex","RegExp","replace","negate","compOp","keys","Object","getCompOp","getOp","getCleanExprList","exprList","resultExprList","trim","NodeDetails","keep","type_map","learningFlag","learningErrorFlag","transformationFlag","transformationErrorFlag","possibleTransformations","transformationSelected","node_to_string","n","is_root","args","nl","arg","getLemmaList","lemma_list","lemmas","colorIndex","lemmaStyle","relatedExprMap","exprData","implies","forEach","literal","lemmaColour","addLemma","lemmaId","e","cleanExprOperators","target","innerText","index","getIndexOfLiteral","op","lhsFinal","rhsFinal","result","reorder","saveExprs","forceUpdate","learnTransformation","setState","fetch","method","mode","headers","exp_path","response","status","json","responseJson","possiblePrograms","transformExprs","selectedProgram","responseData","tExprMap","updateTransformationSelected","node1","node2","expr1","expr2","expr1List","expr2List","Math","lineDiff","diff","added","removed","concat","toDiff","part","additional_info","expr_layout","ast_json","classNameTop","classNameBottom","transformation","xmlAst","humanReadableAst","ExprMapSelector","matchingFiles","exps","selected","fetchExps","getMatchingFiles","getMatchingExprMap","data","exp","match","fetchedJSON","updateRelatedExprMap","expr_map","exps_list","updateSelected","Aside","createButton","title","svg","getNodeDetails","exprMap","messages_q","mess","onPoke","SatVisLayout","MultiSelectMode","SMTLayout","alignmentBaseline","textAnchor","dominantBaseline","fontWeight","stroke","fill","fontFamily","JSONLayout","App","Component","trees","varNames","runSpacer","problem","spacerUserOptions","poke","message_q","nodes_list","rawWithVars","var_names","run_cmd","spacer_state","saveExprMap","file","exp_name","undefined","errorMess","updateNodeSelection","tempNodeSelection","slice","updateCurrentTime","setPobVisLayout","setSatVisLayout","setMultiSelect","setSMTLayout","setJSONLayout","main","hL","onUpdateNodeSelection","AppWrapper","hideBracketsAssoc","nonStrictForNegatedStrictInequalities","orientClauses","ExpTable","isFetching","item","pathname","done","options","MenuOptions","optionTypeHTML","optionType","optionValue","optionName","allOptions","showOptions","updateSpacerOptions","fullOptionString","option","changeSpacerUserOptions","storeSpacerOptions","preventDefault","reset","displaySpacerOptions","updateOptionValue","getOptions","placeholder","defaultValue","changeOptionType","tempList","removeOption","rIndex","changeSpacerManualUserOptions","newValue","showHideOptions","selectedOptions","htmlFor","src","eye","alt","kvp","displayValue","onSubmit","list","onChangeVariables","Menu","isChromeOrFirefox","fileUpload","monacoDiv","monaco","Monaco","create","lineNumbers","roundedSelection","scrollBeyondLastLine","scrollBeyondLastColumn","minimap","renderLineHighlight","hideCursorInOverviewRuler","links","overviewRulerBorder","automaticLayout","lineDecorationsWidth","lineNumbersMinChars","wordWrap","setValue","getModel","onDidChangeContent","onChangeProblem","getValue","problemName","chooseFile","uploadEncoding","onChangeSpacerUserOptions","click","files","reader","FileReader","onloadend","text","onChangeProblemName","readAsText","TimeChart","totalTime","palette","createSunburst","prevState","snapshot","prepareData","tmp","size","getData","input","last","resultKeys","values","d3","remove","colour","domain","range","myChart","SunburstChart","document","getElementById","width","height","label","tooltipTitle","showLabels","potholeToNormal","words","toUpperCase","substring","join","IndividualBenchmark","filterTimeData","d","reduce","obj","timeData","dataKey","ResultsOverview","createResultsOverview","results","xScale","config","margin","left","right","xMap","xValue","xAxis","tickValues","yValue","SPACER_num_invariants","yScale","graphHeight","top","bottom","yMap","yAxis","append","attr","font","call","axis","g","selectAll","enter","bandwidth","select","selectBenchmark","TimeZoom","instance","GeneralGraphOverview","createGraph","updateZoomView","classText","Dashboard","overviewMetrics","selectedBenchmark","graphMin","graphMax","customMode","customData","depth","memory","time","zoomMode","dashboardConfig","barNum","loadData","handleGraphTranslationKeyboard","rawData","parsedData","SPACER_cluster_out_of_gas","SPACER_expand_pob_undef","SPACER_inductive_level","SPACER_max_cluster_size","SPACER_max_cvx_reduced_dim","SPACER_max_query_lvl","SPACER_need_sage","SPACER_num_abstractions","SPACER_num_abstractions_failed","SPACER_num_abstractions_success","SPACER_num_active_lemmas","SPACER_num_cant_abstract","SPACER_num_ctp_blocked","SPACER_num_dim_reduction_success","SPACER_num_is_invariant","SPACER_num_lemma_jumped","SPACER_num_lemmas","SPACER_num_mbp_failed","SPACER_num_merge_gen","SPACER_num_merge_gen_failed","SPACER_num_merge_gen_success","SPACER_num_no_over_approximate","SPACER_num_non_lin","SPACER_num_pobs","SPACER_num_propagations","SPACER_num_queries","SPACER_num_reach_queries","SPACER_num_refinements","SPACER_num_reuse_reach_facts","SPACER_num_sync_cvx_cls","SPACER_num_under_approximations","SPACER_pob_out_of_gas","SPACER_wide_attmpts","SPACER_wide_success","max_memory","time_iuc_solver_get_iuc","time_iuc_solver_get_iuc_hyp_reduce1","time_iuc_solver_get_iuc_hyp_reduce2","time_iuc_solver_get_iuc_learn_core","time_pool_solver_proof","time_pool_solver_smt_total","time_pool_solver_smt_total_sat","time_pool_solver_smt_total_undef","time_spacer_ctp","time_spacer_init_rules","time_spacer_init_rules_pt_init","time_spacer_mbp","time_spacer_solve","time_spacer_solve_propagate","time_spacer_solve_pt_must_reachable","time_spacer_solve_reach","time_spacer_solve_reach_children","time_spacer_solve_reach_cluster","time_spacer_solve_reach_gen_bool_ind","time_spacer_solve_reach_gen_merge","time_spacer_solve_reach_gen_merge_cvx_cls","time_spacer_solve_reach_gen_wide","time_spacer_solve_reach_is_reach","handleSidebarClick","handleSidebarClickDot","handleHomeClick","handleClearClick","moveGraphLeft","moveGraphRight","moveGraphUp","moveGraphDown","handleGraphTranslationClick","handleCustomClick","filterDictionary","custom","j","addToCustomData","metric","metricDataKeys","totalData","innerHTML","customDataCopy","setZoomView","timeZoomData","benchmarks","timeKeys","arrow","DashboardLanding","fileReader","handleFileRead","content","toString","returnObject","Date","now","updateData","handleFileChosen","updateFile","accept","dataItem","href","AppRouter","path","exact","changeProblem","changeProblemName","onChangeHideBracketsAssoc","changeHideBracketsAssoc","onChangeNonStrictForNegatedStrictInequalities","changeNonStrictForNegatedStrictInequalities","onChangeOrientClauses","changeOrientClauses","changeVariables","appComponent","params","exp_id","changeRawData","displayVisualization","fileId","Boolean","location","hostname","ReactDOM","navigator","serviceWorker","ready","then","registration","unregister"],"mappings":"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","file":"static/js/main.7e84e2cd.chunk.js","sourcesContent":["module.exports = __webpack_public_path__ + \"static/media/eye.bf3c357b.svg\";","import * as React from 'react';\n\nimport '../styles/Slider.css';\n\n\nconst icons = require('../resources/icons/all.svg') as string;\n\ntype Props = {\n  historyLength: number,\n  currentTime: number,\n  onCurrentTimeChange: (newState: number) => void,\n  enabled: boolean\n};\nexport default class Slider extends React.Component<Props, {}> {\n\n  private slider = React.createRef<HTMLInputElement>();\n\n  render() {\n    const {historyLength, currentTime, onCurrentTimeChange} = this.props;\n      console.log(\"historyLength\", historyLength)\n    return (\n      <section className=\"component-slider\">\n\n        <button disabled={!this.props.enabled || currentTime <= 0} onClick={() => onCurrentTimeChange(currentTime - 1)}>\n          <svg viewBox=\"0 0 24 24\" className=\"icon\">\n            <use xlinkHref={`${icons}#history-back`}/>\n          </svg>\n        </button>\n\n        <section className=\"wrapper\">\n          <input\n            ref={this.slider}\n            type=\"range\"\n            min={0}\n            max={historyLength}\n            value={currentTime}\n            disabled={!this.props.enabled}\n            onChange={() => onCurrentTimeChange(this.getSliderValue())}\n          />\n        </section>\n\n        <button disabled={!this.props.enabled || currentTime >= historyLength} onClick={() => onCurrentTimeChange(currentTime + 1)}>\n          <svg viewBox=\"0 0 24 24\" className=\"icon\">\n            <use xlinkHref={`${icons}#history-forward`}/>\n          </svg>\n        </button>\n\n      </section>\n    );\n  }\n\n  // HELPERS ///////////////////////////////////////////////////////////////////////////////////////////////////////////\n\n  getSliderValue(): number {\n    return this.slider.current ? parseInt(this.slider.current.value, 10) : 0;\n  }\n\n}\n","class SatVisAssertionError extends Error {\n    constructor(message) {\n      super(message);\n      this.name = \"SatVisAssertionError\";\n    }\n  }\n\nexport function assert(condition, message=\"\") {\n    if (!condition)\n        throw new SatVisAssertionError('Assertion failed: ' + (message || ''));\n};","const styleTemplates = require('../resources/styleTemplates');\n\nexport const lemmaColours = [\n    \"#e6194B\",\n    \"#f58231\",\n    \"#3cb44b\",\n    \"#42d4f4\",\n    \"#000075\",\n    \"#469990\",\n    \"#911eb4\",\n    \"#f032e6\",\n    \"#fabebe\",\n    \"#800000\",\n];\n\n//BUILD POB LEMMAS MAP////////////////////\nexport function buildPobLemmasMap(tree: any, varList: string[]): any{\n    // construct exprID->expr map\n    let ExprMap = new Map<number, string>();\n    for (const nodeID in tree) {\n        const node = tree[nodeID];\n        ExprMap[node.exprID] = node.expr;\n    }\n\n    // construct PobExprID->a list of lemmas\n    let PobLemmasMap = {};\n    for (const nodeID in tree) {\n        let node = tree[nodeID];\n        if (node.event_type !== \"EType.ADD_LEM\") {\n            continue\n        }\n        const lemmaExprID = node.exprID;\n        const level = node.level;\n        const pobID = node.pobID;\n        if (!(pobID in PobLemmasMap)) {\n            PobLemmasMap[pobID] = new Array<{}>();\n        }\n\n        //traverse the list, if lemmaExprID is already in the list, update its min max\n        let existPrevLemma = false;\n        for (const lemma of PobLemmasMap[pobID]) {\n            if (lemma[0] === lemmaExprID) {\n                existPrevLemma = true;\n                let prev_min = lemma[1];\n                let prev_max = lemma[2];\n\n                if (level > prev_max || level === \"oo\") {\n                    lemma[2] = level\n                }\n                if (level < prev_min) {\n                    lemma[1] = level\n                }\n                break\n            }\n        }\n\n        if (!existPrevLemma) {\n            PobLemmasMap[node.pobID].push([lemmaExprID, level, level])\n        }\n    }\n    return PobLemmasMap\n}\n\n\n//BUILD EXPR MAP////////////////////////\nexport function buildExprMap(tree: any, varList: string[]): any{\n    let ExprMap = new Map<number, Object>();\n    for (const nodeID in tree) {\n        const node = tree[nodeID];\n        const exprMapItem = {\n            raw: node.expr.raw,\n            readable: node.expr.readable,\n            lhs: [], \n            edited: node.expr.readable,\n            changed: false\n        };\n        ExprMap[node.exprID] = exprMapItem;\n    }\n    return ExprMap\n\n}\n\n\nexport function PobVisLayout(tree): any{\n    let treeCloned = JSON.parse(JSON.stringify(tree));\n\n    for (const nodeID in treeCloned){\n        let node = treeCloned[nodeID];\n        if(node.event_type !== \"EType.EXP_POB\"){\n            node.to_be_vis = false;\n            continue\n        }\n\n        let parent = treeCloned[node.parent];\n        let siblings = parent.children;\n        let same_as_sibl = false;\n        let identical_sibl;\n        for(const siblID of siblings){\n\n            const sibl = treeCloned[siblID];\n            if(sibl.nodeID !== node.nodeID && sibl.exprID === node.exprID){\n                same_as_sibl = true;\n                identical_sibl = sibl;\n                break\n            }\n\n        }\n        if(same_as_sibl){\n            // I will disappear\n            node.to_be_vis = false;\n\n            // point all my children to my sibling\n            for(const childID of node.children){\n                treeCloned[childID].parent = identical_sibl.nodeID;\n                identical_sibl.children.push(childID)\n            }\n            //change my parent's children\n            let new_children = new Array<number>();\n            for (const childID of siblings){\n                if(childID !== node.nodeID){\n                    new_children.push(childID)\n                }\n            }\n            parent.children = new_children\n        }\n    }\n\n    return treeCloned\n}\n\nexport function toVisNode(node: any, style: string, nodeSelection, finalInv: number, color:number = -1): any {\n    const styleData = styleTemplates[style];\n    const isMarked = nodeSelection.includes(node.nodeID);\n\n    let finalColor  = {\n        border : isMarked ? styleData.markedStyle.border : styleData.defaultStyle.border,\n            background : isMarked ? styleData.markedStyle.background : styleData.defaultStyle.background,\n            highlight : {\n            border : styleData.highlightStyle.border,\n                background : styleData.highlightStyle.background\n        }\n    };\n    \n    if (style === \"lemma\" && color !== -1) {\n        finalColor = {\n            border: lemmaColours[color],\n            background: lemmaColours[color],\n            highlight: {\n                border: lemmaColours[color],\n                background: lemmaColours[color]\n            }\n        }\n    }\n    return {\n        id: node.nodeID,\n        shape: finalInv > 0 ? finalInv > 1 ? \"hexagon\" : \"star\" : styleData.shape,\n        fixed: true,\n        color: finalColor\n    };\n}\n\n\nexport function toVisEdge(edgeId: number, parentNodeId: number, nodeID: number, hidden: boolean) {\n    return {\n        id: edgeId,\n        arrows: \"to\",\n        color: {\n            color: \"#dddddd\",\n            highlight: \"#f8cfc1\",\n        },\n        from: parentNodeId,\n        to: nodeID,\n        smooth: false,\n        hidden: hidden\n    }\n}\n\nexport function getSliderValue(slider): number {\n    return slider.current ? parseInt(slider.current.value, 10) : 0;\n}\n","import * as React from 'react';\nimport { DataSet, Network, Node, Edge } from 'vis'\n\nimport '../styles/Graph.css'\nimport { assert } from '../model/util';\nimport {PobVisLayout, toVisEdge, toVisNode} from \"../helpers/network\";\nimport {findClosestNode} from \"../helpers/navigation\";\n\n\ntype Props = {\n    tree: any,\n    onNodeSelectionChange: (selection: number[]) => void,\n    nodeSelection: number[],\n    currentTime: number,\n    layout: string,\n    PobLemmasMap: any,\n};\n\ntype State = {\n    metaPressed: boolean,\n};\n\nexport default class Graph extends React.Component<Props, {}> {\n\n    state: State = {\n        metaPressed: false,\n    };\n\n    network: Network | null = null;\n    networkNodes = new DataSet<Node>([]);\n    networkEdges = new DataSet<Edge>([]);\n    graphContainer = React.createRef<HTMLDivElement>();\n    boundKeyupHandler =  this.keyupHandler.bind(this);\n   \n    componentDidMount() {\n        this.generateNetwork();\n        this.updateNetwork(false, this.props.layout);\n        this.network!.fit();\n        window.addEventListener(\"keyup\", this.boundKeyupHandler, false);\n    }\n\n    componentWillUnmount() {\n        window.removeEventListener(\"keyup\", this.boundKeyupHandler, false);\n    }\n\n    componentDidUpdate(prevProps: Props) {\n        this.updateNetwork(false, this.props.layout);\n    }\n\n    render() {\n        return (\n            <section className= \"component-graph\" ref = { this.graphContainer } >\n                <canvas/>\n            </section>\n        );\n    }\n\n    generateNetwork() {\n        console.log(\"I am Graph. I receive:\", this.props)\n        assert(this.graphContainer.current);\n        assert(!this.network); // should only be called once\n\n        this.network = new Network(this.graphContainer.current!, {\n            nodes: this.networkNodes,\n            edges: this.networkEdges\n        }, {\n            physics: false,\n            interaction: {\n                multiselect: false\n            },layout: {\n                hierarchical: {\n                    direction: 'UD',\n                    sortMethod: 'directed',\n                },\n            }\n\n        });\n\n        this.network.on('click', async (clickEvent) => {\n            if (clickEvent.nodes.length > 0) {\n\n                assert(clickEvent.nodes.length === 1);\n                const clickedNodeId = clickEvent.nodes[0];\n                console.log(\"clickEvent.nodes\", clickEvent.nodes);\n                console.log(\"clickedNodeId\", this.props.tree[clickedNodeId]);\n                this.props.onNodeSelectionChange(clickEvent.nodes);\n            } else {\n                this.props.onNodeSelectionChange([]);\n            }\n        });\n\n    }\n\n    // updates the network displayed by Vis.js\n    updateNetwork(onlyUpdateStyles: boolean, layout: string) {\n        if (layout === \"SatVis\"){\n            this.visLayout(this.props.tree);\n        } else if(layout === \"PobVis\"){\n            const PobVisTree =  PobVisLayout(this.props.tree);\n            this.visLayout(PobVisTree);\n        }\n    }\n\n    visLayout(ATree){\n        let nodeHasBeenSelected = this.props.nodeSelection.length > 0;\n        let currentNodeExprID = Number.MIN_SAFE_INTEGER;\n        let InvList:{id: string, start: string, end: string}[] = [];\n        if(nodeHasBeenSelected) {\n            currentNodeExprID = ATree[this.props.nodeSelection[0]].exprID;\n            InvList = currentNodeExprID in this.props.PobLemmasMap ? this.props.PobLemmasMap[currentNodeExprID].map((exprInfo) => {\n                return {\n                    id: exprInfo[0],\n                    start: exprInfo[1],\n                    end: exprInfo[2]\n                }\n            }): [];\n        }\n        const visNodes = new Array<Node>();\n        const visEdges = new Array<Edge>();\n        let edgeId = 0;\n        \n\n\n        for (const nodeID in ATree){\n            let node = ATree[nodeID];\n            if(!node.to_be_vis) continue;\n            let visNode;\n            let FinalInvList = node.exprID in this.props.PobLemmasMap ? this.props.PobLemmasMap[node.exprID].filter(exprInfo => exprInfo[2] === \"oo\") : [];\n            let finalInv = (FinalInvList.filter(x => x[1] === node.level || x[1] === \"oo\").length);\n            //Prioritize related nodes\n            if (node.exprID === currentNodeExprID) {\n                visNode = toVisNode(node, \"sameExprID\", this.props.nodeSelection, finalInv)\n            } else if (InvList.length > 0 && InvList.filter(exprInfo => exprInfo.id === node.exprID).length > 0){\n                visNode = toVisNode(node, \"lemma\", this.props.nodeSelection, finalInv, InvList.findIndex(x => x.id === node.exprID) % 10);\n            } else if (node.nodeID > this.props.currentTime) {\n                visNode = toVisNode(node, \"activated\", this.props.nodeSelection, finalInv);\n            } else {\n                visNode = toVisNode(node, \"passive\", this.props.nodeSelection, finalInv);\n            }\n\n            visNodes.push(visNode);\n            const visEdge = toVisEdge(edgeId, node.parent, node.nodeID, false);\n            visEdges.push(visEdge);\n            edgeId++;\n        }\n        this.networkNodes.clear();\n        this.networkNodes.add(visNodes);\n        this.networkEdges.clear();\n        this.networkEdges.add(visEdges);\n\n    }\n\n    keyupHandler(event) {\n        if(this.props.nodeSelection.length !== 1 ) return;\n        const selected_node = this.props.nodeSelection[0];\n        let closest_node = findClosestNode(selected_node, event.key, this.network);\n        this.props.onNodeSelectionChange([closest_node]);\n    }\n}\n","import {assert} from \"../model/util\";\n\nexport function findClosestNode(nodeId: number, direction, network){\n    assert(network);\n    assert(\"body\" in network!);\n    const currentNode = network!.body.nodes[nodeId];\n    let closestNode = currentNode.id;\n    let min_distance = Number.MAX_SAFE_INTEGER;\n\n    if (direction === \"ArrowLeft\"){\n        for(const idx in network!.body.nodes){\n            const node = network!.body.nodes[idx];\n            let distance = currentNode.x - node.x;\n            if (node.y !== currentNode.y) {continue}\n            if (distance > 0 && distance < min_distance){\n                closestNode = node.id;\n                min_distance = distance;\n            }\n        }\n    }\n    else if (direction === \"ArrowRight\"){\n        for (let idx in network!.body.nodes){\n            const node = network!.body.nodes[idx];\n            let distance = node.x - currentNode.x;\n            if (node.y !== currentNode.y) {continue}\n            if (distance > 0 && distance < min_distance){\n                closestNode = node.id;\n                min_distance = distance;\n            }\n        }\n    }\n    else if (direction === \"ArrowDown\" && currentNode.edges.length >= 2){\n        closestNode = currentNode.edges.filter(edge => edge.fromId === currentNode.id)[0].toId;\n    }\n    else if (direction === \"ArrowUp\" && currentNode.edges.length >= 1){\n        let closestNodes = currentNode.edges.filter(edge => edge.toId === currentNode.id);\n        if (closestNodes.length > 0){\n            closestNode = closestNodes[0].fromId;\n        }\n    }\n    return closestNode;\n\n}\n","import * as React from 'react';\n\nimport Slider from './Slider';\nimport Graph from './Graph';\nimport ReactModal from 'react-modal';\nReactModal.setAppElement('#root');\n\ntype Props = {\n    mode: \"proof\" | \"replay\" | \"iterative\",\n    tree: any,\n    runCmd: string,\n    onNodeSelectionChange: (selection: number[]) => void,\n    nodeSelection: number[],\n    historyLength: number,\n    currentTime: number,\n    onCurrentTimeChange: (newState: number) => void,\n    layout: string,\n    PobLemmasMap: any,\n};\nexport default class Main extends React.Component<Props, {}> {\n\n    // TODO: remove this, after supporting button clicks in Aside while the modal is active\n    componentDidMount() {\n    }\n\n    render() {\n        return (\n            <main>\n                    <input type=\"text\" value = {this.props.runCmd} readOnly></input>\n                    <Graph\n                        tree= { this.props.tree }\n                        onNodeSelectionChange={this.props.onNodeSelectionChange}\n                        nodeSelection={this.props.nodeSelection}\n                        currentTime = {this.props.currentTime}\n                        layout = {this.props.layout}\n                        PobLemmasMap = {this.props.PobLemmasMap}\n                    />\n                    <Slider\n                        historyLength={this.props.historyLength}\n                        currentTime={this.props.currentTime}\n                        onCurrentTimeChange={this.props.onCurrentTimeChange}\n                        enabled={true}\n                    />\n                </main>\n        );\n    }\n\n}\n","import {parse} from \"s-exify\";\n\nconst negateMap = {\n    \"<=\": \">\",\n    \">=\": \"<\",\n    \"!=\": \"=\",\n    \"<\": \">=\",\n    \">\": \"<=\",\n    \"=\": \"!=\",\n    \"&&\": \"||\",\n    \"||\": \"&&\",\n    \"not\": \"\"\n};\n\nconst logSym = [\"&&\", \"||\", \"=>\"];\n\nexport function toReadable(expr) {\n    if (expr[0] !== \"(\"){\n        expr = \"(\" + expr + \")\";\n    }\n    return parseResult(parse(expr), \"\");\n}\n\nfunction parseResult(lst, sep) {\n    //symbols for logical relations\n    let logSym = {\n        \"and\": \"&&\",\n        \"or\": \"||\"\n    };\n\n    //symbols for mathematical operations\n    //Note: \"-\" is not included because negative numbers are in the form (- x)\n    let logOp = [\"!=\", \"=\", \"<=\", \">=\", \">\", \"<\", \"+\", \"*\", \"/\"];\n\n    //empty list should return empty string\n    if (lst.length < 1){\n        return \"\";\n    }\n\n    //logical symbol should be inserted between each child clause\n    if (lst[0] in logSym) {\n        return parseResult(lst.splice(1), logSym[lst[0]]);\n    }\n\n    //reorders to put operators between operands\n    //Note: accounts for \"-\" denoting the subtraction of 2 numbers, (- x y)\n    if (logOp.indexOf(lst[0]) >= 0 || (lst[0] === \"-\" && lst.length === 3)){\n        return \"(\" + parseResult(lst[1], \"\") + \" \" + lst[0] + \" \" + parseResult(lst[2], \"\") + \")\";\n    }\n\n    //handles indexing into an array\n    if (lst[0] === \"select\") {\n        return lst[1] + \"[\" + lst[2] + \"]\";\n    }\n\n    //Adds not symbol (!) to beginning of clause\n    if (lst[0] === \"not\") {\n        if (lst[1][0] in negateMap){\n            lst[1][0] = negateMap[lst[1][0]];\n        }\n        return parseResult(lst[1], \"\")\n    }\n\n    //prevents trailing logical symbol\n    if (sep !== \"\" && lst.length === 1){\n        return parseResult(lst[0], \"\");\n    }\n\n    //actual place where logical symbol gets placed between clauses\n    if (sep !== \"\") {\n        return parseResult(lst[0], \"\") + \" \" + sep + \"\\n\" + parseResult(lst.splice(1), sep);\n    }\n\n    //handler for negative numbers which come in the form (- x)\n    if (lst[0] === \"-\"){\n        return lst[0] + lst[1];\n    }\n\n    //handler for denoting invariants. Ex. Inv (...)\n    if (typeof(lst[0]) === 'string' && Array.isArray(lst) && lst.length > 1){\n        return lst[0] + \": (\" + parseResult(lst[1], \"\") + \")\";\n    }\n\n    return lst;\n}\n\nexport function replaceVarNames(expr, varList) {\n    if (varList === \"\") return expr;\n    if (typeof expr === \"string\") {\n        let newList = varList.split(\" \");\n        for (let i = 0; i < newList.length; i++) {\n            let regex = new RegExp( \"[a-zA-z0-9@$:!]+_\"+ i + \"_n\", \"gi\");\n            expr = expr.replace(regex, newList[i]);\n        }\n    }\n    return expr;\n}\n\nexport function reorder(expr, lhs, op){\n    if (typeof expr !== \"string\") return expr;\n    let lhsFinal:Number[] = [];\n    let rhsFinal:Number[] = [];\n    let exprList = getCleanExprList(expr, op);\n    let result = \"\";\n    for (let i = 0; i < exprList.length; i++){\n        if (lhs.indexOf(i) > -1) {\n            if (lhsFinal.length === 0){\n                result = negate(exprList[i]) + result;\n            }\n            else {\n                result = negate(exprList[i]) + \" \" + negateMap[op] + \"\\n\" + result;\n            }\n            lhsFinal.push(i);\n            \n        }\n        else {\n            if (rhsFinal.length === 0) {\n                result = result + \" =>\\n\" + exprList[i];\n            }\n            else {\n                result = result + \" \" + op + \"\\n\" + exprList[i]\n            }\n           rhsFinal.push(i); \n        }\n        \n        if (i === exprList.length - 1) {\n            if (lhsFinal.length === 0) {\n                result = \"true \" + result\n            }\n            if (rhsFinal.length === 0) {\n                result = result + \" =>\\nfalse\"\n            }\n        }\n    }\n    return result;\n}\n\nfunction negate(expr) {\n    let compOp = getCompOp(expr);\n    if (compOp === \"not\"){\n        return compOp + \" \" + expr\n    }\n    return expr.replace(compOp, negateMap[compOp]);\n}\n\nfunction getCompOp(expr: string) {\n    let keys = Object.keys(negateMap);\n    for (let i = 0; i < keys.length; i++){\n        if (expr.includes(keys[i])){\n            return keys[i];\n        } \n    }\n    \n    return \"not\";\n}\n\nexport function getOp(expr) {\n    for (let i = 0; i < logSym.length; i++) {\n        if (expr.includes(logSym[i])) return logSym[i];\n    }\n}\n\nexport function getIndexOfLiteral(exprList, literal){\n    for (let i = 0; i < exprList.length; i++){\n        if (literal === exprList[i] || literal === negate(exprList[i])){\n            return i;            \n        }\n    }\n    return -1;\n}\n\nexport function getCleanExprList(expr, sep) {\n    let exprList = expr.split(sep);\n    let resultExprList:string[] = [];\n    for (let i = 0; i < exprList.length; i++){\n        if (exprList[i] !== \"\") {\n            resultExprList.push(exprList[i].trim());\n        }\n    }\n    \n    return resultExprList;\n}\n\nexport function getVariables(literal) {\n    let regex = /([a-zA-Z])+/g;\n    return literal.match(regex);\n}\n\nexport function getProcesses(literal) {\n    let regex = /(\\[[0-9]+\\])/g;\n    return literal.match(regex);\n}\n\nexport function getProcessVariables(literal) {\n    let regex = /([a-zA-Z]+\\[[0-9]+\\])/g;\n    return literal.match(regex);\n}\n\nexport function cleanExprOperators(expr) {\n    for (let i = 0; i < logSym.length; i++){\n       expr = expr.replace(logSym[i], \"\"); \n    }\n    return expr;\n}\n\nexport function getVarIndices(varList: string[], exprList: string[]) {\n    let result:number[] = [];\n    for (let i = 0; i < varList.length; i++){\n        for (let j = 0; j < exprList.length; j++){\n            if (exprList[j].includes(varList[i])){\n                result.push(j);\n            }\n        }\n    }\n    return result;\n}\n\n\nexport function getProblemName(fileName) {\n    let regex = /.*.smt2/\n    return fileName.match(regex);\n}\n","import * as React from 'react';\n\nimport '../styles/NodeDetails.css';\nimport {toDiff} from \"../helpers/diff\";\nimport {lemmaColours} from \"../helpers/network\";\nimport {cleanExprOperators, getCleanExprList, getIndexOfLiteral, getOp, reorder} from \"../helpers/readable\";\n\ntype Props = {\n    nodes: any,\n    name: string\n    PobLemmasMap: {},\n    ExprMap: {},\n    layout: string,\n    expr_layout: \"SMT\" | \"JSON\",\n    saveExprs: () => void,\n    relatedExprMap: any\n};\n\ntype State = {\n    learningFlag: boolean,\n    learningErrorFlag: boolean,\n    transformationFlag: boolean\n    transformationErrorFlag: boolean\n    possibleTransformations: {humanReadableAst: string, xmlAst: string}[]\n    transformationSelected: string\n}\n\nexport default class NodeDetails extends React.Component<Props, State> {\n\n    keep = false; // hack to skip each second event generated by Sortable\n    constructor(props) {\n        super(props);\n        this.state = {\n            learningFlag: false,\n            learningErrorFlag: false,\n            transformationFlag: false,\n            transformationErrorFlag: false,\n            possibleTransformations: [],\n            transformationSelected: \"\"\n        }\n    }\n\n    type_map = {\n        \"EQUALS\": \"= \",\n        \"PLUS\": \"+ \",\n        \"TIMES\": \"* \",\n        \"LT\": \"< \",\n        \"LE\": \"<= \",\n        \"GT\": \"> \",\n        \"GE\": \">= \",\n        \"SYMBOL\": \"\",\n        \"0_REAL_CONSTANT\": \"\"\n    };\n\n    node_to_string(n: Object, is_root: Boolean):string{\n        let result = \"\";\n        let args = \"\";\n        const nl = is_root?\"\\n\":\"\";\n        //build args \n        if (Array.isArray(n[\"content\"])){\n            for(const arg of n[\"content\"]){\n                args+=this.node_to_string(arg, false)+nl\n            }\n        }else{\n            args+=n[\"content\"]\n        }\n        //build node\n        if (n[\"type\"] in this.type_map){\n            if(this.type_map[n[\"type\"]]===\"\"){\n                result = \" \"+ args\n            }else{\n                result = \"(\" + this.type_map[n[\"type\"]] + args + \")\"\n            }\n        }else{\n            result = \"(\" + n[\"type\"] + nl + args + \")\"\n        }\n        return result\n    }\n    getLemmaList(node) {\n        let lemma_list: JSX.Element[] = [];\n        if (node.event_type === \"EType.EXP_POB\") {\n            lemma_list.push(<h2 key =\"lemma-title\"> Lemmas summarization </h2>);\n            if (node.exprID in this.props.PobLemmasMap){\n                let lemmas = this.props.PobLemmasMap[node.exprID];\n                for (const lemma of lemmas){\n                    let colorIndex = lemmas.indexOf(lemma);\n                    let lemmaStyle = {\n                        color: lemmaColours[colorIndex]\n                    };\n                    lemma_list.push(<h3 style={lemmaStyle} key={\"lemma-header-\"+ lemma[0]}>ExprID: {lemma[0]}, From: {lemma[1]} to {lemma[2]}</h3>);\n                    let expr = this.props.ExprMap[lemma[0]].edited;\n                    if (typeof expr === \"string\"){\n                        if (Object.keys(this.props.relatedExprMap).length > 0){\n                            let keys = Object.keys(this.props.relatedExprMap);\n                            for (let i = 0; i < keys.length; i++){\n                                let exprData = this.props.relatedExprMap[keys[i]];\n                               if (expr === exprData.readable) {\n                                   expr = exprData.edited;\n                                   break;\n                               }\n                            }\n                        }\n                        let exprList = getCleanExprList(expr, \"\\n\");\n                        let implies = -1;\n                        for (let i = 0; i < exprList.length; i++){\n                            if (exprList[i].includes(\"=>\")){\n                                implies = i;\n                                break;\n                            }\n                        }\n                        exprList.forEach((literal, key) => {\n                            let lemmaColour = {\n                                color: \"black\"\n                            }\n                            if (implies !== -1){\n                                if (key > implies){\n                                    lemmaColour.color = \"darkblue\";\n                                }\n                            }\n                            if (key !== exprList.length - 1) {\n                                lemma_list.push(<pre style={lemmaColour} onClick={this.addLemma.bind(this, lemma[0])} key={\"lemma-expr-\"+lemma[0] + key}>{literal}</pre>);\n                            }\n                            else {\n                                lemma_list.push(<pre style={lemmaColour} onClick={this.addLemma.bind(this, lemma[0])}\n                                                     key={\"lemma-expr-\" + lemma[0] + key}>{literal}</pre>);\n                            }\n                        });\n                    }\n                    else {\n                        lemma_list.push(<pre>{expr}</pre>);\n                    }\n                }\n            }\n        }\n        return lemma_list;\n    }\n    \n    addLemma(lemmaId, e) {\n        let expr = this.props.ExprMap[lemmaId].readable;\n        let exprList = getCleanExprList(expr, getOp(expr));\n        let literal = (cleanExprOperators(e.target.innerText));\n        literal = literal.trim();\n        let index = getIndexOfLiteral(exprList, literal);\n        let lhs = this.props.ExprMap[lemmaId].lhs;\n        if (lhs.includes(index)){\n            lhs.splice(lhs.indexOf(index), 1);\n        }\n        else {\n            lhs.push(index)\n        }\n        \n        this.props.ExprMap[lemmaId].lhs = lhs;\n        this.props.ExprMap[lemmaId].edited = reorder(expr, lhs, getOp(expr));\n        this.props.ExprMap[lemmaId].changed = lhs.length !== 0;\n        this.props.saveExprs();\n        this.forceUpdate();\n        \n    }\n    \n    async learnTransformation() {\n        this.setState({\n            learningFlag: false,\n            learningErrorFlag: false,\n            transformationFlag: false,\n            transformationErrorFlag: false,\n            possibleTransformations: []\n        });\n\n        const response = await fetch(\"http://localhost:5000/spacer/learn_transformation\", {\n            method: 'POST',\n            mode :'cors',\n            headers: {\n                'Accept': 'application/json',\n                'Content-Type': 'application/json'\n            }, body : JSON.stringify({\n                exp_path: this.props.name\n            })\n        });\n        if (response.status === 200){\n            let responseJson = await response.json();\n            let possiblePrograms = responseJson[\"response\"];\n            this.setState({\n                learningFlag: true,\n                possibleTransformations: possiblePrograms\n            });\n            this.forceUpdate();\n        }\n        else {\n            this.setState({\n                learningErrorFlag: true\n            });\n        }\n        \n    }\n\n    async transformExprs() {\n        this.setState({\n            transformationFlag: false,\n            transformationErrorFlag: false\n        });\n        const response = await fetch(\"http://localhost:5000/spacer/apply_transformation\", {\n            method: 'POST',\n            mode :'cors',\n            headers: {\n                'Accept': 'application/json',\n                'Content-Type': 'application/json'\n            }, body : JSON.stringify({\n                exp_path: this.props.name,\n                selectedProgram: this.state.transformationSelected\n            })\n        });\n\n        if (response.status === 200){\n            let responseData = await response.json();\n            let tExprMap = responseData[\"response\"];\n            Object.keys(tExprMap).forEach((key) => {\n                this.props.ExprMap[key].edited = tExprMap[key]['Edited'];\n                this.props.ExprMap[key].lhs = tExprMap[key]['Lhs'];\n            });\n            this.props.saveExprs();\n            this.setState({\n                transformationFlag: true,\n            });\n            this.forceUpdate();\n        }\n        else {\n            this.setState({\n                transformationErrorFlag: true\n            });\n        }\n    }\n    \n    updateTransformationSelected(e) {\n        this.setState({\n            transformationSelected: e.target.value\n        })\n    }\n    \n\n    render() {\n        let node1, node2;\n        \n        if (this.props.nodes.length > 1){\n            node1 = this.props.nodes[0];\n            node2 = this.props.nodes[1];\n        }\n        return (\n            <div>\n                {this.props.nodes.length > 1 && <section className='component-node-details details-diff'>\n                    <article>\n                        <h2>Diff (Node: <strong>{node1.nodeID}</strong> vs. Node: <strong>{node2.nodeID}</strong>)</h2>\n                        {toDiff(node1.expr.readable, node2.expr.readable).map((part, key) => (\n                            <span key={key} className={part.added ? \"green\" : part.removed ? \"red\" : \"black\"}>\n                                {part.value}\n                            </span>\n                        ))}\n                    </article>\n                </section>}\n                {this.props.nodes.map((node, key) => {\n                    let additional_info =\"type:\" + node.event_type + \" level:\" + node.level;\n                    let lemma_list = this.getLemmaList(node);\n\n                    let expr = node.expr.readable;\n                    if (this.props.expr_layout===\"SMT\") {\n                        console.log(node.expr);\n                    }\n                    else {\n                        /* expr = JSON.stringify(this.props.node.ast_json, null, 2); */\n                        if (node.ast_json) {\n                            expr += this.node_to_string(node.ast_json, true);\n                        }\n                    }\n                    const classNameTop = \"component-node-details details-top-\" + key;\n                    const classNameBottom = \"component-node-details details-bottom-\" + key;\n                    return (\n                        <div key = {key}>\n                            <section className={classNameTop}>\n                                <article>\n                                    <h2>Node <strong>{node.nodeID}, </strong>Expr <strong> {node.exprID} </strong>,\n                                        Parent <strong> {node.pobID}  </strong></h2>\n                                    <h3>{additional_info}</h3>\n                                    <pre className={this.props.nodes.length === 1 ? \"black\" : node === node1 ? \"red\" : \"green\" }>{expr}</pre>\n                                </article>\n                            </section>\n                            {lemma_list.length > 0 && <section className={classNameBottom}>\n                                <article>\n                                    {lemma_list}\n                                    <button onClick={this.learnTransformation.bind(this)}>Learn Transform</button>\n                                    {this.state.learningFlag && <p>Possible Transformations: </p>}\n                                    {this.state.possibleTransformations.length !== 0 && this.state.possibleTransformations.map((transformation,key) => (\n                                        <div key={key}>\n                                            <input type=\"radio\" name={\"transformation\"} value={transformation.xmlAst} onClick={this.updateTransformationSelected.bind(this)}/>{transformation.humanReadableAst}\n                                        </div>\n                                    ))}\n                                    {this.state.learningErrorFlag && <p style={{color: \"red\"}}>Internal Server Error: Please Try Again</p>}\n                                    <button onClick={this.transformExprs.bind(this)}>Apply Transform</button>\n                                    {this.state.transformationFlag && <p>Transformation Complete</p>}\n                                    {this.state.transformationErrorFlag && <p style={{color: \"red\"}}>Internal Server Error: Please Try Again</p>}\n                                </article>\n                            </section>}\n                        </div>\n                    );\n                })}\n            </div>\n);\n\n\n\n\n        /* let additional_info =\"type:\" + this.props.node.event_type + \" level:\" + this.props.node.level */\n        /* let lemma_list = new Array(); */\n\n        //if(this.props.node.event_type == \"EType.EXP_POB\"){\n        //    lemma_list.push(<h2 key =\"lemma-title\"> Lemmas summarization </h2>)\n        //    if(this.props.node.exprID in this.props.PobLemmasMap){\n        //        let lemmas = this.props.PobLemmasMap[this.props.node.exprID]\n        //        for (const lemma of lemmas){\n        //            lemma_list.push(<h3 key={\"lemma-header-\"+ lemma[0]}>ExprID: {lemma[0]}, From: {lemma[1]} to {lemma[2]}</h3>)\n        //            lemma_list.push(<pre key={\"lemma-expr-\"+lemma[0]}>{this.props.ExprMap[lemma[0]]}</pre>)\n        //        }\n        //    }\n        //}\n\n        //let expr = \"\"\n        //if(this.props.expr_layout==\"SMT\"){\n        //    expr = this.props.node.expr\n        //}else{\n        //    /* expr = JSON.stringify(this.props.node.ast_json, null, 2); */\n        //    if(this.props.node.ast_json){\n        //        expr += this.node_to_string(this.props.node.ast_json, true);\n        //    }\n        //}\n\n        //return (\n        //    <div >\n        //        <section className= { 'component-node-details details-top'} >\n        //        <article>\n        //        <h2>Node <strong>{this.props.node.nodeID}, </strong>Expr < strong > { this.props.node.exprID } </strong>, Parent <strong> {this.props.node.pobID}  </strong></h2 >\n        //        <h3>{additional_info}</h3>\n        //        <pre>{expr}</pre>\n        //        </article>\n        //        </section>\n        //        <section className= { 'component-node-details details-bottom'} >\n        //            <article>\n        //                {lemma_list}\n        //            </article>\n        //        </section>\n        //    </div>\n        //);\n\n    }\n\n}\n","import * as diff from 'diff';\nexport function toDiff(expr1, expr2){\n    let result : {value:string, added:boolean, removed:boolean}[] = [];\n    let expr1List = expr1.split(\"\\n\");\n    let expr2List = expr2.split(\"\\n\");\n    for (let i = 0; i < Math.min(expr1List.length, expr2List.length); i++){\n        let lineDiff = diff.diffWords(expr1List[i], expr2List[i]);\n        lineDiff.push({\n            added: false,\n            removed: false, \n            value: \"\\n\"\n        });\n        result = result.concat(lineDiff);\n        console.log(result);\n    }\n    console.log(result);\n    return result;\n    \n} ","import * as React from 'react';\nimport {getProblemName} from \"../helpers/readable\";\n\ntype Props = {\n    name: string\n    updateRelatedExprMap: (exprMap) => void\n}\n\ntype State = {\n    matchingFiles: any[],\n    exps: any[],\n    selected: string\n}\n\nclass ExprMapSelector extends React.Component<Props, State> {\n    constructor(props: Props){\n        super(props);\n        this.state = {\n            matchingFiles: [],\n            exps: [],\n            selected: \"\"\n        }\n    }\n    \n    async componentDidMount() {\n        await this.fetchExps();\n        this.getMatchingFiles();\n        await this.getMatchingExprMap();\n    }\n\n    getMatchingFiles() {\n        let data = this.state.exps.filter(exp => exp.name.includes(getProblemName(this.props.name)) && exp.name !== this.props.name);\n        \n        if (data.length > 0){\n            this.setState({\n                matchingFiles: data,\n                selected: data[0].name\n            });\n        }\n    }\n    \n    async getMatchingExprMap() {\n        const fetchedJSON = await fetch('http://localhost:5000/spacer/get_exprs', {\n            method: 'POST',\n            mode: 'cors',\n            headers: {\n                'Accept': 'application/json',\n                'Content-Type': 'application/json'\n            }, body : JSON.stringify({\n                exp_path: this.state.selected,\n            })\n        });\n\n        try {\n            const json = await fetchedJSON.json();\n            this.props.updateRelatedExprMap(JSON.parse(json.expr_map));\n        } catch (error) {\n            if (error.name === \"SatVisAssertionError\") {\n                throw error;\n            }\n            this.setState({\n                exps: []\n            });\n        }\n    }\n\n    async fetchExps() {\n        const fetchedJSON = await fetch('http://localhost:5000/spacer/fetch_exps', {\n            method: 'POST',\n            mode: 'cors',\n            headers: {\n                'Accept': 'application/json',\n                'Content-Type': 'application/json'\n            }, body : \"\"\n        });\n\n        try {\n            const json = await fetchedJSON.json();\n            this.setState({exps: json.exps_list})\n        } catch (error) {\n            if (error.name === \"SatVisAssertionError\") {\n                throw error;\n            }\n            this.setState({\n                exps: []\n            });\n        }\n    }\n    \n    updateSelected(e) {\n        this.setState({\n            selected: e.target.value\n        });\n    } \n    \n    render() {\n        return (\n            <section className={\"component-node-details details-top-right\"}>\n                <select id=\"exprs\" onChange={this.updateSelected.bind(this)}>\n                {this.state.matchingFiles.length > 0 && this.state.matchingFiles.map((exp, key) => (\n                    <option key={key} value={exp.name}>{exp.name}</option>\n                ))}\n                </select>\n                <button onClick={this.getMatchingExprMap.bind(this)}>Get Expr Map</button>\n            </section>\n\n        );\n    }\n}\n\nexport default ExprMapSelector","import * as React from 'react';\n\nimport '../styles/NodeMenu.css';\nimport NodeDetails from './NodeDetails';\nimport ExprMapSelector from \"./ExprMapSelector\";\nconst icons = require('../resources/icons/all.svg') as string;\n\ntype Props = {\n    messages_q: string[],\n    mode: \"proof\" | \"replay\" | \"iterative\",\n    tree: any | null,\n    nodeSelection: number[],\n    onUpdateNodeSelection: (selection: number[]) => void,\n    onPoke: () => void,\n    SatVisLayout: () => void,\n    PobVisLayout: () => void,\n    MultiSelectMode: () => void,\n    SMTLayout: () => void,\n    JSONLayout:() => void,\n    PobLemmasMap: {},\n    ExprMap: {},\n    layout: string,\n    expr_layout: \"SMT\"|\"JSON\",\n    saveExprs: () => void,\n    name: string\n};\n\ntype State = {\n    relatedExprMap: any\n}\n\nclass Aside extends React.Component<Props, State> {\n    constructor(props: Props){\n        super(props);\n        this.state = {\n            relatedExprMap: []\n        }\n    }\n\n    createButton(title, onClick, svg) {\n        return <button\n                   title={title}\n                   onClick = { onClick }\n               >\n            <svg viewBox=\"0 0 24 24\" className = \"icon big\" >\n                <use xlinkHref={ `${icons}#${svg}` } />\n            </svg>\n        </button>;\n    }\n    getNodeDetails() {\n        if (this.props.nodeSelection.length >= 1  && this.props.tree != null) {\n            let nodes: any[] = [];\n            for (let node of this.props.nodeSelection){\n                nodes.push(this.props.tree[node]);\n            }\n            return <NodeDetails\n                       nodes={nodes}\n                       name={this.props.name}\n                       PobLemmasMap = { this.props.PobLemmasMap }\n                       ExprMap = { this.props.ExprMap }\n                       layout = { this.props.layout }\n                       expr_layout ={this.props.expr_layout}\n                       saveExprs = {this.props.saveExprs}\n                       relatedExprMap = {this.state.relatedExprMap}\n                       \n            />;\n        } else {\n            return <section className={ 'component-node-details overview' }>\n                <small id=\"nodeInfo\" > <strong>{`${this.props.nodeSelection.length} nodes`\n                } </strong> selected</small >\n            </section>\n        }\n        \n    }\n    \n    updateRelatedExprMap(exprMap) {\n        this.setState({\n            relatedExprMap: exprMap \n        });\n    }\n\n    render() {\n        console.log(this.props.mode);\n        return(\n            <aside>\n                <article>\n                    {this.props.messages_q.map((mess, key) => (\n                        <section  key={key} className=\"component-node-menu\">{mess}</section>\n                    ))}\n                    <section className=\"component-node-menu\" >\n                        { this.createButton(\"Poke\", this.props.onPoke, \"graph-undo\") }\n                        { this.createButton(\"SatVis\", this.props.SatVisLayout, \"node-parents\") }\n                        { this.createButton(\"PobVis\", this.props.PobVisLayout, \"node-children\") }\n                        { this.createButton(\"MultiSelect\", this.props.MultiSelectMode, \"history-forward\") }\n                        <button\n                            title = \"SMT\"\n                            onClick = { this.props.SMTLayout }\n                        >\n                            <svg viewBox=\"0 0 30 30\" className = \"icon big\" >\n                                <text x=\"50%\" alignmentBaseline=\"middle\" textAnchor=\"middle\" y=\"50%\" dominantBaseline=\"middle\" fontWeight=\"light\" stroke=\"none\" fill=\"black\" fontFamily=\"monospace\">Raw</text>\n                            </svg>\n                        </button>\n                        <button\n                            title = \"JSON\"\n                            onClick = { this.props.JSONLayout }\n                        >\n                            <svg viewBox=\"0 0 35 35\" className = \"icon big\" >\n                                <text x=\"50%\" alignmentBaseline=\"middle\" textAnchor=\"middle\" y=\"50%\" dominantBaseline=\"middle\" fontWeight=\"light\" stroke=\"none\" fill=\"black\" fontFamily=\"monospace\">Sort</text>\n                            </svg>\n                        </button>\n                    </section>\n                </article>\n                { this.getNodeDetails() }\n                <ExprMapSelector\n                    name = {this.props.name}\n                    updateRelatedExprMap = {this.updateRelatedExprMap.bind(this)}\n                />\n            </aside>\n        );\n    }\n\n}\nexport default Aside; \n","import * as React from 'react';\nimport { Component } from 'react';\n\nimport Main from './Main';\nimport Aside from './Aside';\nimport '../styles/App.css';\nimport { assert } from '../model/util';\nimport {buildExprMap, buildPobLemmasMap} from \"../helpers/network\";\nimport {replaceVarNames, toReadable} from \"../helpers/readable\";\n\ntype Props = {\n    name: string,\n    exp_path: string,\n    mode: \"proof\" | \"replay\" | \"iterative\",\n    problem: string,\n    spacerUserOptions: string,\n    hideBracketsAssoc: boolean,\n    nonStrictForNegatedStrictInequalities: boolean,\n    orientClauses: boolean,\n    varNames: string\n};\n\ntype State = {\n    exp_path: string,\n    state: \"loaded\" | \"loaded iterative\" | \"waiting\" | \"layouting\" | \"error\",\n    trees: any[],\n    runCmd: string,\n    messages_q: string[],\n    nodeSelection: number[],\n    currentTime: number,\n    layout: string,\n    expr_layout: \"SMT\" | \"JSON\",\n    PobLemmasMap: {},\n    ExprMap: {},\n    multiselect: boolean,\n    varNames: string\n}\n\nclass App extends Component<Props, State> {\n\n    state: State = {\n        exp_path: this.props.exp_path,\n        state: \"waiting\",\n        trees: [],\n        runCmd: \"Run command:\",\n        messages_q: [\"\"],\n        nodeSelection: [],\n        currentTime: 0,\n        layout: \"PobVis\",\n        expr_layout: \"SMT\",\n        PobLemmasMap: {},\n        ExprMap: {},\n        multiselect: false,\n        varNames: \"\"\n    };\n\n    async componentDidMount() {\n        if(this.props.mode === \"iterative\"){\n            // call Spacer on given input problem\n            await this.runSpacer(this.props.problem, this.props.spacerUserOptions, this.props.mode);\n        }\n        else {\n            await this.poke();\n        }\n    }\n\n    async poke() {\n        let message_q = [\"Poking Spacer...\"];\n\n        console.log(\"poking...\")\n        this.setState({\n            state: \"waiting\",\n            messages_q: message_q,\n        });\n\n        const fetchedJSON = await fetch('http://localhost:5000/spacer/poke', {\n            method: 'POST',\n            mode: 'cors',\n            headers: {\n                'Accept': 'application/json',\n                'Content-Type': 'application/json'\n            }, body : JSON.stringify({\n                exp_path: this.state.exp_path,\n            })\n        });\n\n        try {\n            const json = await fetchedJSON.json();\n            console.log(\"backend response:\", json);\n            message_q = [\"Get response from Backend.\"]\n            let tree = json.nodes_list;\n            for (let i = 0; i < Object.keys(tree).length; i++){\n                let rawWithVars = replaceVarNames(tree[i].expr, json.var_names);\n                let readable = toReadable(rawWithVars);\n                tree[i].expr = {\n                    raw: rawWithVars,\n                    readable: readable,\n                };\n            }\n            const state = \"loaded\";\n            const PobLemmasMap = buildPobLemmasMap(tree, json.var_names);\n            // NOTE: use varNames in state, not in props. The one in state is returned by the backend.\n            let ExprMap;\n            if (json.expr_map === \"\") {\n                ExprMap = buildExprMap(tree, json.var_names);\n            }\n            else {\n                ExprMap = JSON.parse(json.expr_map);\n            }\n\n            this.setState({\n                trees: [tree],\n                runCmd: json.run_cmd,\n                messages_q: [\"Spacer is \"+json.spacer_state],\n                state: state,\n                PobLemmasMap: PobLemmasMap,\n                ExprMap: ExprMap,\n                varNames: json.var_names\n            });\n            console.log(\"state is set\")\n        } catch (error) {\n            if (error.name === \"SatVisAssertionError\") {\n                throw error;\n            }\n            this.setState({\n                state: \"error\",\n                messages_q: [`Error: ${error[\"message\"]}`],\n            });\n        }\n    }\n\n    async saveExprMap() {\n        await fetch('http://localhost:5000/spacer/save_exprs', {\n            method: 'POST',\n            mode: 'cors',\n            headers: {\n                'Accept': 'application/json',\n                'Content-Type': 'application/json'\n            }, body : JSON.stringify({\n                exp_path: this.state.exp_path,\n                expr_map: JSON.stringify(this.state.ExprMap)\n            })\n        });\n    }\n\n    async runSpacer(problem: string, spacerUserOptions: string, mode: \"proof\" | \"replay\" | \"iterative\") {\n        this.setState({\n            state: \"waiting\",\n            messages_q: [\"Waiting for Spacer...\"],\n        });\n\n        const fetchedJSON = await fetch('http://localhost:5000/spacer/start_iterative', {\n            method: 'POST',\n            mode: 'cors',\n            headers: {\n                'Accept': 'application/json',\n                'Content-Type': 'application/json'\n            },\n            body: JSON.stringify({\n                name: this.props.name,\n                file: problem,\n                spacerUserOptions: spacerUserOptions,\n                varNames: this.props.varNames\n            })\n        });\n\n        try {\n            const json = await fetchedJSON.json();\n            console.log(\"backend response:\", json);\n            if (json.status === \"success\") {\n                const state = (mode === \"iterative\" && json.spacer_state === \"running\") ? \"loaded iterative\" : \"loaded\";\n                const messages_q = [\"Hit Poke to update graph\"];\n                this.setState({\n                    exp_path: json.exp_name,\n                    messages_q: messages_q,\n                    state: state,\n                });\n            } else {\n                assert(json.status === \"error\");\n                const errorMess = json.message;\n                assert(errorMess !== undefined && errorMess !== null);\n                this.setState({\n                    state: \"error\",\n                    messages_q: [errorMess],\n                });\n            }\n        } catch (error) {\n            if (error.name === \"SatVisAssertionError\") {\n                throw error;\n            }\n            this.setState({\n                state: \"error\",\n                messages_q: [`Error: ${error[\"message\"]}`],\n            });\n        }\n    }\n\n    updateNodeSelection(nodeSelection: number[]) {\n        if (this.state.multiselect) {\n            let tempNodeSelection = this.state.nodeSelection.slice(this.state.nodeSelection.length-1).concat(nodeSelection);\n            this.setState({nodeSelection: tempNodeSelection});\n        } else {\n            this.setState({nodeSelection: nodeSelection});\n        }\n    }\n    \n    updateCurrentTime(currentTime: number) {\n        const trees = this.state.trees;\n        assert(trees.length > 0);\n        this.setState({\n            currentTime: currentTime\n        });\n    }\n\n    setPobVisLayout(){\n        this.setState({ layout: \"PobVis\" })\n    }\n    setSatVisLayout(){\n        this.setState({ layout: \"SatVis\" })\n    }\n    setMultiSelect() {\n        if (this.state.multiselect) {\n            if (this.state.nodeSelection.length > 0) {\n                this.setState({\n                    nodeSelection: [this.state.nodeSelection[this.state.nodeSelection.length - 1]]\n                });\n            }\n            else {\n                this.setState({\n                    messages_q: [\"Hit Poke to update graph\"]\n                })\n            }\n        } else {\n            this.setState({\n                messages_q: [\"Select Up to 2 nodes\"]\n            });\n        }\n        this.setState({\n            multiselect: !this.state.multiselect\n        });\n    }\n    setSMTLayout(){\n        this.setState({ expr_layout: \"SMT\" })\n    }\n    setJSONLayout(){\n        this.setState({ expr_layout: \"JSON\" })\n    }\n    render() {\n        const {\n            state,\n            trees,\n            runCmd,\n            messages_q,\n            nodeSelection,\n            currentTime,\n            layout,\n            expr_layout,\n            PobLemmasMap,\n            ExprMap\n        } = this.state;\n        let tree;\n        let main;\n        if (state === \"loaded\") {\n            assert(trees.length > 0);\n            tree = trees[trees.length - 1];\n            const hL = Object.keys(tree).length;\n            main = (\n                <Main\n                    mode = { this.props.mode }\n                    runCmd = {runCmd}\n                    tree = { tree }\n                    onNodeSelectionChange = { this.updateNodeSelection.bind(this) }\n                    nodeSelection = { nodeSelection }\n                    historyLength = { hL }\n                    currentTime = { currentTime }\n                    onCurrentTimeChange = { this.updateCurrentTime.bind(this) }\n                    layout = { layout }\n                    PobLemmasMap = { PobLemmasMap }\n                />\n            );\n        } else {\n            main = (\n                <main>\n                    <section className= \"slider-placeholder\" />\n                </main>\n            );\n        }\n        return (\n                <div className= \"app\" >\n                { main }\n                <Aside\n                    messages_q = {messages_q}\n                    mode = { this.props.mode }\n                    tree = { tree }\n                    nodeSelection = { nodeSelection }\n                    onUpdateNodeSelection = { this.updateNodeSelection.bind(this) }\n                    onPoke = {this.poke.bind(this)}\n                    SatVisLayout = { this.setSatVisLayout.bind(this) }\n                    PobVisLayout = { this.setPobVisLayout.bind(this) }\n                    MultiSelectMode= { this.setMultiSelect.bind(this) }\n                    SMTLayout = { this.setSMTLayout.bind(this) }\n                    JSONLayout = { this.setJSONLayout.bind(this) }\n                    PobLemmasMap = { PobLemmasMap }\n                    ExprMap = { ExprMap }\n                    layout = { layout }\n                    expr_layout ={expr_layout}\n                    saveExprs = {this.saveExprMap.bind(this)}\n                    name = {this.state.exp_path}\n                />\n                </div>\n        );\n\n    }\n\n}\n\nexport default App;\n","import * as React from 'react';\nimport App from \"./App\";\nimport '../styles/AppWrapper.css';\n\ntype Props = {\n    name: string,\n    problem: string,\n    exp_path: string,\n    spacerUserOptions: string,\n    mode: \"proof\" | \"replay\" | \"iterative\"\n    hideBracketsAssoc: boolean,\n    nonStrictForNegatedStrictInequalities: boolean, \n    orientClauses: boolean,\n    varNames: string\n};\n\nexport class AppWrapper extends React.Component<Props, {}> {\n    render() {\n        return (\n            <div id=\"appWrapper\">\n                <App \n                    name = {this.props.name}\n                    problem={this.props.problem}\n                    exp_path = {this.props.exp_path}\n                    spacerUserOptions={this.props.spacerUserOptions}\n                    mode={this.props.mode}\n                    hideBracketsAssoc={this.props.hideBracketsAssoc}\n                    nonStrictForNegatedStrictInequalities={this.props.nonStrictForNegatedStrictInequalities}\n                    orientClauses={this.props.orientClauses}\n                    varNames={this.props.varNames}\n                />\n            </div>\n        )\n    }\n}\n\n","import * as React from 'react';\nimport '../styles/NodeMenu.css';\nimport {Link} from 'react-router-dom';\n\ntype Props = {\n};\ntype State = {\n    isFetching: boolean,\n    exps: any[],\n}\n\nexport default class ExpTable extends React.Component<Props, State> {\n    constructor(props) {\n        super(props);\n        this.state = {\n            isFetching: false,\n            exps: []\n        };\n    }\n\n    async componentDidMount() {\n        await this.fetchExps();\n        // this.timer = setInterval(() => this.fetchUsers(), 5000);\n    }\n\n    render() {\n        return (\n                <div>\n                {this.state.exps.map((item, index) => (\n                        <h5 key = {item.name}><Link to={{pathname: `/replay/${item.name}`}} >{item.name}</Link> ${item.done}</h5>\n                ))}\n                <p>{this.state.isFetching ? 'Fetching experiments...' : ''}</p>\n                </div>\n        )\n    }\n    async fetchExps() {\n        this.setState({\n            isFetching: true,\n        });\n\n        const fetchedJSON = await fetch('http://localhost:5000/spacer/fetch_exps', {\n            method: 'POST',\n            mode: 'cors',\n            headers: {\n                'Accept': 'application/json',\n                'Content-Type': 'application/json'\n            }, body : \"\"\n        });\n\n        try {\n            const json = await fetchedJSON.json();\n            console.log(json)\n            this.setState({isFetching: false, exps: json.exps_list})\n        } catch (error) {\n            if (error.name === \"SatVisAssertionError\") {\n                throw error;\n            }\n            this.setState({\n                exps: []\n            });\n        }\n    }\n\n\n}\n","export const options = [\n    {name: \"fp.spacer.arith.solver\", type:\"unsigned int\"},\n    {name: \"fp.spacer.blast_term_ite_inflation\", type:\"unsigned int\"},\n    {name: \"fp.spacer.ctp\", type:\"bool\"},\n    {name: \"fp.spacer.dump_benchmarks\", type:\"bool\"},\n    {name: \"fp.spacer.dump_threshold\", type:\"double\"},\n    {name: \"fp.spacer.elim_aux\", type:\"bool\"},\n    {name: \"fp.spacer.eq_prop\", type:\"bool\"},\n    {name: \"fp.spacer.gpdr\", type:\"bool\"},\n    {name: \"fp.spacer.gpdr.bfs\", type:\"bool\"},\n    {name: \"fp.spacer.ground_pobs\", type:\"bool\"},\n    {name: \"fp.spacer.iuc\", type:\"unsigned int\"},\n    {name: \"fp.spacer.iuc.arith\", type:\"unsigned int\"},\n    {name: \"fp.spacer.iuc.debug_proof\", type:\"bool\"},\n    {name: \"fp.spacer.iuc.old_hyp_reducer\", type:\"bool\"},\n    {name: \"fp.spacer.iuc.print_farkas_stats\", type:\"bool\"},\n    {name: \"fp.spacer.iuc.split_farkas_literals\", type:\"bool\"},\n    {name: \"fp.spacer.keep_proxy\", type:\"bool\"},\n    {name: \"fp.spacer.logic\", type:\"symbol\"},\n    {name: \"fp.spacer.max_level\", type:\"unsigned int\"},\n    {name: \"fp.spacer.max_num_contexts\", type:\"unsigned int\"},\n    {name: \"fp.spacer.mbqi\", type:\"bool\"},\n    {name: \"fp.spacer.min_level\", type:\"unsigned int\"},\n    {name: \"fp.spacer.native_mbp\", type:\"bool\"},\n    {name: \"fp.spacer.order_children\", type:\"unsigned int\"},\n    {name: \"fp.spacer.p3.share_invariants\", type:\"bool\"},\n    {name: \"fp.spacer.p3.share_lemmas\", type:\"bool\"},\n    {name: \"fp.spacer.print_json\", type:\"symbol\"},\n    {name: \"fp.spacer.propagate\", type:\"bool\"},\n    {name: \"fp.spacer.push_pob\", type:\"bool\"},\n    {name: \"fp.spacer.push_pob_max_depth\", type:\"unsigned int\"},\n    {name: \"fp.spacer.q3\", type:\"bool\"},\n    {name: \"fp.spacer.q3.instantiate\", type:\"bool\"},\n    {name: \"fp.spacer.q3.qgen.normalize\", type:\"bool\"},\n    {name: \"fp.spacer.q3.use_qgen\", type:\"bool\"},\n    {name: \"fp.spacer.random_seed\", type:\"unsigned int\"},\n    {name: \"fp.spacer.reach_dnf\", type:\"bool\"},\n    {name: \"fp.spacer.reset_pob_queue\", type:\"bool\"},\n    {name: \"fp.spacer.restart_initial_threshold\", type:\"unsigned int\"},\n    {name: \"fp.spacer.restarts\", type:\"bool\"},\n    {name: \"fp.spacer.simplify_lemmas_post\", type:\"bool\"},\n    {name: \"fp.spacer.simplify_lemmas_pre\", type:\"bool\"},\n    {name: \"fp.spacer.simplify_pob\", type:\"bool\"},\n    {name: \"fp.spacer.trace_file\", type:\"symbol\"},\n    {name: \"fp.spacer.use_array_eq_generalizer\", type:\"bool\"},\n    {name: \"fp.spacer.use_bg_invs\", type:\"bool\"},\n    {name: \"fp.spacer.use_derivations\", type:\"bool\"},\n    {name: \"fp.spacer.use_euf_gen\", type:\"bool\"},\n    {name: \"fp.spacer.use_inc_clause\", type:\"bool\"},\n    {name: \"fp.spacer.use_inductive_generalizer\", type:\"bool\"},\n    {name: \"fp.spacer.use_lemma_as_cti\", type:\"bool\"},\n    {name: \"fp.spacer.use_lim_num_gen\", type:\"bool\"},\n    {name: \"fp.spacer.validate_lemmas\", type:\"bool\"},\n    {name: \"tr\", type: \"bool\"},\n    {name: \"fp.spacer.weak_abs\", type:\"bool\"}\n];\n\n","import * as React from 'react';\nimport {options} from \"../helpers/spacerOptions\";\nimport eye from \"./../resources/icons/singles/eye.svg\"\n\ntype Props = {\n    spacerUserOptions: string,\n    onChangeVariables: (e: React.ChangeEvent<HTMLInputElement>) => void,\n    changeSpacerUserOptions: (spacerUserOptions: string) => void,\n}\n\ntype State = {\n    optionTypeHTML: JSX.Element,\n    optionValue: string,\n    optionName: string,\n    optionType: string,\n    allOptions: {type:string, name: string, value:string}[],\n    showOptions: boolean\n}\n\nclass MenuOptions extends React.Component<Props, State> {\n    state = {\n        optionTypeHTML: <div />,\n        optionType: \"\",\n        optionValue: \"\",\n        optionName: \"\",\n        allOptions: [],\n        showOptions: true\n    };\n\n    updateSpacerOptions() {\n        let allOptions: {type:string, name: string, value:string}[] = this.state.allOptions;\n        let fullOptionString = \"\";\n        for (let option of allOptions) {\n            if (option.type === \"flag\") {\n                fullOptionString += \"-\" + option.name + \" \";\n            }\n            else {\n                fullOptionString += option.name + \"=\" + option.value + \" \";\n            }\n        }\n        this.props.changeSpacerUserOptions(fullOptionString);\n    }\n\n    storeSpacerOptions(e) {\n        e.preventDefault();\n        e.target.reset();\n        if (this.state.optionName === \"\" || (this.state.optionType !== \"custom\" && this.state.optionValue === \"\")) return;\n        let allOptions: {type:string, name: string, value:string}[] = this.state.allOptions;\n        allOptions.push({\n            name: this.state.optionName,\n            value: this.state.optionValue,\n            type: this.state.optionValue === \"\" ? \"flag\" : this.state.optionType\n        });\n        this.setState({\n            allOptions: allOptions\n        });\n        this.setState({\n            optionName: \"\",\n            optionValue: \"\",\n            optionType: \"\"\n        });\n        this.updateSpacerOptions();\n    }\n\n    displaySpacerOptions() {\n        if (this.props.spacerUserOptions !== \"\") {\n            return this.props.spacerUserOptions.trim().split(\" \");\n        }\n        return []\n    }\n\n    updateOptionValue(e){\n        this.setState({\n            optionValue: e.target.value\n        });\n    }\n\n    getOptions(name:string, type:string) {\n        if (type === \"bool\") {\n            this.setState({\n                optionTypeHTML:\n                    <React.Fragment>\n                        <input type=\"radio\" name={name} value=\"true\" onClick={this.updateOptionValue.bind(this)}/>True\n                        <input type=\"radio\" name={name} value=\"false\" onClick={this.updateOptionValue.bind(this)}/>False\n                        <button className=\"fake-button\" type=\"submit\" value=\"Submit\">+</button>\n                    </React.Fragment>\n            });\n        } else {\n            this.setState({\n                optionTypeHTML:\n                    <React.Fragment>\n                        <input type=\"text\" name={name} placeholder={type} defaultValue={this.state.optionValue} onChange={this.updateOptionValue.bind(this)}/>\n                        <button className=\"fake-button\" type=\"submit\" value=\"Submit\">+</button>\n                    </React.Fragment>\n            });\n        }\n    }\n\n    changeOptionType(e: React.ChangeEvent<HTMLInputElement>){\n        let tempList = options.filter(option => option.name === e.target.value);\n        let type = \"custom\";\n        if (tempList.length > 0) {\n            type = tempList[0].type;\n        }\n        this.setState({\n            optionName: e.target.value,\n            optionType: type\n        });\n        this.getOptions(e.target.value, type);\n    }\n\n    removeOption(name:string, value:string){\n        let allOptions: {type:string, name: string, value:string}[] = this.state.allOptions;\n        let rIndex = -1;\n        if (value === undefined){\n            name = name.replace(\"-\", \"\");\n            value = \"\";\n        }\n        for (let i = 0; i < allOptions.length; i++){\n            if (allOptions[i].name === name && allOptions[i].value === value){\n                rIndex = i;\n                break;\n            }\n        }\n        if (rIndex === -1) return;\n        allOptions.splice(rIndex, 1);\n        this.updateSpacerOptions();\n    }\n    changeSpacerManualUserOptions(event: React.ChangeEvent<HTMLInputElement>) {\n        const newValue = event.target.value;\n        this.props.changeSpacerUserOptions(newValue);\n    }\n\n    showHideOptions() {\n        this.setState({\n            showOptions: !this.state.showOptions\n        });\n    }\n    render() {\n        let selectedOptions = this.displaySpacerOptions();\n        return (\n            <aside>\n                <fieldset className=\"options-card\">\n                    <h3>Z3 Options</h3>\n                    <ul>\n                        <li>\n                            <label htmlFor=\"userOptions\" className=\"form-label\">Additional Spacer options</label>\n                            <button onClick={this.showHideOptions.bind(this)} className=\"showHideButton\" title={\"showHide\"}><img className=\"eyeImage\" src={eye} alt=\"eye\"/></button>\n                            {selectedOptions.length !== 0 && this.state.showOptions && selectedOptions.map((option, key) => {\n                                if (option !== \"\") {\n                                    let kvp = option.split(\"=\");\n                                    let name = kvp[0];\n                                    let value = kvp[1];\n                                    let displayValue = value ? name + \": \" + value : name;\n                                    return (\n                                        <div className=\"displaySpacerOption\" key={key}>\n                                            <span>{displayValue}</span>\n                                            <button className=\"fake-button\" type=\"button\" onClick={this.removeOption.bind(this, name, value)}>x</button>\n                                        </div>\n                                    );\n                                }\n                                return \"\";\n                            })}\n                            <form className=\"tfradio\" name=\"tfradio\" onSubmit={this.storeSpacerOptions.bind(this)}>\n                                <input type=\"text\" className=\"optionsList\" list=\"spacerOptions\" name=\"spacerOptions\" onChange={this.changeOptionType.bind(this)}/>\n                                <datalist id=\"spacerOptions\">\n                                    {options.map((part, key) => (\n                                        <option value={part.name} key={key}/>\n                                    ))}\n                                </datalist>\n                                {this.state.optionTypeHTML}\n                            </form>\n                        </li>\n                        <label>Or using manual run parameters</label>\n                        <input type=\"text\" name=\"manualRun\" onChange={this.changeSpacerManualUserOptions.bind(this)}/>\n                        <li>\n                            <label htmlFor=\"varOptions\" className=\"form-label\">Variable Designation</label>\n                            <p>Enter a single space separated list of your chosen variables in the order they appear (var1 var2 var3 ..)</p>\n                            <input type=\"text\" name=\"variables\" onChange={this.props.onChangeVariables}/>\n                        </li>\n                    </ul>\n                </fieldset>\n            </aside>\n        );\n    }\n}\n\nexport default MenuOptions;","import * as React from 'react';\nimport {Link} from 'react-router-dom';\nimport '../styles/Menu.css';\nimport * as Monaco from 'monaco-editor'\nimport ExpTable from './ExpTable';\nimport { assert } from '../model/util';\nimport MenuOptions from \"./MenuOptions\";\n\nconst icons = require('../resources/icons/all.svg') as string;\n\ntype Props = {\n    problem: string,\n    problemName: string,\n    spacerUserOptions: string,\n    hideBracketsAssoc: boolean,\n    nonStrictForNegatedStrictInequalities: boolean\n    orientClauses: boolean,\n    onChangeProblem: (problem: string) => void,\n    onChangeProblemName: (problemName: string) => void,\n    onChangeSpacerUserOptions: (spacerUserOptions: string) => void,\n    onChangeHideBracketsAssoc: (newValue: boolean) => void,\n    onChangeNonStrictForNegatedStrictInequalities: (newValue: boolean) => void,\n    onChangeOrientClauses: (newValue: boolean) => void\n    onChangeVariables: (newValue: string) => void\n}\n\nexport class Menu extends React.Component<Props, {}> {\n    // private isChromeOrFirefox = navigator.userAgent.indexOf('Chrome') > -1 || navigator.userAgent.indexOf('Firefox') > -1;\n    private isChromeOrFirefox = true;\n    private fileUpload = React.createRef<HTMLInputElement>();\n    monacoDiv = React.createRef<HTMLDivElement>();\n    monaco: Monaco.editor.IStandaloneCodeEditor | null = null\n\n    componentDidMount() {\n        if (!this.isChromeOrFirefox) {\n            return;\n        }\n        // generate instance of Monaco Editor\n        this.monaco = Monaco.editor.create(this.monacoDiv.current!, {\n            lineNumbers: 'off',\n            roundedSelection: false,\n            scrollBeyondLastLine: false,\n            scrollBeyondLastColumn: 0,\n            minimap: {\n                enabled: false\n            },\n            renderLineHighlight: 'none',\n            hideCursorInOverviewRuler: true,\n            links: false,\n            overviewRulerBorder: false,\n            automaticLayout: true,\n            lineDecorationsWidth: 0,\n            lineNumbersMinChars: 0,\n            wordWrap: 'wordWrapColumn'\n            // fontFamily: \"Monaco\" TODO: decide which font to use. By default, multiple fonts are loaded, which is quite slow\n        });\n        this.monaco.setValue(this.props.problem);\n        this.monaco.getModel()!.onDidChangeContent(() => {\n            this.props.onChangeProblem(this.monaco!.getModel()!.getValue());\n        });\n    }\n\n    componentDidUpdate(prevProps: Props) {\n        assert(this.isChromeOrFirefox);\n        if (this.props.problem !== prevProps.problem) {\n            this.monaco!.setValue(this.props.problem);\n        }\n    }\n\n    render() {\n        if (!this.isChromeOrFirefox) {\n            return (\n                <section className=\"unsupported-message\">\n                    <svg viewBox=\"0 0 24 24\" className=\"icon\">\n                        <use xlinkHref={`${icons}#alert-triangle`}/>\n                    </svg>\n                    <span>Your current browser is not supported. Please use Chrome or Firefox!</span>\n                </section>\n            );\n        }\n\n        return (\n            <section className=\"component-menu\">\n                <h1>Spacer Visualization</h1>\n\n                <section className=\"editor\">\n                    <div className=\"editor-spacer\">\n                        <main>\n                            <div className=\"headline-wrapper\">\n                                <h2>Input</h2>\n                                <small className=\"file-name\">{this.props.problemName}</small>\n                                <button title=\"Pick a new file\" onClick={this.chooseFile.bind(this)}>\n                                    <svg viewBox=\"0 0 24 24\" className=\"icon big\">\n                                        <use xlinkHref={`${icons}#graph-upload`}/>\n                                    </svg>\n                                </button>\n                            </div>\n\n                            <input\n                                ref={this.fileUpload}\n                                type=\"file\"\n                                onChange={this.uploadEncoding.bind(this)}\n                            />\n                            <div ref={this.monacoDiv} className=\"monaco\"></div>\n                        </main>\n\n                        <aside>\n                            <MenuOptions \n                                spacerUserOptions = {this.props.spacerUserOptions}\n                                onChangeVariables = {this.onChangeVariables.bind(this)}\n                                changeSpacerUserOptions={this.props.onChangeSpacerUserOptions.bind(this)}\n                            />\n                            <ExpTable/>\n                        </aside>\n                    </div>\n                </section>\n\n                <section className=\"run-menu\">\n                    <Link to=\"/iterative/\" className=\"fake-button\">Hit and Run</Link>\n                </section>\n            </section>\n        );\n    }\n\n    chooseFile() {\n        if (this.fileUpload.current) {\n            this.fileUpload.current.click();\n        }\n    }\n\n    onChangeVariables(e) {\n        this.props.onChangeVariables(e.target.value);\n    }\n\n    uploadEncoding(event: React.ChangeEvent<HTMLInputElement>) {\n        if (event.target.files !== null && event.target.files.length > 0) {\n            const file = event.target.files[0];\n\n            const reader = new FileReader();\n            // callback which will be executed when readAsText is called\n            reader.onloadend = () => {\n                const text = (reader.result ? reader.result : '') as string;\n                this.props.onChangeProblem(text);\n                this.props.onChangeProblemName(file.name);\n\n            };\n            reader.readAsText(file);\n        }\n    }\n}\n","import * as React from 'react';\nimport * as d3 from 'd3';\nimport SunburstChart, {Node} from \"sunburst-chart\";\nimport {timeDetailedItem} from \"../dashboardTypes\";\n\ntype Props = {\n    data: timeDetailedItem | {},\n    height: number,\n    width: number,\n    className: string,\n    type: string,\n    index: string\n}\n\ntype State = {}\n\nclass TimeChart extends React.Component<Props, State> {\n    private totalTime: number;\n    private readonly palette: string[];\n    constructor(props) {\n        super(props);\n        this.totalTime = -1;\n        this.palette = [\"#023FA5\", \"#7D87B9\", \"#BEC1D4\", \"#D6BCC0\", \"#BB7784\", \"#8E063B\", \"#4A6FE3\", \"#8595E1\", \"#B5BBE3\",\n                \"#E6AFB9\", \"#E07B91\", \"#D33F6A\", \"#11C638\", \"#8DD593\", \"#C6DEC7\", \"#EAD3C6\", \"#F0B98D\", \"#EF9708\",\n                \"#0FCFC0\", \"#9CDED6\", \"#D5EAE7\", \"#F3E1EB\", \"#F6C4E1\", \"#F79CD4\"]\n    }\n    componentDidMount() {\n        this.createSunburst();\n    }\n    componentDidUpdate(prevProps: Readonly<any>, prevState: Readonly<any>, snapshot?: any): void {\n        this.createSunburst();\n    }\n\n    prepareData() {\n        let tmp:Object[] = [];\n        let keys = Object.keys(this.props.data);\n        \n        for (let i = 0; i < keys.length; i++){\n            tmp.push({\n                name: keys[i], \n                size: this.props.data[keys[i]],\n                children: []\n            });\n        }\n        \n        return tmp;\n    }\n    \n    getData(input): Node[] {        \n        let result = {};\n        let last = \"zzzzzzz\";\n        \n        for (let i = 0; i < input.length; i++){\n            let key = input[i].name;\n            let value = input[i].size;\n            \n            if (key.includes(last)){\n                result[last].children.push({\n                    name: key,\n                    size: value,\n                    children: []\n                });\n            }\n            else {\n                result[key] = {\n                    name: key,\n                    size: value,\n                    children: []\n                };\n                last = key\n            }\n        }\n        \n        let resultKeys = Object.keys(result);\n        for (let i = 0; i < resultKeys.length; i++){\n            if (result[resultKeys[i]].children){\n                result[resultKeys[i]].children = this.getData(result[resultKeys[i]].children);\n            }\n        }\n        \n        return Object.values(result);\n    }\n    \n    createSunburst() {\n        if (this.props.type === \"\") d3.select(\".sunburst-viz\").remove();\n        if (this.props.type !== \"\") d3.select(\".\" + this.props.className + \" .sunburst-viz\").remove();\n        let colour = d3.scaleOrdinal()\n            .domain(Object.keys(this.props.data))\n            .range(this.palette);\n        let data: Node[] = this.getData(this.prepareData());\n        const myChart = SunburstChart();\n        myChart.data(data[0])(document.getElementById(this.props.className)!)\n               .width(this.props.width)\n               .height(this.props.height)\n               .color(x => colour(x.name))\n               .label(x => x.name!)\n               .size('size')\n               .tooltipTitle(x => x.name!);\n        \n        if (this.props.type !== \"\"){\n            myChart.showLabels(false);\n        }\n    }\n\n\n    render() {\n        this.totalTime = this.props.data[\"time\"];\n        return (\n          <div className={this.props.className} id={this.props.className}>\n              {this.props.type === \"\" && <h2>Total Time: {this.totalTime}</h2>}\n              {this.props.type !== \"\" && <p>{this.props.index}</p>}\n              \n          </div>  \n        );\n    }\n}\n\nexport default TimeChart;\n","export function potholeToNormal(input) {\n    let words = input.split(\"_\");\n    for (let i = 0; i < words.length; i++){\n        words[i] = words[i][0].toUpperCase() + words[i].substring(1);\n    }\n    \n    return words.join(\" \");\n    \n}","import * as React from 'react';\nimport TimeChart from \"./TimeChart\";\nimport {potholeToNormal} from \"../../helpers/naming\";\nimport {dataItem} from \"../dashboardTypes\";\n\ntype Props = {\n    data: dataItem\n}\n\ntype State = {}\n\nclass IndividualBenchmark extends React.Component<Props, State> {\n    componentDidMount() {\n        console.log(this.props.data);\n    }\n    componentDidUpdate(prevProps: Readonly<any>, prevState: Readonly<any>, snapshot?: any): void {\n        console.log(this.props.data);\n    }\n\n    filterTimeData() {\n        return Object.keys(this.props.data)\n            .filter(function(d) {return d.includes(\"time\")})\n            .reduce((obj, key) => {\n                obj[key] = this.props.data[key];\n                return obj;\n            }, {});\n    }\n    render() {\n        let dataDisplay = [\"result\",\"depth\", \"memory\", \"max_memory\", \"SPACER_num_invariants\", \"SPACER_num_lemmas\",\n            \"SPACER_num_propagations\", \"SPACER_num_active_lemmas\"];\n        let timeData = this.filterTimeData();\n        return (\n          <div className=\"overview\">\n              <div className=\"details\">\n                  <h1>{this.props.data.index}</h1>\n                  {dataDisplay.map((dataKey, key) => (\n                      <p className=\"data-details\" key={key}>{potholeToNormal(dataKey)}: {this.props.data[dataKey]}</p>\n                  ))}\n              </div>\n              <TimeChart \n                  data={timeData}\n                  height={600}\n                  width={600}\n                  className={\"time\"}\n                  type={\"\"}\n                  index={\"\"}\n              />\n          </div>  \n        );\n    }\n}\n\nexport default IndividualBenchmark;","import * as React from 'react';\nimport * as d3 from 'd3';\nimport {dashboardConfig, resultItem} from \"../dashboardTypes\";\n\ntype Props = {\n    key: number,\n    data: resultItem [],\n    config: dashboardConfig,\n    selectBenchmark: (e: resultItem) => void\n}\n\ntype State = {}\n\nclass ResultsOverview extends React.Component<Props, State> {\n    componentDidMount() {\n        this.createResultsOverview();\n    }\n    componentDidUpdate(prevProps: Readonly<any>, prevState: Readonly<any>, snapshot?: any): void {\n        this.createResultsOverview();\n    }\n\n    createResultsOverview() {\n        d3.select(\".results-overview svg\").remove();\n        let data = this.props.data;\n        \n        let results = d3.map(data, function(d) {return d.result;}).keys();\n        \n        let colour = d3.scaleOrdinal()\n            .domain(results)\n            .range(d3.schemeCategory10);\n        \n        let xValue = function(d) {\n            return d.index;\n        };\n        let index = d3.map(data,function(d) {return d.index;}).keys();\n        let xScale = d3.scaleBand()\n            .domain(index)\n            .range([this.props.config.margin.left, this.props.config.width - this.props.config.margin.right]);\n\n        let xMap = function(d) {\n            return xScale(xValue(d))\n        };\n\n        let xAxis = d3.axisBottom(xScale).tickValues([]);\n\n        let yValue = function(d) {\n            return d.SPACER_num_invariants;\n        };\n        let yScale = d3.scaleLinear()\n            .domain([d3.min(data, yValue), d3.max(data, yValue)])\n            .range([this.props.config.graphHeight - this.props.config.margin.top, this.props.config.margin.bottom]);\n\n        let yMap = function(d) {\n            return yScale(yValue(d))\n        };\n\n        let yAxis = d3.axisLeft(yScale);\n\n        let svg = d3.select(\".results-overview\")\n            .append(\"svg\")\n            .attr(\"width\", this.props.config.width)\n            .attr(\"height\", this.props.config.height);\n        svg.append(\"text\")\n            .attr(\"x\", this.props.config.width / 2)\n            .attr(\"y\", this.props.config.margin.top)\n            .attr(\"text-anchor\", \"middle\")\n            .style(\"font-size\", this.props.config.font.title)\n            .style(\"text-decoration\", \"underline\")\n            .text(\"Index x Result x Num of Invariants\");\n        svg.append(\"g\")\n            .attr(\"class\", \"x-axis\")\n            .attr(\"transform\", \"translate(0,\" + (this.props.config.graphHeight - this.props.config.margin.top) + \")\")\n            .call(xAxis);\n        svg.append(\"g\")\n            .attr(\"class\", \"y-axis\")\n            .attr(\"transform\", \"translate(\" + this.props.config.margin.left + \",0)\")\n            .style(\"font-size\", this.props.config.font.axis)\n            .call(yAxis);\n        let g = svg.append(\"g\");\n        g.selectAll(\".dot\")\n            .data(data)\n            .enter()\n            .append('circle')\n            .attr('r', 10)\n            .attr('cx', function(d) {return xMap(d) + xScale.bandwidth() /2})\n            .attr('cy', yMap)\n            .on(\"mouseenter\", function(d) {\n                d3.select(\".overview-tooltip\")\n                    .append(\"text\")\n                    .text(d.index);\n            })\n            .on(\"mouseout\", function(d) {\n                d3.select(\".overview-tooltip\")\n                    .select(\"text\")\n                    .remove();\n            })\n            .on(\"click\", this.props.selectBenchmark)\n            .style(\"fill\", function(d) {return colour(d.result)});\n        g.selectAll(\".result-text\")\n            .data(data)\n            .enter()\n            .append(\"text\")\n            .attr(\"class\", \"label\")\n            .style(\"font-size\", this.props.config.font.label)\n            .attr(\"x\", function(d) {return xMap(d) + (xScale.bandwidth() / 4)})\n            .attr(\"y\", function(d) {return yMap(d) - 25})\n            .attr(\"dy\", \".75em\")\n            .text(function(d) {return d.SPACER_num_invariants});\n        g.selectAll(\"legendDots\")\n            .data(results)\n            .enter()\n            .append(\"circle\")\n            .attr(\"cx\", function(this,d,i) {return this.props.config.margin.left + i*100}.bind(this))\n            .attr(\"cy\", this.props.config.graphHeight + 15)\n            .attr(\"r\", 5)\n            .style(\"fill\", function(d){return colour(d)});\n        g.selectAll(\"legendText\")\n            .data(results)\n            .enter()\n            .append(\"text\")\n            .attr(\"x\", function(this,d,i){return this.props.config.margin.left + 10 + i*100}.bind(this))\n            .attr(\"y\", this.props.config.graphHeight + 20)\n            .text(function(d){return d})\n\n\n\n    }\n\n    render() {\n        return (\n            <div className=\"results-overview\">\n            </div>\n        );\n    }\n}\n\nexport default ResultsOverview\n","import * as React from 'react';\nimport TimeChart from \"./TimeChart\";\nimport {timeDetailedItem} from \"../dashboardTypes\";\n\ntype State = {}\n\ntype Props = {\n    data: timeDetailedItem[]\n}\n\nclass TimeZoom extends React.Component<Props, State> {\n    render() {\n        return (\n            <div>\n                {this.props.data.map((instance, key) => {\n                    return (\n                        <TimeChart\n                            key={key}\n                            data={instance}\n                            height={200}\n                            width={200}\n                            className={\"timezoom\" + key}\n                            type={\"timezoom\"}\n                            index={instance[\"index\"]!}\n                        />\n                    );\n                })}\n                \n            </div>\n        );\n    }\n}\n\nexport default TimeZoom;\n","import * as React from 'react';\nimport * as d3 from 'd3';\nimport {potholeToNormal} from \"../../helpers/naming\";\nimport {dashboardConfig, depthItem, memoryItem, timeItem} from \"../dashboardTypes\";\n\ntype Props = {\n    key: number,\n    data: (depthItem | memoryItem | timeItem) [],\n    config: dashboardConfig,\n    className: string,\n    classText: string,\n    yValue: string,\n    updateZoomView: (type:string) => void\n}\n\ntype State = {}\n\nclass GeneralGraphOverview extends React.Component<Props, State> {\n    componentDidMount() {\n        this.createGraph();\n    }\n    componentDidUpdate(prevProps: Readonly<any>, prevState: Readonly<any>, snapshot?: any): void {\n        this.createGraph();\n    }\n    \n    createGraph() {\n        d3.select(\".\" + this.props.className + \" svg\").remove();\n        \n        if (this.props.data.length === 0) return;\n        let data = this.props.data;\n        let xValue = function(d) {\n            return d.index;\n        };\n        let index = d3.map(data,function(d) {return d.index;}).keys();\n        let xScale = d3.scaleBand()\n            .domain(index)\n            .range([this.props.config.margin.left, this.props.config.width - this.props.config.margin.right]);\n        let xMap = function(d) {\n            return xScale(xValue(d))\n        };\n        let xAxis = d3.axisBottom(xScale).tickValues([]);\n\n        let yValue = function(this,d) {\n            return d[this.props.yValue];\n        }.bind(this);\n        let yScale = d3.scaleLinear()\n            .domain([d3.min(data, yValue), d3.max(data, yValue)])\n            .range([this.props.config.graphHeight - this.props.config.margin.top, this.props.config.margin.bottom]);\n        let yMap = function(d) {\n            return yScale(yValue(d))\n        };\n        let yAxis = d3.axisLeft(yScale);\n\n        let svg = d3.select(\".\" + this.props.className)\n            .append(\"svg\")\n            .attr(\"width\", this.props.config.width)\n            .attr(\"height\", this.props.config.height)\n            .on (\"click\", this.props.updateZoomView);\n        svg.append(\"text\")\n            .attr(\"x\", this.props.config.width / 2)\n            .attr(\"y\", this.props.config.margin.top)\n            .attr(\"text-anchor\", \"middle\")\n            .style(\"font-size\", this.props.config.font.title)\n            .style(\"text-decoration\", \"underline\")\n            .text(\"Index x \" + potholeToNormal(this.props.yValue));\n        svg.append(\"g\")\n            .attr(\"class\", \"x-axis\")\n            .attr(\"transform\", \"translate(0,\" + (this.props.config.graphHeight - this.props.config.margin.top) + \")\")\n            .call(xAxis);\n        svg.append(\"g\")\n            .attr(\"class\", \"y-axis\")\n            .attr(\"transform\", \"translate(\" + this.props.config.margin.left + \",0)\")\n            .style(\"font-size\", this.props.config.font.axis)\n            .call(yAxis);\n        let g = svg.append(\"g\");\n        \n        g.selectAll(\".bar\")\n            .data(data)\n            .enter()\n            .append(\"rect\")\n            .attr(\"class\", \"bar\")\n            .attr(\"x\", xMap)\n            .attr(\"y\", yMap)\n            .attr(\"width\", xScale.bandwidth() - 1)\n            .attr(\"height\", function(this,d) {return (this.props.config.graphHeight - this.props.config.margin.top - yScale(d[this.props.yValue]))}.bind(this));\n\n        g.selectAll(\".\" + this.props.classText)\n            .data(data)\n            .enter()\n            .append(\"text\")\n            .style(\"font-size\", this.props.config.font.label)\n            .attr(\"class\", \"label\")\n            .attr(\"x\", function(d) {return xMap(d)})\n            .attr(\"y\", function(d) {return yMap(d) - 15})\n            .attr(\"dy\", \".75em\")\n            .text(function(this,d) {return d[this.props.yValue]}.bind(this));\n    }\n    render() {\n        return (\n            <div className={this.props.className}>\n            </div>\n\n        );\n    }\n}\n\nexport default GeneralGraphOverview;\n","import * as React from 'react';\nimport './../styles/Dashboard.css';\nimport * as d3 from 'd3';\nimport IndividualBenchmark from \"./DashboardComponents/IndividualBenchmark\";\nimport ResultsOverview from \"./DashboardComponents/ResultsOverview\";\nimport arrow from './../resources/icons/singles/angle-arrow-down.svg'\nimport TimeZoom from \"./DashboardComponents/TimeZoom\";\nimport GeneralGraphOverview from \"./DashboardComponents/GeneralGraphOverview\";\nimport {dashboardConfig, dataItem, depthItem, memoryItem, resultItem, timeItem} from \"./dashboardTypes\";\n\ntype State = {\n    data: dataItem[]\n    selectedBenchmark: string,\n    graphMin: number,\n    graphMax: number,\n    customMode: boolean,\n    customData: {\n        depth: depthItem[],\n        result: resultItem[], \n        memory: memoryItem[], \n        time: timeItem[]\n    },\n    zoomMode: string,\n    dashboardConfig: dashboardConfig\n}\n\ntype Props = {\n    rawData: string\n}\n\nclass Dashboard extends React.Component<Props, State> {\n    private readonly overviewMetrics: string[];\n    constructor(props: Props) {\n        super(props);\n        this.overviewMetrics = [\"depth\", \"memory\", \"time\", \"result\"];\n            this.state = {\n            data: [],\n            selectedBenchmark: \"\",\n            graphMin: 0,\n            graphMax: 30,\n            customMode: false,\n            customData: {\n                depth: [],\n                result: [],\n                memory: [],\n                time: []\n            },\n            zoomMode: \"\",\n            dashboardConfig: {\n                height: 450,\n                width: 1600,\n                graphHeight: 400,\n                margin: {\n                    top: 20,\n                    right: 20,\n                    bottom: 50,\n                    left: 60\n                },\n                font: {\n                    title: \"20px\",\n                    axis: \"20px\",\n                    label: \"14px\"\n                },\n                barNum: 10\n            }\n        };\n    }\n    componentDidMount() {\n        this.loadData();\n        document.addEventListener(\"keydown\", this.handleGraphTranslationKeyboard.bind(this));\n    }\n    \n\n    loadData() {\n        let file = this.props.rawData;\n        let parsedData = d3.csvParse(file, function (d) {\n            d.SPACER_cluster_out_of_gas = +d.SPACER_cluster_out_of_gas;\n            d.SPACER_expand_pob_undef = +d.SPACER_expand_pob_undef;\n            d.SPACER_inductive_level = +d.SPACER_inductive_level;\n            d.SPACER_max_cluster_size = +d.SPACER_max_cluster_size;\n            d.SPACER_max_cvx_reduced_dim = +d.SPACER_max_cvx_reduced_dim;\n            d.depth = +d.depth;\n            d.SPACER_max_query_lvl = +d.SPACER_max_query_lvl;\n            d.SPACER_need_sage = +d.SPACER_need_sage;\n            d.SPACER_num_abstractions = +d.SPACER_num_abstractions;\n            d.SPACER_num_abstractions_failed = +d.SPACER_num_abstractions_failed;\n            d.SPACER_num_abstractions_success = +d.SPACER_num_abstractions_success;\n            d.SPACER_num_active_lemmas = +d.SPACER_num_active_lemmas;\n            d.SPACER_num_cant_abstract = +d.SPACER_num_cant_abstract;\n            d.SPACER_num_ctp_blocked = +d.SPACER_num_ctp_blocked;\n            d.SPACER_num_dim_reduction_success = +d.SPACER_num_dim_reduction_success;\n            d.SPACER_num_invariants = +d.SPACER_num_invariants;\n            d.SPACER_num_is_invariant = +d.SPACER_num_is_invariant;\n            d.SPACER_num_lemma_jumped = +d.SPACER_num_lemma_jumped;\n            d.SPACER_num_lemmas = +d.SPACER_num_lemmas;\n            d.SPACER_num_mbp_failed = +d.SPACER_num_mbp_failed;\n            d.SPACER_num_merge_gen = +d.SPACER_num_merge_gen;\n            d.SPACER_num_merge_gen_failed = +d.SPACER_num_merge_gen_failed;\n            d.SPACER_num_merge_gen_success = +d.SPACER_num_merge_gen_success;\n            d.SPACER_num_no_over_approximate = +d.SPACER_num_no_over_approximate;\n            d.SPACER_num_non_lin = +d.SPACER_num_non_lin;\n            d.SPACER_num_pobs = +d.SPACER_num_pobs;\n            d.SPACER_num_propagations = +d.SPACER_num_propagations;\n            d.SPACER_num_queries = +d.SPACER_num_queries;\n            d.SPACER_num_reach_queries = +d.SPACER_num_reach_queries;\n            d.SPACER_num_refinements = +d.SPACER_num_refinements;\n            d.SPACER_num_reuse_reach_facts = +d.SPACER_num_reuse_reach_facts;\n            d.SPACER_num_sync_cvx_cls = +d.SPACER_num_sync_cvx_cls;\n            d.SPACER_num_under_approximations = +d.SPACER_num_under_approximations;\n            d.SPACER_pob_out_of_gas = +d.SPACER_pob_out_of_gas;\n            d.SPACER_wide_attmpts = +d.SPACER_wide_attmpts;\n            d.SPACER_wide_success = +d.SPACER_wide_success;\n            d.max_memory = +d.max_memory;\n            d.memory = +d.memory;\n            d.time = +d.time;\n            d.time_iuc_solver_get_iuc = +d.time_iuc_solver_get_iuc;\n            d.time_iuc_solver_get_iuc_hyp_reduce1 = +d.time_iuc_solver_get_iuc_hyp_reduce1;\n            d.time_iuc_solver_get_iuc_hyp_reduce2 = +d.time_iuc_solver_get_iuc_hyp_reduce2;\n            d.time_iuc_solver_get_iuc_learn_core = +d.time_iuc_solver_get_iuc_learn_core;\n            d.time_pool_solver_proof = +d.time_pool_solver_proof;\n            d.time_pool_solver_smt_total = +d.time_pool_solver_smt_total;\n            d.time_pool_solver_smt_total_sat = +d.time_pool_solver_smt_total_sat;\n            d.time_pool_solver_smt_total_undef = +d.time_pool_solver_smt_total_undef;\n            d.time_spacer_ctp = +d.time_spacer_ctp;\n            d.time_spacer_init_rules = +d.time_spacer_init_rules;\n            d.time_spacer_init_rules_pt_init = +d.time_spacer_init_rules_pt_init;\n            d.time_spacer_mbp = +d.time_spacer_mbp;\n            d.time_spacer_solve = +d.time_spacer_solve;\n            d.time_spacer_solve_propagate = +d.time_spacer_solve_propagate;\n            d.time_spacer_solve_pt_must_reachable = +d.time_spacer_solve_pt_must_reachable;\n            d.time_spacer_solve_reach = +d.time_spacer_solve_reach;\n            d.time_spacer_solve_reach_children = +d.time_spacer_solve_reach_children;\n            d.time_spacer_solve_reach_cluster = +d.time_spacer_solve_reach_cluster;\n            d.time_spacer_solve_reach_gen_bool_ind = +d.time_spacer_solve_reach_gen_bool_ind;\n            d.time_spacer_solve_reach_gen_merge = +d.time_spacer_solve_reach_gen_merge;\n            d.time_spacer_solve_reach_gen_merge_cvx_cls = +d.time_spacer_solve_reach_gen_merge_cvx_cls;\n            d.time_spacer_solve_reach_gen_wide = +d.time_spacer_solve_reach_gen_wide;\n            d.time_spacer_solve_reach_is_reach = +d.time_spacer_solve_reach_is_reach;\n            return d;\n        });\n        this.setState({\n            data: parsedData\n        })\n        \n    }\n    \n    handleSidebarClick(e:React.MouseEvent<HTMLLIElement>) {\n        let event = e.target as HTMLElement;\n        this.setState({\n            selectedBenchmark: event.innerText\n        });\n    }\n    \n    handleSidebarClickDot(e: resultItem){\n        this.setState({\n            selectedBenchmark: e.index\n        });\n    }\n    \n    handleHomeClick() {\n        this.setState({\n            selectedBenchmark: \"\",\n            customMode: false,\n            customData: {\n                depth: [],\n                time: [],\n                memory: [],\n                result: []\n            },\n            zoomMode: \"\", \n            graphMin: 0,\n            graphMax: 30\n        });\n    }\n    \n    handleClearClick() {\n        this.setState({\n            customData: {\n                depth: [],\n                time: [],\n                memory: [],\n                result: []\n            }\n        });\n    }\n    \n    moveGraphLeft() {\n        if (this.state.graphMin > 0){\n            this.setState({\n                graphMin: this.state.graphMin - 1,\n                graphMax: this.state.graphMax - 1\n            });\n        }\n    }\n    \n    moveGraphRight() {\n        if (this.state.graphMax < this.state.data.length - 1 ){\n            this.setState({\n                graphMin: this.state.graphMin + 1,\n                graphMax: this.state.graphMax + 1\n            });\n        }\n    }\n    \n    moveGraphUp() {\n        if (this.state.graphMin - 10 >= 0 ){\n            this.setState({\n                graphMin: this.state.graphMin - 10,\n                graphMax: this.state.graphMax - 10\n            });\n        }\n    }\n\n    moveGraphDown() {\n        if (this.state.graphMax + 10 < this.state.data.length){\n            this.setState({\n                graphMin: this.state.graphMin + 10,\n                graphMax: this.state.graphMax + 10\n            });\n        }\n    }\n\n    handleGraphTranslationClick(e:React.MouseEvent) {\n        e.preventDefault();\n        let clickEvent = e.target as HTMLImageElement;\n        if (clickEvent.alt === \"left-arrow\"){\n            this.moveGraphLeft();\n        }\n        else if (clickEvent.alt === \"right-arrow\"){\n            this.moveGraphRight();\n        }\n    }\n    \n    handleGraphTranslationKeyboard(e:KeyboardEvent) {\n        e.preventDefault();\n        if  (e.key === \"ArrowLeft\"){\n            this.moveGraphLeft();\n        }\n        else if (e.key === \"ArrowRight\") {\n            this.moveGraphRight();\n        }\n        else if (e.key === \"ArrowDown\") {\n            this.moveGraphDown();\n        }\n        else if (e.key === \"ArrowUp\") {\n            this.moveGraphUp();\n        }\n        \n    }\n    \n    handleCustomClick() {\n        this.setState({\n            customMode: !this.state.customMode\n        });\n        if (this.state.customMode){\n            this.setState({\n                customData: {\n                    depth: [],\n                    time: [],\n                    memory: [],\n                    result: []\n                }\n            });\n        }\n    }\n\n    filterDictionary(keys, custom:boolean=false, index:string=\"\"){\n        let data = this.state.data.slice(this.state.graphMin, this.state.graphMax);\n        if (custom) {\n            data = this.state.data.filter(function(d) {return d.index === index})\n        }\n        let result:Object[] = [];\n        for (let i = 0; i < data.length; i++){\n            result.push({});\n            for (let j = 0; j < keys.length; j ++){\n                result[i][keys[j]] = data[i][keys[j]];\n            }\n        }\n        return result;\n    }\n    \n    addToCustomData(e: React.MouseEvent) {\n        let event = e.target as HTMLLIElement;\n        for (let i = 0; i < this.overviewMetrics.length; i++){\n            let metric = this.overviewMetrics[i];\n            let metricDataKeys = [metric].concat([\"index\"]);\n            if (metric === \"result\") {\n                metricDataKeys.push(\"SPACER_num_invariants\");\n            }\n            let totalData = this.state.customData[metric].concat(this.filterDictionary(metricDataKeys, true, event.innerHTML));\n            \n            if (totalData.length > (this.state.graphMax - this.state.graphMin)){\n                totalData.splice(0,1);\n            }\n            let customDataCopy = this.state.customData;\n            customDataCopy[metric] = totalData;\n            this.setState({\n                customData: customDataCopy\n            });\n        }\n    }\n    \n    setZoomView(type: string) {\n        this.setState({\n            zoomMode: type, \n            graphMin: 0,\n            graphMax: 49\n        });\n    }\n    \n    render() {\n        let benchmarks = d3.map(this.state.data, function(d) {return d.index;}).keys();\n        let selectedBenchmark = this.state.selectedBenchmark;\n        let timeZoomData;\n        if (this.state.zoomMode === \"time\") {\n            let timeKeys = Object.keys(this.state.data[0]).filter(x => x.includes(\"time\"));\n            timeKeys.push(\"index\");\n            timeZoomData = this.filterDictionary(timeKeys);\n        }\n        return (\n          <div className=\"page\">\n                  <div className=\"sidebar\" id=\"sidebar\">\n                  {benchmarks.map((name, key ) => {\n                      if (this.state.customMode){\n                          if (this.state.customData.depth.filter(d => d.index === name).length > 0){\n                              return (<li className=\"selected\" key={key} onClick={this.addToCustomData.bind(this)}>{name}</li>);\n                          }\n                          return (<li key={key} onClick={this.addToCustomData.bind(this)}>{name}</li>);\n                      }\n                      else if (selectedBenchmark) {\n                          if (name === selectedBenchmark) {\n                              return (<li className=\"selected\" key={key}\n                                          onClick={this.handleSidebarClick.bind(this)}>{name}</li>);\n                          }\n                          return (<li key={key} onClick={this.handleSidebarClick.bind(this)}>{name}</li>);\n                          \n                      }\n                      else {\n                          if (key >= this.state.graphMin && key < this.state.graphMax) {\n                              return (<li className=\"selected\" key={key}\n                                          onClick={this.handleSidebarClick.bind(this)}>{name}</li>);\n                          }\n                          return (<li key={key} onClick={this.handleSidebarClick.bind(this)}>{name}</li>);\n                      }\n                  })}\n              </div>\n              <div className=\"visual\">\n                  {this.state.selectedBenchmark !== \"\" &&\n                  <IndividualBenchmark \n                      data={this.state.data.filter(function(d) {return d.index === selectedBenchmark})[0]}\n                  />}\n                  {this.state.selectedBenchmark === \"\" && this.state.zoomMode === \"\" &&\n                  <div className=\"dashboard\">\n                      {this.overviewMetrics.map((type, key) => {\n                          let data;\n                          if (this.state.customMode) {\n                              data = this.state.customData[type];\n                              if (type === \"result\"){\n                                  return (\n                                      <ResultsOverview\n                                          key={key}\n                                          data={data}\n                                          config={this.state.dashboardConfig}\n                                          selectBenchmark={this.handleSidebarClickDot.bind(this)}\n                                      />\n                                  );\n                                  \n                              }\n                          }\n                          else if (type === \"result\"){\n                              data = this.filterDictionary([type].concat([\"index\", \"SPACER_num_invariants\"]));\n                              return (\n                                  <ResultsOverview\n                                      key={key}\n                                      data={data}\n                                      config={this.state.dashboardConfig}\n                                      selectBenchmark={this.handleSidebarClickDot.bind(this)}\n                                  />\n                              );\n                          }\n                          else {\n                              data = this.filterDictionary([\"index\"].concat([type]));\n                          }\n                          return (\n                              <GeneralGraphOverview\n                                  key={key}\n                                  data={data}\n                                  config={this.state.dashboardConfig}\n                                  className={type + \"-overview\"}\n                                  classText={type + \"-text\"}\n                                  yValue={type}\n                                  updateZoomView={this.setZoomView.bind(this, type === \"time\" ? \"time\" : \"\")}\n                              />\n                          );\n                      })}\n                      <img className=\"left-arrow\" src={arrow} alt=\"left-arrow\" onClick={this.handleGraphTranslationClick.bind(this)}/>\n                      <img className=\"right-arrow\" src={arrow} alt=\"right-arrow\" onClick={this.handleGraphTranslationClick.bind(this)}/>\n                  </div>}\n                  {this.state.zoomMode === \"time\" &&\n                  <TimeZoom\n                      data={timeZoomData}\n                      \n                  />}\n              </div>\n              \n              <button className=\"home-button\" onClick={this.handleHomeClick.bind(this)}>Home</button>\n              <button className=\"custom-button\" onClick={this.handleCustomClick.bind(this)}>Custom</button>\n              {this.state.customMode && <button className=\"clear-button\" onClick={this.handleClearClick.bind(this)}>Clear</button>}\n          </div>  \n        );\n    }\n}\n\nexport default Dashboard;\n","import * as React from 'react';\n\ntype Props = {\n    rawData: {name: string, id: string, content: string}[],\n    updateData: (newValue: {name:string, id:string, content:string}) => void\n}\n\ntype State = {\n    rawData: [],\n    file: File | null\n}\n\nclass DashboardLanding extends React.Component<Props, State> {\n    private fileReader: FileReader | undefined;\n    constructor(props) {\n        super(props);\n        this.state = {\n            rawData: [],\n            file: null\n        }\n    }\n    \n    handleFileRead(file: File) {\n        const content = this.fileReader!.result!.toString();\n        let returnObject = {\n            name: file.name,\n            id: Date.now().toString(),\n            content: content!\n        };\n        \n        this.props.updateData(returnObject);\n    }\n    \n    handleFileChosen(e: React.MouseEvent<HTMLButtonElement>) {\n        e.preventDefault();\n        let file = this.state.file;\n        this.fileReader = new FileReader();\n        this.fileReader.onloadend = this.handleFileRead.bind(this, file!);\n        this.fileReader.readAsText(file!);\n    }\n    \n    updateFile(e: React.ChangeEvent<HTMLInputElement>) {\n        this.setState({\n            file: e.target.files![0]\n        });\n    }\n    \n    render() {\n        return (\n            <div className=\"dashboard-menu\">\n                <h1>Spacer Dashboard</h1>\n                <form>\n                <input type=\"file\" accept=\".csv\" onChange={this.updateFile.bind(this)}/>\n                <button type=\"submit\" className=\"fake-button\" onClick={this.handleFileChosen.bind(this)}>Upload</button>\n                </form>\n                <div className=\"file-list\">\n                    <h2>Uploaded Files</h2>\n                    {this.props.rawData.length > 0 && this.props.rawData.map((dataItem, key) => (\n                        <li key={key}>\n                            <span>{dataItem.name}</span><a href={\"#/dashboard/\" + dataItem.id}>Analysis</a>\n                        </li>\n                    ))}\n                </div>\n            </div>\n        );\n    }\n}\n\nexport default DashboardLanding;\n","import * as React from 'react';\nimport { HashRouter, Route} from \"react-router-dom\";\nimport { AppWrapper } from './AppWrapper'\nimport { Menu } from './Menu';\nimport { RouteComponentProps } from 'react-router';\nimport Dashboard from \"./Dashboard\";\nimport DashboardLanding from \"./DashboardLanding\";\ntype State = {\n    problem: string,\n    problemName: string,\n    spacerUserOptions: string,\n    hideBracketsAssoc: boolean,\n    nonStrictForNegatedStrictInequalities: boolean,\n    orientClauses: boolean\n    varNames: string\n    rawData: {name: string, id: string, content: string}[]\n}\n\nexport class AppRouter extends React.Component<{} & RouteComponentProps<{}>, State> {\n\n    state: State = {\n        problem: \"\",\n        problemName: \"\",\n        spacerUserOptions: \"\",\n        hideBracketsAssoc: true,\n        nonStrictForNegatedStrictInequalities: true,\n        orientClauses: true,\n        varNames: \"\",\n        rawData: []\n    };\n\n    render() {\n        return (\n            <HashRouter>\n                <Route path=\"/\" exact render={() => \n                    <Menu \n                        problem={this.state.problem}\n                                problemName={this.state.problemName}\n                                spacerUserOptions={this.state.spacerUserOptions}\n                                hideBracketsAssoc={this.state.hideBracketsAssoc}\n                                nonStrictForNegatedStrictInequalities={this.state.nonStrictForNegatedStrictInequalities}\n                                orientClauses={this.state.orientClauses}\n                                onChangeProblem={this.changeProblem.bind(this)}\n                                onChangeProblemName={this.changeProblemName.bind(this)}\n                                onChangeSpacerUserOptions={this.changeSpacerUserOptions.bind(this)}\n                                onChangeHideBracketsAssoc={this.changeHideBracketsAssoc.bind(this)}\n                                onChangeNonStrictForNegatedStrictInequalities={this.changeNonStrictForNegatedStrictInequalities.bind(this)}\n                                onChangeOrientClauses={this.changeOrientClauses.bind(this)}\n                                onChangeVariables={this.changeVariables.bind(this)}\n                    />\n                }/>\n                <Route path=\"/replay/:exp_id\" render={({match}) => \n                    this.appComponent(\"replay\", match.params.exp_id)\n                }/>\n                <Route path=\"/iterative/\" render={() => \n                    this.appComponent(\"iterative\", \"\")\n                }/>\n                <Route exact path=\"/dashboard/\" render={() =>\n                    <DashboardLanding \n                        rawData={this.state.rawData}\n                        updateData={this.changeRawData.bind(this)}\n                    />\n                }/>\n                <Route path=\"/dashboard/:fileId\" render={({match}) => \n                    this.displayVisualization(match.params.fileId)\n                }/>\n            </HashRouter>\n        );\n    }\n\n    appComponent(mode: \"replay\" | \"iterative\", exp_path: string) {\n        const spacerUserOptions = `${this.state.spacerUserOptions}`;\n        return <AppWrapper\n        name={this.state.problemName}\n        exp_path ={exp_path}\n        mode={mode}\n        problem={this.state.problem!}\n        spacerUserOptions={spacerUserOptions}\n        hideBracketsAssoc={this.state.hideBracketsAssoc}\n        nonStrictForNegatedStrictInequalities={this.state.nonStrictForNegatedStrictInequalities}\n        orientClauses={this.state.orientClauses}\n        varNames={this.state.varNames}\n        />\n    }\n    \n    displayVisualization(fileId: string) {\n        let rawData = this.state.rawData.filter(x => x.id === fileId)[0];\n        if (rawData) {\n            return (\n                <Dashboard\n                    rawData={rawData.content}\n                />\n            );\n        }\n    }\n\n    changeProblem(problem: string) {\n        this.setState({problem: problem});\n    }\n    changeProblemName(problemName: string) {\n        this.setState({problemName: problemName});\n    }\n    changeSpacerUserOptions(spacerUserOptions: string) {\n        this.setState({spacerUserOptions: spacerUserOptions});\n    }\n    changeHideBracketsAssoc(newValue: boolean) {\n        this.setState({hideBracketsAssoc: newValue});\n    }\n    changeNonStrictForNegatedStrictInequalities(newValue: boolean) {\n        this.setState({nonStrictForNegatedStrictInequalities: newValue});\n    }\n    changeOrientClauses(newValue: boolean) {\n        this.setState({orientClauses: newValue});\n    }\n    changeVariables(newValue: string){\n        this.setState({\n            varNames: newValue\n        });\n    }\n    \n    changeRawData(newValue: {name:string, id:string, content:string}){\n        let currentList = this.state.rawData;\n        let newList = currentList.concat([newValue]);\n        this.setState({\n            rawData: newList\n        });\n    }\n}\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.1/8 is considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl)\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready.then(registration => {\n      registration.unregister();\n    });\n  }\n}\n","import * as React from 'react';\nimport * as ReactDOM from 'react-dom';\nimport './index.css';\nimport { AppRouter } from './components/Router';\nimport * as serviceWorker from './serviceWorker';\n\nReactDOM.render(\n  <AppRouter/>,\n  document.getElementById('root')\n);\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.unregister();\n","module.exports = __webpack_public_path__ + \"static/media/all.cd5d2510.svg\";","module.exports = __webpack_public_path__ + \"static/media/angle-arrow-down.412f3289.svg\";"],"sourceRoot":""}